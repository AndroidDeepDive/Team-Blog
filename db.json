{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/default.styl","path":"css/default.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/og_image.png","path":"img/og_image.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/column.js","path":"js/column.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"source/images/cover_jepack_compose.png","path":"images/cover_jepack_compose.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2.md","hash":"d65df0e556d5801ecca61ce1f862174e021920ca","modified":1627197030207},{"_id":"source/images/cover_jepack_compose.png","hash":"0f17f71dd25d58a7b9220a5d88354d247249e695","modified":1627195390393},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 1.md","hash":"1f3006f1a7703fc988b29b67537d29a61059fb0f","modified":1627195703351},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 1/WprDTs1.png","hash":"1e7a9e83f70a8a888576c9414310dc2c5ecd42b6","modified":1627192041705},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 1/aO6Jlsg.png","hash":"cb2a6385373460ed62d557f5fd6857b9add5154b","modified":1627192007543},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_T9Pww7JyPMPhCJ_6yU8fyQ.png","hash":"54f618490e46ada03f3a75d198acc1c7ddc0f321","modified":1627196899753},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_9IA2k2s5hAS9pSyzpmQ6Pw.png","hash":"2b7af6d2978089bb374422102202071ab277d7b0","modified":1627196844240},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_5RZOM7sWV0sXctJtTPdshQ.png","hash":"ffe02f83fee60952e843f6851f901bea72ce9dca","modified":1627196858090},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_UoLVl1dbUjKh9kd4uY0ROA.png","hash":"11b60f2e071153fcbe560e89aaef163a87ad142e","modified":1627196977774},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_XVvr-CB2pn88Te7Gg52GPA.png","hash":"fc39b18462260b52dc5a6bab6f2cc387b257ede9","modified":1627196828869},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_bSyX8yT7H2HevBNw9fbyYw.png","hash":"dffd3bbd66021f82170b9067b5826289b15bd4cb","modified":1627196887978},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_tPAf-Akf2IpDRrrZo1f1dg.png","hash":"67bb69909c81fcebf26ce429115685c0c0aa3bae","modified":1627196938353},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_wFM4jF71V5aJog3lALaRKQ.png","hash":"7cc0b73358aa886719fb51ccb88413fa740b38e9","modified":1627196925904},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_m7mSalYCza-SoJjmlYeWdA.png","hash":"d5d4958f6e2304ad94f4dc38104c99b9173376b5","modified":1627196954517},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/add_002_001.png","hash":"7c35a0d3efc17ff4a8f4eb8a1d8c3a589dac2db3","modified":1627197004745},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 1/1_5gfrQWfxyEC7Oq6b2xlJ9w.png","hash":"4612b82b8aaeb87d65092177d8a8179943c08ced","modified":1627191371716},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 1/VLTxB8C.png","hash":"d37822b0cf3b0a6c6092faa237fb50b917a291c7","modified":1627192230337},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 1/qgQ6oY4.png","hash":"7de89cfdcd8b8c0c88f0247648b9d5979d61f737","modified":1627192071727},{"_id":"source/_posts/.DS_Store","hash":"e3a2f39b35ba7fea55904d92b2e61912688237f8","modified":1627196803421},{"_id":"source/.DS_Store","hash":"b602bc7dacdcdca0a088a82322816aa47bf183f9","modified":1627196803422},{"_id":"themes/icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626871710187},{"_id":"themes/icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626871710183},{"_id":"themes/icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626871710188},{"_id":"themes/icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626871710190},{"_id":"themes/icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626871710189},{"_id":"themes/icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626871710170},{"_id":"themes/icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626871710173},{"_id":"themes/icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626871710173},{"_id":"themes/icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626871710174},{"_id":"themes/icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626871710174},{"_id":"themes/icarus/.DS_Store","hash":"c16e31ab96d11a9d5523f6539d4b162123962ddf","modified":1627059163641},{"_id":"themes/icarus/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1626871710164},{"_id":"themes/icarus/.gitignore","hash":"36084c0851a22bfd393933abb8e262562ffc6802","modified":1626873230442},{"_id":"themes/icarus/.eslintrc.json","hash":"43c7740158c8690242720b4ff7fa11426fc20c79","modified":1626871710164},{"_id":"themes/icarus/.npmignore","hash":"42242c8da7a020a3295e7dd3d18bf022cb08b661","modified":1626871710168},{"_id":"themes/icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1626871710168},{"_id":"themes/icarus/README.md","hash":"247ec8047ee3105d31099dd8e6ca498b6bff1336","modified":1626871710169},{"_id":"themes/icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1626871710169},{"_id":"themes/icarus/package.json","hash":"b87737dd30d2eaa5b240b196c55cc8d52ffba75c","modified":1626871710191},{"_id":"themes/icarus/languages/en.yml","hash":"1bdb74288808c4d306b46630860e586a1fcd88a7","modified":1626871710178},{"_id":"themes/icarus/languages/es.yml","hash":"48fe3d7d304239b5e5e93f63600093700d6f0fed","modified":1626871710178},{"_id":"themes/icarus/languages/de.yml","hash":"01d9c27c3c9224d8c58b1cf7099ef008b9411a45","modified":1626871710178},{"_id":"themes/icarus/languages/fr.yml","hash":"14765cc6216b4af5a05341315c9f6ee54d636a78","modified":1626871710179},{"_id":"themes/icarus/languages/id.yml","hash":"c04fca89e536d539a8bf95980bff7dff79125ba3","modified":1626871710179},{"_id":"themes/icarus/languages/ja.yml","hash":"7568f246a21813527ccea8a1da72a9526aa2d233","modified":1626871710179},{"_id":"themes/icarus/languages/ko.yml","hash":"f2211a8ca1d73f05a1c931aa11accb4e34c483c4","modified":1626871710179},{"_id":"themes/icarus/languages/pl.yml","hash":"612639b0e0a15185c12eecfe3e8913b629ecdfdf","modified":1626871710180},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"531b22c71fab8aae60ddc7599aaa5f46140cf2c1","modified":1626871710180},{"_id":"themes/icarus/languages/ru.yml","hash":"bf784c6f31e8fb7ed78509468bddecd447c3b73b","modified":1626871710180},{"_id":"themes/icarus/languages/tk.yml","hash":"e5b9b369bbcf90c199a65a877eb75fba05cd7f90","modified":1626871710180},{"_id":"themes/icarus/languages/vn.yml","hash":"64307bfa16d851334e2f37a29a84d644624c2060","modified":1626871710181},{"_id":"themes/icarus/languages/tr.yml","hash":"96d94f7a5d56b2682ae2792f0808139d4b950704","modified":1626871710181},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"82ff607b1671b88d259d10b6ce8ca1bb05b2cff4","modified":1626871710181},{"_id":"themes/icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1626871710169},{"_id":"themes/icarus/include/dependency.js","hash":"d30dbcefd58619f6705d6369b644bc7ba44d2421","modified":1626871710169},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"92f8cf599ad06bb14f79f4806ac4c695f60044d7","modified":1626871710182},{"_id":"themes/icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":1626871710182},{"_id":"themes/icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1626871710183},{"_id":"themes/icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1626871710183},{"_id":"themes/icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1626871710187},{"_id":"themes/icarus/layout/layout.jsx","hash":"27dcef37bb2986ba7baf869ef4886ebe9917dabf","modified":1627045299033},{"_id":"themes/icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1626871710188},{"_id":"themes/icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1626871710189},{"_id":"themes/icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1626871710190},{"_id":"themes/icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1626871710190},{"_id":"themes/icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1626871710191},{"_id":"themes/icarus/include/migration/head.js","hash":"269ba172013cbd2f10b9bc51af0496628081329b","modified":1626871710169},{"_id":"themes/icarus/source/.DS_Store","hash":"ae53dfd2a20622619f81b0f3718694cc25286ff8","modified":1627059174203},{"_id":"themes/icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1626871710170},{"_id":"themes/icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1626871710170},{"_id":"themes/icarus/include/schema/config.json","hash":"ac633f9d349bca4f089d59d2c3738b57376f1b31","modified":1626871710173},{"_id":"themes/icarus/include/style/article.styl","hash":"580b1e9bd356ed6781c32ccc49c6fa3486b94620","modified":1626973290439},{"_id":"themes/icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1626871710175},{"_id":"themes/icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1626871710175},{"_id":"themes/icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1626871710176},{"_id":"themes/icarus/include/style/codeblock.styl","hash":"30bee4cf6792e9665eb648cc20b352d9eaff1207","modified":1626871710176},{"_id":"themes/icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1626871710176},{"_id":"themes/icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1626871710176},{"_id":"themes/icarus/include/register.js","hash":"a974b56a1fbb254f1ae048cc2221363faaccec25","modified":1626871710170},{"_id":"themes/icarus/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":1626871710177},{"_id":"themes/icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1626871710176},{"_id":"themes/icarus/include/style/plugin.styl","hash":"679b61b5fc5b3281735a21c37aeb64229d9c51ea","modified":1626871710177},{"_id":"themes/icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1626972686487},{"_id":"themes/icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1626871710177},{"_id":"themes/icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1626871710177},{"_id":"themes/icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1626871710177},{"_id":"themes/icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1626871710178},{"_id":"themes/icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1626871710178},{"_id":"themes/icarus/layout/common/article.jsx","hash":"16513ab1745533d0f4cdbdee323339ebab6d02c1","modified":1626871710184},{"_id":"themes/icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1626871710184},{"_id":"themes/icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1626871710184},{"_id":"themes/icarus/layout/common/head.jsx","hash":"37f2f2efcb102c706e2460dc9cdeaa302366d318","modified":1626871710185},{"_id":"themes/icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":1626871710185},{"_id":"themes/icarus/layout/common/navbar.jsx","hash":"fcd9fd4624dee49207ef09ea2a1c63f524f3710c","modified":1626871710185},{"_id":"themes/icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1626871710186},{"_id":"themes/icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1626871710186},{"_id":"themes/icarus/layout/common/scripts.jsx","hash":"0fe1fddab431fb9f63906d8c480d5cd6b33abc32","modified":1626871710186},{"_id":"themes/icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1626871710186},{"_id":"themes/icarus/layout/common/widgets.jsx","hash":"689cf4a6b79337b11d1d56afa9dda09223a809a1","modified":1626871710187},{"_id":"themes/icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1626871710189},{"_id":"themes/icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1626871710188},{"_id":"themes/icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1626871710192},{"_id":"themes/icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1626964877654},{"_id":"themes/icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1626871710192},{"_id":"themes/icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1626871710192},{"_id":"themes/icarus/source/img/favicon.png","hash":"11c336162b4b87962f1e58c06e6d1c1b23eb5d45","modified":1627059457976},{"_id":"themes/icarus/source/img/avatar.png","hash":"5f294e72d6b2385e2f7f946ded9f06ca9f3cf6c6","modified":1627059137118},{"_id":"themes/icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1626871710193},{"_id":"themes/icarus/source/img/logo.png","hash":"be05b47728f1276b913de1191bd7df1929cfbf5d","modified":1626970438413},{"_id":"themes/icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1626871710194},{"_id":"themes/icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1626871710193},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1626871710194},{"_id":"themes/icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1626871710194},{"_id":"themes/icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1626871710195},{"_id":"themes/icarus/source/js/.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1626871710195},{"_id":"themes/icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1626871710195},{"_id":"themes/icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1626871710195},{"_id":"themes/icarus/source/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1626871710196},{"_id":"themes/icarus/include/schema/common/article.json","hash":"8d78149f44629d0848921c6fb9c008b03cef3116","modified":1626871710170},{"_id":"themes/icarus/include/schema/common/comment.json","hash":"7d744391a8abee9a2c450b6fdd36a3866a488025","modified":1626871710170},{"_id":"themes/icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1626871710171},{"_id":"themes/icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1626871710171},{"_id":"themes/icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1626871710171},{"_id":"themes/icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1626871710172},{"_id":"themes/icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1626871710172},{"_id":"themes/icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1626871710172},{"_id":"themes/icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1626871710172},{"_id":"themes/icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1626871710172},{"_id":"themes/icarus/include/schema/common/widgets.json","hash":"d000b4d1d09bdd64756265aa4cd2ea980ab7ddc7","modified":1626871710173},{"_id":"themes/icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1626871710171},{"_id":"themes/icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1626871710174},{"_id":"themes/icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1626871710173},{"_id":"themes/icarus/include/schema/widget/profile.json","hash":"e801d302e680b4256f89b35d9caff7c9a0b0d178","modified":1626965515768},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_ybDWG4W2bPYNq79vr1gE8w.png","hash":"6fe0ceafc9915691608eef8ec7e77e066d68ce2f","modified":1627195804776},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 1/compose_animation.gif","hash":"3045c10cf0a91ce3907c24026a381134b0674f24","modified":1627100104526},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1627197032927},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1627197032927},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1627197032927},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1627197032927},{"_id":"public/manifest.json","hash":"e304ac116ed2377427b5d86fa1b011b9eaea0f10","modified":1627197032927},{"_id":"public/content.json","hash":"1172a53da95f3f5bd4b674ba74215848afbf2277","modified":1627197032927},{"_id":"public/categories/Jetpack-Compose/index.html","hash":"398f50c57ec839c68f6cce2fd807d9a34253205a","modified":1627197032927},{"_id":"public/archives/index.html","hash":"649280ff66128dd7b96dce6ab0d353b8e56ebfc0","modified":1627197032927},{"_id":"public/archives/2021/index.html","hash":"ea2b623cc5f9e02d11119a50323659ac8883ecc9","modified":1627197032927},{"_id":"public/archives/2021/04/index.html","hash":"955a4f7be3f3d82cc7749c076878f87a8ecc024e","modified":1627197032927},{"_id":"public/tags/Jetpack/index.html","hash":"22eee101a578ea72a42a134304bc5625107b4f97","modified":1627197032927},{"_id":"public/tags/Compose/index.html","hash":"41d6ffb262492d924d611c0a57b854a39fa5bccf","modified":1627197032927},{"_id":"public/tags/Android/index.html","hash":"4e744e8ce88d6a6e5a942d4a461cfa705e118e0b","modified":1627197032927},{"_id":"public/index.html","hash":"73c51c8ed0c05b808bfdfdf0157397bf982e0f1b","modified":1627197032927},{"_id":"public/categories/index.html","hash":"a07ed49d7f8d895eddc2f927e9b786a39bcdd9ed","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 2/index.html","hash":"3681fc95acdf64bea538ccbb051f66da4087e8f2","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 1/index.html","hash":"5c5ed20402bfe3a8c8be3196ee62982ea65e3fb1","modified":1627197032927},{"_id":"public/tags/index.html","hash":"87bb108e21cbb35c06c822f2534d67f3b0126470","modified":1627197032927},{"_id":"public/img/avatar.png","hash":"5f294e72d6b2385e2f7f946ded9f06ca9f3cf6c6","modified":1627197032927},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1627197032927},{"_id":"public/img/logo.png","hash":"be05b47728f1276b913de1191bd7df1929cfbf5d","modified":1627197032927},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1627197032927},{"_id":"public/img/favicon.png","hash":"11c336162b4b87962f1e58c06e6d1c1b23eb5d45","modified":1627197032927},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1627197032927},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 2/1_5RZOM7sWV0sXctJtTPdshQ.png","hash":"ffe02f83fee60952e843f6851f901bea72ce9dca","modified":1627197032927},{"_id":"public/images/cover_jepack_compose.png","hash":"0f17f71dd25d58a7b9220a5d88354d247249e695","modified":1627197032927},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 2/1_9IA2k2s5hAS9pSyzpmQ6Pw.png","hash":"2b7af6d2978089bb374422102202071ab277d7b0","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 2/1_T9Pww7JyPMPhCJ_6yU8fyQ.png","hash":"54f618490e46ada03f3a75d198acc1c7ddc0f321","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 2/1_XVvr-CB2pn88Te7Gg52GPA.png","hash":"fc39b18462260b52dc5a6bab6f2cc387b257ede9","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 2/1_bSyX8yT7H2HevBNw9fbyYw.png","hash":"dffd3bbd66021f82170b9067b5826289b15bd4cb","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 2/1_UoLVl1dbUjKh9kd4uY0ROA.png","hash":"11b60f2e071153fcbe560e89aaef163a87ad142e","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 2/1_m7mSalYCza-SoJjmlYeWdA.png","hash":"d5d4958f6e2304ad94f4dc38104c99b9173376b5","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 2/1_tPAf-Akf2IpDRrrZo1f1dg.png","hash":"67bb69909c81fcebf26ce429115685c0c0aa3bae","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 2/1_wFM4jF71V5aJog3lALaRKQ.png","hash":"7cc0b73358aa886719fb51ccb88413fa740b38e9","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 2/add_002_001.png","hash":"7c35a0d3efc17ff4a8f4eb8a1d8c3a589dac2db3","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 1/WprDTs1.png","hash":"1e7a9e83f70a8a888576c9414310dc2c5ecd42b6","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 1/aO6Jlsg.png","hash":"cb2a6385373460ed62d557f5fd6857b9add5154b","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 1/1_5gfrQWfxyEC7Oq6b2xlJ9w.png","hash":"4612b82b8aaeb87d65092177d8a8179943c08ced","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 1/VLTxB8C.png","hash":"d37822b0cf3b0a6c6092faa237fb50b917a291c7","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 1/qgQ6oY4.png","hash":"7de89cfdcd8b8c0c88f0247648b9d5979d61f737","modified":1627197032927},{"_id":"public/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1627197032927},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1627197032927},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1627197032927},{"_id":"public/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1627197032927},{"_id":"public/css/cyberpunk.css","hash":"33cb6e6c54af1717a2447f527d0ccf1a06502cb1","modified":1627197032927},{"_id":"public/css/default.css","hash":"d1be246b56d96525ef38324dd769a4d70b932124","modified":1627197032927},{"_id":"public/css/style.css","hash":"d1be246b56d96525ef38324dd769a4d70b932124","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 2/1_ybDWG4W2bPYNq79vr1gE8w.png","hash":"6fe0ceafc9915691608eef8ec7e77e066d68ce2f","modified":1627197032927},{"_id":"public/2021/04/07/2021-04-07 Jetpack Compose Part 1/compose_animation.gif","hash":"3045c10cf0a91ce3907c24026a381134b0674f24","modified":1627197032927}],"Category":[{"name":"Jetpack Compose","_id":"ckriv3n5y0001z6re1d17dxi2"}],"Data":[],"Page":[],"Post":[{"title":"Jetpack Compose Part 2 - Preview / Layout / Decompile","date":"2021-04-06T17:00:00.000Z","_content":"\n<article class=\"message message-immersive is-primary\">\n    <div class=\"message-body\">\n        <i class=\"fas fa-pen-fancy mr-2\"></i>Writers<br>\n        by 김남훈 @Naver<br>\n        by 배희성 @RocketPunch<br>\n        by 송시영 @SmartStudy<br>\n        by 이기정 @BankSalad\n    </div>\n</article>\n\n<!-- more -->\n\n## Android Studio의 Jetpack Compose\n\nAndroid Studio Preview를 사용해 Compose를 사용하다보면 Preview라 코드레벨에서 활성화되는 것을 알 수 있다.\n\n좀 더 자세히 살펴보자.\n\n### Preview의 기능들\n\nPreview 와 Compose 를 사용해서 아래와 같이 구성할 수 있다.\n\n{% asset_img 1_ybDWG4W2bPYNq79vr1gE8w.png [1_ybDWG4W2bPYNq79vr1gE8w] %}\n\nSplit(design/code) 을 선택에 따라 코드 및 디자인의 패널을 변경할 수도 있다.\n\n{% asset_img 1_XVvr-CB2pn88Te7Gg52GPA.png [1_XVvr-CB2pn88Te7Gg52GPA] %}\n\n미리보기에서 인터렉티브 모드를 설정할 수 있다. \n\n인터렉티브 모드를 설정하면 실제 디바이스처럼  클릭이나 드래그 등의 상호 작용을 확인해 볼 수 있다.\n\n다만, 네트워크나 파일에 접근 또는 일부 Context API 는 인터렉티브 모드를 지원하지 않고 있다.\n\n> 간헐적으로 interactive 모드가 작동하지 않는 경우가 있다.\n\n{% asset_img 1_9IA2k2s5hAS9pSyzpmQ6Pw.png [1_9IA2k2s5hAS9pSyzpmQ6Pw] %}\n\n미리보기에서 직접 디바이스 혹은 에뮬레이터로 배포하여 결과를 확인할 수도 있다.\n\n{% asset_img 1_5RZOM7sWV0sXctJtTPdshQ.png [1_5RZOM7sWV0sXctJtTPdshQ] %}\n\n\n### `@Preview` Annotation 분석\n\n위에서 언급했다시피 `@Preview`를 사용하면 디바이스나 에뮬레이터를 실행하지 않고 실시간으로 Compose UI 를 볼 수 있다.\n\n`@Preview`를는 아래와 같이 구성되어 있으며 설정에 따라서 미리보기를 다양하게 구성할 수 있다.\n\n```kotlin\nannotation class Preview(\n    val name: String = \"\",\n    val group: String = \"\",\n    @IntRange(from = 1) val apiLevel: Int = -1,\n    // TODO(mount): Make this Dp when they are inline classes\n    val widthDp: Int = -1,\n    // TODO(mount): Make this Dp when they are inline classes\n    val heightDp: Int = -1,\n    val locale: String = \"\",\n    @FloatRange(from = 0.01) val fontScale: Float = 1f,\n    val showSystemUi: Boolean = false,\n    val showBackground: Boolean = false,\n    val backgroundColor: Long = 0,\n    @UiMode val uiMode: Int = 0,\n    @Device val device: String = Devices.DEFAULT\n)\n```\n\n- **name** : Preview 의 이름을 지정하며, 기본 값은 function 이름으로 설정된다.\n- **group** : Preview 의 그룹을 지정한다, 기본 값은 function 이름으로 설정된다.\n- **apiLevel** : api level 설정에 따라 Composable 을 렌더링해준다.\n- **widthDp** : Preview 의 너비를 설정한다. (기본 단위는 dp)\n- **heightDp** : Preview 의 높이를 설정한다. (기본 단위는 dp)\n- **locale** : 사용자 locales 에 따라 보여지는 UI 를 테스트 하기 위해 사용한다.\n- **fontScale** : 기본 density 애 배율을 적용해서 폰트 사이즈를 변경할 수 있다.\n- **showSystemUi** : true 로 설정하면 status bar 와 action bar 를 노출한다.\n- **showBackground** : true 로 설정하면 기본 배경색상을 적용해준다.\n- **backgroundColor** : 미리보기의 배경색을 설정할 수 있으며, showBackground 설정에 따라 노출 유무를 결정한다.\n- **uiMode** : uiMode 를 설정한다.\n- **device** : 기존 정의된 디바이스를 프리뷰에 적용한다. Devices object 에 정의된 값을 선택해서 사용할 수 있습니다. (Devices.NEXUS_9)\n\n### Compose의 레이아웃 구성\n\n- **Column** : 아이템을 세로로 배치한다.\n\n```kotlin\n@Composable\nfun ComposeColumn() {\n    Column {\n        Text(text = \"My First Compose\")\n        Text(text = \"My First Compose\")\n    }\n}\n```\n\n{% asset_img 1_bSyX8yT7H2HevBNw9fbyYw.png [1_bSyX8yT7H2HevBNw9fbyYw] %}\n\n- **Row** : 아이템을 가로로 배치한다.\n\n```kotlin\n@Composable\nfun ComposeRow() {\n    Row {\n        Text(text = \"My First Compose\")\n        Text(text = \"My First Compose\")\n    }\n}\n```\n\n{% asset_img 1_T9Pww7JyPMPhCJ_6yU8fyQ.png [1_T9Pww7JyPMPhCJ_6yU8fyQ] %}\n\n- **Box** : 구성 요소를 다른 구성 요소 위에 배치한다.\n\n```kotlin\n@Composable\nfun ComposeBox() {\n    Box {\n        Text(text = \"My First Compose 1\")\n        Text(text = \"My First Compose 2\")\n    }\n}\n```\n\n{% asset_img 1_wFM4jF71V5aJog3lALaRKQ.png [1_wFM4jF71V5aJog3lALaRKQ] %}\n\n- **Modifier** : 구성 요소의 크기, 마진등을 변경하거나 클릭이나 스크롤 등의 이벤트를 제어할 수 있도록 한다.\n\n```kotlin\n@Composable\nfun ComposeModifier() {\n    Box(modifier = Modifier\n        .padding(5.dp)\n    ) {\n        Text(text = \"Compose Modifier\")\n    }\n}\n```\n\n{% asset_img 1_tPAf-Akf2IpDRrrZo1f1dg.png [1_tPAf-Akf2IpDRrrZo1f1dg] %}\n\n- **LazyColumn / LazyRow** : Recyclerview 유사하게 화면에 보여지는 구성 요소만을 렌더링한다. 큰 데이터셋을 다루기에 용이하다.\n\n```kotlin\n@Composable\nfun ComposeLazyColumn() {\n    val itemsList = (0..100).toList()\n\n    LazyColumn {\n        items(items = itemsList, itemContent = { item ->\n            Text(text = \"Item : $item\", style = TextStyle(fontSize = 80.sp))\n        })\n    }\n}\n```\n\n{% asset_img 1_m7mSalYCza-SoJjmlYeWdA.png [1_m7mSalYCza-SoJjmlYeWdA] %}\n\n- **ConstraintLayout** : 기존 ContraintLayout 과 같이 여러 제약 참조를 설정해서 사용할 수 있다.\n `createRefs` / `createRefFor` 를 통해 참조를 생성하며, constrainAs 를 통해 제약 조건을 설정한다.\n\n```kotlin\n@Composable\nfun ComposeConstraintLayout() {\n    ConstraintLayout(modifier = Modifier.size(100.dp, 200.dp)) {\n        val (text1, image, text3) = createRefs()\n\n        Text(\"Text Item 1\", Modifier.constrainAs(text1) {\n            top.linkTo(parent.top)\n            start.linkTo(parent.start)\n            end.linkTo(parent.end)\n        })\n\n        Image(\n            painterResource(R.drawable.ic_launcher_foreground),\n            contentDescription = \"\",\n            contentScale = ContentScale.Crop,\n            modifier = Modifier.fillMaxSize().constrainAs(image) {\n                top.linkTo(text1.bottom)\n                bottom.linkTo(text3.top)\n                start.linkTo(parent.start)\n                end.linkTo(parent.end)\n            }\n        )\n\n        Text(\"Text Item 3\", Modifier.constrainAs(text3) {\n            bottom.linkTo(parent.bottom)\n            start.linkTo(parent.start)\n            end.linkTo(parent.end)\n        })\n    }\n}\n```\n\nJetpack Compose 의 ConstraintLayout 을 사용하기 위해서는 아래 의존성을 추가해야 한다.\n\n```groovy\nimplementation \"androidx.constraintlayout:constraintlayout-compose:1.0.0-alpha05\"\n```\n\n{% asset_img 1_UoLVl1dbUjKh9kd4uY0ROA.png [1_UoLVl1dbUjKh9kd4uY0ROA] %}\n\n### Jetpack Compose의 동작 원리 파악을 위한 빌드 과정 추적\n\n##### 1. 프로젝트 생성\n\nCompose가 내부적으로 어떻게 동작하는 지 알아보기 위해 먼저 프로젝트를 빌드해보자.\n\n빌드 후 Kotlin > Byte Code > Decompiled Java 순서로 변환하여 살펴볼 것이다.\n\nAndroid Studio Preview에서 Empty Compose Activity로 프로젝트를 생성하면 아래와 같은 샘플 코드를 얻을 수 있다.\n\n프로젝트 생성 후 임의로 Hello World로 파라미터값을 변경하였다.\n\n\n```kotlin\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            HelloWorldTheme {\n                // A surface container using the 'background' color from the theme\n                Surface(color = MaterialTheme.colors.background) {\n                    Greeting(\"World\")\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun Greeting(name: String) {\n    Text(text = \"Hello $name!\")\n}\n\n@Preview(showBackground = true)\n@Composable\nfun DefaultPreview() {\n    HelloWorldTheme {\n        Greeting(\"World\")\n    }\n}\n```\n\n부가적으로 `src` 폴더 내부에 `ui.theme` 패키지가 생성되고 `Color.kt`, `Shape.kt`, `Theme.kt`, `Type.kt` 파일도 생성된다.\n\n이 파일들은 필요한 경우 들여다 보도록 하자.\n\n생성 후 Preview에 아래와 같이 렌더링 된다.\n\n{% asset_img add_002_001.png [add_002_001] %}\n\n##### 2. MainActivity 디컴파일\n\n```java\n@Metadata(\n   mv = {1, 4, 2},\n   bv = {1, 0, 3},\n   k = 2,\n   d1 = {\"\\u0000\\u0010\\n\\u0000\\n\\u0002\\u0010\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\u001a\\b\\u0010\\u0000\\u001a\\u00020\\u0001H\\u0007\\u001a\\u0010\\u0010\\u0002\\u001a\\u00020\\u00012\\u0006\\u0010\\u0003\\u001a\\u00020\\u0004H\\u0007¨\\u0006\\u0005\"},\n   d2 = {\"DefaultPreview\", \"\", \"Greeting\", \"name\", \"\", \"app_debug\"}\n)\npublic final class MainActivityKt {\n   @Composable\n   public static final void Greeting(@NotNull String name) {\n      Intrinsics.checkNotNullParameter(name, \"name\");\n      TextKt.Text-Vh6c2nE$default(\"Hello \" + name + '!', (Modifier)null, 0L, 0L, (FontStyle)null, (FontWeight)null, (FontFamily)null, 0L, (TextDecoration)null, (TextAlign)null, 0L, (TextOverflow)null, false, 0, (Function1)null, (TextStyle)null, 65534, (Object)null);\n   }\n\n   @Composable\n   public static final void DefaultPreview() {\n      ThemeKt.HelloWorldTheme$default(false, (Function0)null.INSTANCE, 1, (Object)null);\n   }\n}\n\n// MainActivity.java\n@Metadata(\n   mv = {1, 4, 2},\n   bv = {1, 0, 3},\n   k = 1,\n   d1 = {\"\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u0002\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0000\\u0018\\u00002\\u00020\\u0001B\\u0005¢\\u0006\\u0002\\u0010\\u0002J\\u0012\\u0010\\u0003\\u001a\\u00020\\u00042\\b\\u0010\\u0005\\u001a\\u0004\\u0018\\u00010\\u0006H\\u0014¨\\u0006\\u0007\"},\n   d2 = {\"Lcom/example/helloworld/MainActivity;\", \"Landroidx/activity/ComponentActivity;\", \"()V\", \"onCreate\", \"\", \"savedInstanceState\", \"Landroid/os/Bundle;\", \"app_debug\"}\n)\npublic final class MainActivity extends ComponentActivity {\n   protected void onCreate(@Nullable Bundle savedInstanceState) {\n      super.onCreate(savedInstanceState);\n      ComponentActivityKt.setContent$default(this, (CompositionContext)null, (Function0)null.INSTANCE, 1, (Object)null);\n   }\n}\n```\n\n`ComponentActivityKt.setContent()`의 구현체는 아래와 같다.\n\n```kotlin\npublic fun ComponentActivity.setContent(\n    parent: CompositionContext? = null,\n    content: @Composable () -> Unit\n) {\n    val existingComposeView = window.decorView\n        .findViewById<ViewGroup>(android.R.id.content)\n        .getChildAt(0) as? ComposeView\n\n    if (existingComposeView != null) with(existingComposeView) {\n        setParentCompositionContext(parent)\n        setContent(content)\n    } else ComposeView(this).apply {\n        // Set content and parent **before** setContentView\n        // to have ComposeView create the composition on attach\n        setParentCompositionContext(parent)\n        setContent(content)\n        setContentView(this, DefaultActivityContentLayoutParams)\n    }\n}\n```\n\n`CompositionContext` 파라미터는 null을 그대로 넘겨주었고, `(Function0)null.INSTANCE, 1, (Object)null`의 값으로 무언가를 넘겨주는데,\n\n이 값이 `@Composable` Annotation의 구현체이다.\n\n위의 코드 흔적을 술어로 표현해보면 **`@Composable` 구현체를 넘겨주면 이를 기반으로 `ComposeView` 객체를 생성하여 `Activity`의 `setContentView()`에 적용한다.** 가 되겠다.\n\n\n##### 3. `@Composable` 구현체 확인\n\n`Composable` Annotaion 클래스의 구현체는 아래와 같다.\n\n```kotlin\n@MustBeDocumented\n@Retention(AnnotationRetention.BINARY)\n@Target(\n    // function declarations\n    // @Composable fun Foo() { ... }\n    // lambda expressions\n    // val foo = @Composable { ... }\n    AnnotationTarget.FUNCTION,\n\n    // type declarations\n    // var foo: @Composable () -> Unit = { ... }\n    // parameter types\n    // foo: @Composable () -> Unit\n    AnnotationTarget.TYPE,\n\n    // composable types inside of type signatures\n    // foo: (@Composable () -> Unit) -> Unit\n    AnnotationTarget.TYPE_PARAMETER,\n\n    // composable property getters and setters\n    // val foo: Int @Composable get() { ... }\n    // var bar: Int\n    //   @Composable get() { ... }\n    AnnotationTarget.PROPERTY_GETTER\n)\nannotation class Composable\n```\n\nAnnotationTarget을 통해 메서드나 Lambda 객체를 넘겨서 뷰를 조립하는 방식인데, `View`와 `ViewGroup`처럼 내부적으로 트리 구조로 실행지점에 대한 정보를 저장하고 있다.\n\n파면 팔수록 Flutter의 Widget, React Native의 Component와 유사한 느낌을 준다.","source":"_posts/2021-04-07 Jetpack Compose Part 2.md","raw":"---\ntitle: Jetpack Compose Part 2 - Preview / Layout / Decompile\ndate: 2021-04-07 02:00\n\ncategories:\n- Jetpack Compose\ntags:\n- Android\n- Jetpack\n- Compose\n---\n\n<article class=\"message message-immersive is-primary\">\n    <div class=\"message-body\">\n        <i class=\"fas fa-pen-fancy mr-2\"></i>Writers<br>\n        by 김남훈 @Naver<br>\n        by 배희성 @RocketPunch<br>\n        by 송시영 @SmartStudy<br>\n        by 이기정 @BankSalad\n    </div>\n</article>\n\n<!-- more -->\n\n## Android Studio의 Jetpack Compose\n\nAndroid Studio Preview를 사용해 Compose를 사용하다보면 Preview라 코드레벨에서 활성화되는 것을 알 수 있다.\n\n좀 더 자세히 살펴보자.\n\n### Preview의 기능들\n\nPreview 와 Compose 를 사용해서 아래와 같이 구성할 수 있다.\n\n{% asset_img 1_ybDWG4W2bPYNq79vr1gE8w.png [1_ybDWG4W2bPYNq79vr1gE8w] %}\n\nSplit(design/code) 을 선택에 따라 코드 및 디자인의 패널을 변경할 수도 있다.\n\n{% asset_img 1_XVvr-CB2pn88Te7Gg52GPA.png [1_XVvr-CB2pn88Te7Gg52GPA] %}\n\n미리보기에서 인터렉티브 모드를 설정할 수 있다. \n\n인터렉티브 모드를 설정하면 실제 디바이스처럼  클릭이나 드래그 등의 상호 작용을 확인해 볼 수 있다.\n\n다만, 네트워크나 파일에 접근 또는 일부 Context API 는 인터렉티브 모드를 지원하지 않고 있다.\n\n> 간헐적으로 interactive 모드가 작동하지 않는 경우가 있다.\n\n{% asset_img 1_9IA2k2s5hAS9pSyzpmQ6Pw.png [1_9IA2k2s5hAS9pSyzpmQ6Pw] %}\n\n미리보기에서 직접 디바이스 혹은 에뮬레이터로 배포하여 결과를 확인할 수도 있다.\n\n{% asset_img 1_5RZOM7sWV0sXctJtTPdshQ.png [1_5RZOM7sWV0sXctJtTPdshQ] %}\n\n\n### `@Preview` Annotation 분석\n\n위에서 언급했다시피 `@Preview`를 사용하면 디바이스나 에뮬레이터를 실행하지 않고 실시간으로 Compose UI 를 볼 수 있다.\n\n`@Preview`를는 아래와 같이 구성되어 있으며 설정에 따라서 미리보기를 다양하게 구성할 수 있다.\n\n```kotlin\nannotation class Preview(\n    val name: String = \"\",\n    val group: String = \"\",\n    @IntRange(from = 1) val apiLevel: Int = -1,\n    // TODO(mount): Make this Dp when they are inline classes\n    val widthDp: Int = -1,\n    // TODO(mount): Make this Dp when they are inline classes\n    val heightDp: Int = -1,\n    val locale: String = \"\",\n    @FloatRange(from = 0.01) val fontScale: Float = 1f,\n    val showSystemUi: Boolean = false,\n    val showBackground: Boolean = false,\n    val backgroundColor: Long = 0,\n    @UiMode val uiMode: Int = 0,\n    @Device val device: String = Devices.DEFAULT\n)\n```\n\n- **name** : Preview 의 이름을 지정하며, 기본 값은 function 이름으로 설정된다.\n- **group** : Preview 의 그룹을 지정한다, 기본 값은 function 이름으로 설정된다.\n- **apiLevel** : api level 설정에 따라 Composable 을 렌더링해준다.\n- **widthDp** : Preview 의 너비를 설정한다. (기본 단위는 dp)\n- **heightDp** : Preview 의 높이를 설정한다. (기본 단위는 dp)\n- **locale** : 사용자 locales 에 따라 보여지는 UI 를 테스트 하기 위해 사용한다.\n- **fontScale** : 기본 density 애 배율을 적용해서 폰트 사이즈를 변경할 수 있다.\n- **showSystemUi** : true 로 설정하면 status bar 와 action bar 를 노출한다.\n- **showBackground** : true 로 설정하면 기본 배경색상을 적용해준다.\n- **backgroundColor** : 미리보기의 배경색을 설정할 수 있으며, showBackground 설정에 따라 노출 유무를 결정한다.\n- **uiMode** : uiMode 를 설정한다.\n- **device** : 기존 정의된 디바이스를 프리뷰에 적용한다. Devices object 에 정의된 값을 선택해서 사용할 수 있습니다. (Devices.NEXUS_9)\n\n### Compose의 레이아웃 구성\n\n- **Column** : 아이템을 세로로 배치한다.\n\n```kotlin\n@Composable\nfun ComposeColumn() {\n    Column {\n        Text(text = \"My First Compose\")\n        Text(text = \"My First Compose\")\n    }\n}\n```\n\n{% asset_img 1_bSyX8yT7H2HevBNw9fbyYw.png [1_bSyX8yT7H2HevBNw9fbyYw] %}\n\n- **Row** : 아이템을 가로로 배치한다.\n\n```kotlin\n@Composable\nfun ComposeRow() {\n    Row {\n        Text(text = \"My First Compose\")\n        Text(text = \"My First Compose\")\n    }\n}\n```\n\n{% asset_img 1_T9Pww7JyPMPhCJ_6yU8fyQ.png [1_T9Pww7JyPMPhCJ_6yU8fyQ] %}\n\n- **Box** : 구성 요소를 다른 구성 요소 위에 배치한다.\n\n```kotlin\n@Composable\nfun ComposeBox() {\n    Box {\n        Text(text = \"My First Compose 1\")\n        Text(text = \"My First Compose 2\")\n    }\n}\n```\n\n{% asset_img 1_wFM4jF71V5aJog3lALaRKQ.png [1_wFM4jF71V5aJog3lALaRKQ] %}\n\n- **Modifier** : 구성 요소의 크기, 마진등을 변경하거나 클릭이나 스크롤 등의 이벤트를 제어할 수 있도록 한다.\n\n```kotlin\n@Composable\nfun ComposeModifier() {\n    Box(modifier = Modifier\n        .padding(5.dp)\n    ) {\n        Text(text = \"Compose Modifier\")\n    }\n}\n```\n\n{% asset_img 1_tPAf-Akf2IpDRrrZo1f1dg.png [1_tPAf-Akf2IpDRrrZo1f1dg] %}\n\n- **LazyColumn / LazyRow** : Recyclerview 유사하게 화면에 보여지는 구성 요소만을 렌더링한다. 큰 데이터셋을 다루기에 용이하다.\n\n```kotlin\n@Composable\nfun ComposeLazyColumn() {\n    val itemsList = (0..100).toList()\n\n    LazyColumn {\n        items(items = itemsList, itemContent = { item ->\n            Text(text = \"Item : $item\", style = TextStyle(fontSize = 80.sp))\n        })\n    }\n}\n```\n\n{% asset_img 1_m7mSalYCza-SoJjmlYeWdA.png [1_m7mSalYCza-SoJjmlYeWdA] %}\n\n- **ConstraintLayout** : 기존 ContraintLayout 과 같이 여러 제약 참조를 설정해서 사용할 수 있다.\n `createRefs` / `createRefFor` 를 통해 참조를 생성하며, constrainAs 를 통해 제약 조건을 설정한다.\n\n```kotlin\n@Composable\nfun ComposeConstraintLayout() {\n    ConstraintLayout(modifier = Modifier.size(100.dp, 200.dp)) {\n        val (text1, image, text3) = createRefs()\n\n        Text(\"Text Item 1\", Modifier.constrainAs(text1) {\n            top.linkTo(parent.top)\n            start.linkTo(parent.start)\n            end.linkTo(parent.end)\n        })\n\n        Image(\n            painterResource(R.drawable.ic_launcher_foreground),\n            contentDescription = \"\",\n            contentScale = ContentScale.Crop,\n            modifier = Modifier.fillMaxSize().constrainAs(image) {\n                top.linkTo(text1.bottom)\n                bottom.linkTo(text3.top)\n                start.linkTo(parent.start)\n                end.linkTo(parent.end)\n            }\n        )\n\n        Text(\"Text Item 3\", Modifier.constrainAs(text3) {\n            bottom.linkTo(parent.bottom)\n            start.linkTo(parent.start)\n            end.linkTo(parent.end)\n        })\n    }\n}\n```\n\nJetpack Compose 의 ConstraintLayout 을 사용하기 위해서는 아래 의존성을 추가해야 한다.\n\n```groovy\nimplementation \"androidx.constraintlayout:constraintlayout-compose:1.0.0-alpha05\"\n```\n\n{% asset_img 1_UoLVl1dbUjKh9kd4uY0ROA.png [1_UoLVl1dbUjKh9kd4uY0ROA] %}\n\n### Jetpack Compose의 동작 원리 파악을 위한 빌드 과정 추적\n\n##### 1. 프로젝트 생성\n\nCompose가 내부적으로 어떻게 동작하는 지 알아보기 위해 먼저 프로젝트를 빌드해보자.\n\n빌드 후 Kotlin > Byte Code > Decompiled Java 순서로 변환하여 살펴볼 것이다.\n\nAndroid Studio Preview에서 Empty Compose Activity로 프로젝트를 생성하면 아래와 같은 샘플 코드를 얻을 수 있다.\n\n프로젝트 생성 후 임의로 Hello World로 파라미터값을 변경하였다.\n\n\n```kotlin\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            HelloWorldTheme {\n                // A surface container using the 'background' color from the theme\n                Surface(color = MaterialTheme.colors.background) {\n                    Greeting(\"World\")\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun Greeting(name: String) {\n    Text(text = \"Hello $name!\")\n}\n\n@Preview(showBackground = true)\n@Composable\nfun DefaultPreview() {\n    HelloWorldTheme {\n        Greeting(\"World\")\n    }\n}\n```\n\n부가적으로 `src` 폴더 내부에 `ui.theme` 패키지가 생성되고 `Color.kt`, `Shape.kt`, `Theme.kt`, `Type.kt` 파일도 생성된다.\n\n이 파일들은 필요한 경우 들여다 보도록 하자.\n\n생성 후 Preview에 아래와 같이 렌더링 된다.\n\n{% asset_img add_002_001.png [add_002_001] %}\n\n##### 2. MainActivity 디컴파일\n\n```java\n@Metadata(\n   mv = {1, 4, 2},\n   bv = {1, 0, 3},\n   k = 2,\n   d1 = {\"\\u0000\\u0010\\n\\u0000\\n\\u0002\\u0010\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\u001a\\b\\u0010\\u0000\\u001a\\u00020\\u0001H\\u0007\\u001a\\u0010\\u0010\\u0002\\u001a\\u00020\\u00012\\u0006\\u0010\\u0003\\u001a\\u00020\\u0004H\\u0007¨\\u0006\\u0005\"},\n   d2 = {\"DefaultPreview\", \"\", \"Greeting\", \"name\", \"\", \"app_debug\"}\n)\npublic final class MainActivityKt {\n   @Composable\n   public static final void Greeting(@NotNull String name) {\n      Intrinsics.checkNotNullParameter(name, \"name\");\n      TextKt.Text-Vh6c2nE$default(\"Hello \" + name + '!', (Modifier)null, 0L, 0L, (FontStyle)null, (FontWeight)null, (FontFamily)null, 0L, (TextDecoration)null, (TextAlign)null, 0L, (TextOverflow)null, false, 0, (Function1)null, (TextStyle)null, 65534, (Object)null);\n   }\n\n   @Composable\n   public static final void DefaultPreview() {\n      ThemeKt.HelloWorldTheme$default(false, (Function0)null.INSTANCE, 1, (Object)null);\n   }\n}\n\n// MainActivity.java\n@Metadata(\n   mv = {1, 4, 2},\n   bv = {1, 0, 3},\n   k = 1,\n   d1 = {\"\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u0002\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0000\\u0018\\u00002\\u00020\\u0001B\\u0005¢\\u0006\\u0002\\u0010\\u0002J\\u0012\\u0010\\u0003\\u001a\\u00020\\u00042\\b\\u0010\\u0005\\u001a\\u0004\\u0018\\u00010\\u0006H\\u0014¨\\u0006\\u0007\"},\n   d2 = {\"Lcom/example/helloworld/MainActivity;\", \"Landroidx/activity/ComponentActivity;\", \"()V\", \"onCreate\", \"\", \"savedInstanceState\", \"Landroid/os/Bundle;\", \"app_debug\"}\n)\npublic final class MainActivity extends ComponentActivity {\n   protected void onCreate(@Nullable Bundle savedInstanceState) {\n      super.onCreate(savedInstanceState);\n      ComponentActivityKt.setContent$default(this, (CompositionContext)null, (Function0)null.INSTANCE, 1, (Object)null);\n   }\n}\n```\n\n`ComponentActivityKt.setContent()`의 구현체는 아래와 같다.\n\n```kotlin\npublic fun ComponentActivity.setContent(\n    parent: CompositionContext? = null,\n    content: @Composable () -> Unit\n) {\n    val existingComposeView = window.decorView\n        .findViewById<ViewGroup>(android.R.id.content)\n        .getChildAt(0) as? ComposeView\n\n    if (existingComposeView != null) with(existingComposeView) {\n        setParentCompositionContext(parent)\n        setContent(content)\n    } else ComposeView(this).apply {\n        // Set content and parent **before** setContentView\n        // to have ComposeView create the composition on attach\n        setParentCompositionContext(parent)\n        setContent(content)\n        setContentView(this, DefaultActivityContentLayoutParams)\n    }\n}\n```\n\n`CompositionContext` 파라미터는 null을 그대로 넘겨주었고, `(Function0)null.INSTANCE, 1, (Object)null`의 값으로 무언가를 넘겨주는데,\n\n이 값이 `@Composable` Annotation의 구현체이다.\n\n위의 코드 흔적을 술어로 표현해보면 **`@Composable` 구현체를 넘겨주면 이를 기반으로 `ComposeView` 객체를 생성하여 `Activity`의 `setContentView()`에 적용한다.** 가 되겠다.\n\n\n##### 3. `@Composable` 구현체 확인\n\n`Composable` Annotaion 클래스의 구현체는 아래와 같다.\n\n```kotlin\n@MustBeDocumented\n@Retention(AnnotationRetention.BINARY)\n@Target(\n    // function declarations\n    // @Composable fun Foo() { ... }\n    // lambda expressions\n    // val foo = @Composable { ... }\n    AnnotationTarget.FUNCTION,\n\n    // type declarations\n    // var foo: @Composable () -> Unit = { ... }\n    // parameter types\n    // foo: @Composable () -> Unit\n    AnnotationTarget.TYPE,\n\n    // composable types inside of type signatures\n    // foo: (@Composable () -> Unit) -> Unit\n    AnnotationTarget.TYPE_PARAMETER,\n\n    // composable property getters and setters\n    // val foo: Int @Composable get() { ... }\n    // var bar: Int\n    //   @Composable get() { ... }\n    AnnotationTarget.PROPERTY_GETTER\n)\nannotation class Composable\n```\n\nAnnotationTarget을 통해 메서드나 Lambda 객체를 넘겨서 뷰를 조립하는 방식인데, `View`와 `ViewGroup`처럼 내부적으로 트리 구조로 실행지점에 대한 정보를 저장하고 있다.\n\n파면 팔수록 Flutter의 Widget, React Native의 Component와 유사한 느낌을 준다.","slug":"2021-04-07 Jetpack Compose Part 2","published":1,"updated":"2021-07-25T07:10:30.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckriv3n5s0000z6re3gwf1x4s","content":"<article class=\"message message-immersive is-primary\">\n    <div class=\"message-body\">\n        <i class=\"fas fa-pen-fancy mr-2\"></i>Writers<br>\n        by 김남훈 @Naver<br>\n        by 배희성 @RocketPunch<br>\n        by 송시영 @SmartStudy<br>\n        by 이기정 @BankSalad\n    </div>\n</article>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Android-Studio의-Jetpack-Compose\"><a href=\"#Android-Studio의-Jetpack-Compose\" class=\"headerlink\" title=\"Android Studio의 Jetpack Compose\"></a>Android Studio의 Jetpack Compose</h2><p>Android Studio Preview를 사용해 Compose를 사용하다보면 Preview라 코드레벨에서 활성화되는 것을 알 수 있다.</p>\n<p>좀 더 자세히 살펴보자.</p>\n<h3 id=\"Preview의-기능들\"><a href=\"#Preview의-기능들\" class=\"headerlink\" title=\"Preview의 기능들\"></a>Preview의 기능들</h3><p>Preview 와 Compose 를 사용해서 아래와 같이 구성할 수 있다.</p>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_ybDWG4W2bPYNq79vr1gE8w.png\" class=\"\" title=\"[1_ybDWG4W2bPYNq79vr1gE8w]\">\n\n<p>Split(design/code) 을 선택에 따라 코드 및 디자인의 패널을 변경할 수도 있다.</p>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_XVvr-CB2pn88Te7Gg52GPA.png\" class=\"\" title=\"[1_XVvr-CB2pn88Te7Gg52GPA]\">\n\n<p>미리보기에서 인터렉티브 모드를 설정할 수 있다. </p>\n<p>인터렉티브 모드를 설정하면 실제 디바이스처럼  클릭이나 드래그 등의 상호 작용을 확인해 볼 수 있다.</p>\n<p>다만, 네트워크나 파일에 접근 또는 일부 Context API 는 인터렉티브 모드를 지원하지 않고 있다.</p>\n<blockquote>\n<p>간헐적으로 interactive 모드가 작동하지 않는 경우가 있다.</p>\n</blockquote>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_9IA2k2s5hAS9pSyzpmQ6Pw.png\" class=\"\" title=\"[1_9IA2k2s5hAS9pSyzpmQ6Pw]\">\n\n<p>미리보기에서 직접 디바이스 혹은 에뮬레이터로 배포하여 결과를 확인할 수도 있다.</p>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_5RZOM7sWV0sXctJtTPdshQ.png\" class=\"\" title=\"[1_5RZOM7sWV0sXctJtTPdshQ]\">\n\n\n<h3 id=\"Preview-Annotation-분석\"><a href=\"#Preview-Annotation-분석\" class=\"headerlink\" title=\"@Preview Annotation 분석\"></a><code>@Preview</code> Annotation 분석</h3><p>위에서 언급했다시피 <code>@Preview</code>를 사용하면 디바이스나 에뮬레이터를 실행하지 않고 실시간으로 Compose UI 를 볼 수 있다.</p>\n<p><code>@Preview</code>를는 아래와 같이 구성되어 있으며 설정에 따라서 미리보기를 다양하게 구성할 수 있다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">annotation</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Preview</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: String = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> group: String = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"meta\">@IntRange(from = 1)</span> <span class=\"keyword\">val</span> apiLevel: <span class=\"built_in\">Int</span> = -<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"comment\">// TODO(mount): Make this Dp when they are inline classes</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> widthDp: <span class=\"built_in\">Int</span> = -<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"comment\">// TODO(mount): Make this Dp when they are inline classes</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> heightDp: <span class=\"built_in\">Int</span> = -<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> locale: String = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"meta\">@FloatRange(from = 0.01)</span> <span class=\"keyword\">val</span> fontScale: <span class=\"built_in\">Float</span> = <span class=\"number\">1f</span>,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> showSystemUi: <span class=\"built_in\">Boolean</span> = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> showBackground: <span class=\"built_in\">Boolean</span> = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> backgroundColor: <span class=\"built_in\">Long</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"meta\">@UiMode</span> <span class=\"keyword\">val</span> uiMode: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"meta\">@Device</span> <span class=\"keyword\">val</span> device: String = Devices.DEFAULT</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>name</strong> : Preview 의 이름을 지정하며, 기본 값은 function 이름으로 설정된다.</li>\n<li><strong>group</strong> : Preview 의 그룹을 지정한다, 기본 값은 function 이름으로 설정된다.</li>\n<li><strong>apiLevel</strong> : api level 설정에 따라 Composable 을 렌더링해준다.</li>\n<li><strong>widthDp</strong> : Preview 의 너비를 설정한다. (기본 단위는 dp)</li>\n<li><strong>heightDp</strong> : Preview 의 높이를 설정한다. (기본 단위는 dp)</li>\n<li><strong>locale</strong> : 사용자 locales 에 따라 보여지는 UI 를 테스트 하기 위해 사용한다.</li>\n<li><strong>fontScale</strong> : 기본 density 애 배율을 적용해서 폰트 사이즈를 변경할 수 있다.</li>\n<li><strong>showSystemUi</strong> : true 로 설정하면 status bar 와 action bar 를 노출한다.</li>\n<li><strong>showBackground</strong> : true 로 설정하면 기본 배경색상을 적용해준다.</li>\n<li><strong>backgroundColor</strong> : 미리보기의 배경색을 설정할 수 있으며, showBackground 설정에 따라 노출 유무를 결정한다.</li>\n<li><strong>uiMode</strong> : uiMode 를 설정한다.</li>\n<li><strong>device</strong> : 기존 정의된 디바이스를 프리뷰에 적용한다. Devices object 에 정의된 값을 선택해서 사용할 수 있습니다. (Devices.NEXUS_9)</li>\n</ul>\n<h3 id=\"Compose의-레이아웃-구성\"><a href=\"#Compose의-레이아웃-구성\" class=\"headerlink\" title=\"Compose의 레이아웃 구성\"></a>Compose의 레이아웃 구성</h3><ul>\n<li><strong>Column</strong> : 아이템을 세로로 배치한다.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ComposeColumn</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Column &#123;</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;My First Compose&quot;</span>)</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;My First Compose&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_bSyX8yT7H2HevBNw9fbyYw.png\" class=\"\" title=\"[1_bSyX8yT7H2HevBNw9fbyYw]\">\n\n<ul>\n<li><strong>Row</strong> : 아이템을 가로로 배치한다.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ComposeRow</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Row &#123;</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;My First Compose&quot;</span>)</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;My First Compose&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_T9Pww7JyPMPhCJ_6yU8fyQ.png\" class=\"\" title=\"[1_T9Pww7JyPMPhCJ_6yU8fyQ]\">\n\n<ul>\n<li><strong>Box</strong> : 구성 요소를 다른 구성 요소 위에 배치한다.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ComposeBox</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Box &#123;</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;My First Compose 1&quot;</span>)</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;My First Compose 2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_wFM4jF71V5aJog3lALaRKQ.png\" class=\"\" title=\"[1_wFM4jF71V5aJog3lALaRKQ]\">\n\n<ul>\n<li><strong>Modifier</strong> : 구성 요소의 크기, 마진등을 변경하거나 클릭이나 스크롤 등의 이벤트를 제어할 수 있도록 한다.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ComposeModifier</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Box(modifier = Modifier</span><br><span class=\"line\">        .padding(<span class=\"number\">5.</span>dp)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;Compose Modifier&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_tPAf-Akf2IpDRrrZo1f1dg.png\" class=\"\" title=\"[1_tPAf-Akf2IpDRrrZo1f1dg]\">\n\n<ul>\n<li><strong>LazyColumn / LazyRow</strong> : Recyclerview 유사하게 화면에 보여지는 구성 요소만을 렌더링한다. 큰 데이터셋을 다루기에 용이하다.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ComposeLazyColumn</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> itemsList = (<span class=\"number\">0.</span><span class=\"number\">.100</span>).toList()</span><br><span class=\"line\"></span><br><span class=\"line\">    LazyColumn &#123;</span><br><span class=\"line\">        items(items = itemsList, itemContent = &#123; item -&gt;</span><br><span class=\"line\">            Text(text = <span class=\"string\">&quot;Item : <span class=\"variable\">$item</span>&quot;</span>, style = TextStyle(fontSize = <span class=\"number\">80.</span>sp))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_m7mSalYCza-SoJjmlYeWdA.png\" class=\"\" title=\"[1_m7mSalYCza-SoJjmlYeWdA]\">\n\n<ul>\n<li><strong>ConstraintLayout</strong> : 기존 ContraintLayout 과 같이 여러 제약 참조를 설정해서 사용할 수 있다.<br><code>createRefs</code> / <code>createRefFor</code> 를 통해 참조를 생성하며, constrainAs 를 통해 제약 조건을 설정한다.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ComposeConstraintLayout</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    ConstraintLayout(modifier = Modifier.size(<span class=\"number\">100.</span>dp, <span class=\"number\">200.</span>dp)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> (text1, image, text3) = createRefs()</span><br><span class=\"line\"></span><br><span class=\"line\">        Text(<span class=\"string\">&quot;Text Item 1&quot;</span>, Modifier.constrainAs(text1) &#123;</span><br><span class=\"line\">            top.linkTo(parent.top)</span><br><span class=\"line\">            start.linkTo(parent.start)</span><br><span class=\"line\">            end.linkTo(parent.end)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        Image(</span><br><span class=\"line\">            painterResource(R.drawable.ic_launcher_foreground),</span><br><span class=\"line\">            contentDescription = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">            contentScale = ContentScale.Crop,</span><br><span class=\"line\">            modifier = Modifier.fillMaxSize().constrainAs(image) &#123;</span><br><span class=\"line\">                top.linkTo(text1.bottom)</span><br><span class=\"line\">                bottom.linkTo(text3.top)</span><br><span class=\"line\">                start.linkTo(parent.start)</span><br><span class=\"line\">                end.linkTo(parent.end)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        Text(<span class=\"string\">&quot;Text Item 3&quot;</span>, Modifier.constrainAs(text3) &#123;</span><br><span class=\"line\">            bottom.linkTo(parent.bottom)</span><br><span class=\"line\">            start.linkTo(parent.start)</span><br><span class=\"line\">            end.linkTo(parent.end)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Jetpack Compose 의 ConstraintLayout 을 사용하기 위해서는 아래 의존성을 추가해야 한다.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">&quot;androidx.constraintlayout:constraintlayout-compose:1.0.0-alpha05&quot;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_UoLVl1dbUjKh9kd4uY0ROA.png\" class=\"\" title=\"[1_UoLVl1dbUjKh9kd4uY0ROA]\">\n\n<h3 id=\"Jetpack-Compose의-동작-원리-파악을-위한-빌드-과정-추적\"><a href=\"#Jetpack-Compose의-동작-원리-파악을-위한-빌드-과정-추적\" class=\"headerlink\" title=\"Jetpack Compose의 동작 원리 파악을 위한 빌드 과정 추적\"></a>Jetpack Compose의 동작 원리 파악을 위한 빌드 과정 추적</h3><h5 id=\"1-프로젝트-생성\"><a href=\"#1-프로젝트-생성\" class=\"headerlink\" title=\"1. 프로젝트 생성\"></a>1. 프로젝트 생성</h5><p>Compose가 내부적으로 어떻게 동작하는 지 알아보기 위해 먼저 프로젝트를 빌드해보자.</p>\n<p>빌드 후 Kotlin &gt; Byte Code &gt; Decompiled Java 순서로 변환하여 살펴볼 것이다.</p>\n<p>Android Studio Preview에서 Empty Compose Activity로 프로젝트를 생성하면 아래와 같은 샘플 코드를 얻을 수 있다.</p>\n<p>프로젝트 생성 후 임의로 Hello World로 파라미터값을 변경하였다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">ComponentActivity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContent &#123;</span><br><span class=\"line\">            HelloWorldTheme &#123;</span><br><span class=\"line\">                <span class=\"comment\">// A surface container using the &#x27;background&#x27; color from the theme</span></span><br><span class=\"line\">                Surface(color = MaterialTheme.colors.background) &#123;</span><br><span class=\"line\">                    Greeting(<span class=\"string\">&quot;World&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Greeting</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    Text(text = <span class=\"string\">&quot;Hello <span class=\"variable\">$name</span>!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Preview(showBackground = true)</span></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">DefaultPreview</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    HelloWorldTheme &#123;</span><br><span class=\"line\">        Greeting(<span class=\"string\">&quot;World&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>부가적으로 <code>src</code> 폴더 내부에 <code>ui.theme</code> 패키지가 생성되고 <code>Color.kt</code>, <code>Shape.kt</code>, <code>Theme.kt</code>, <code>Type.kt</code> 파일도 생성된다.</p>\n<p>이 파일들은 필요한 경우 들여다 보도록 하자.</p>\n<p>생성 후 Preview에 아래와 같이 렌더링 된다.</p>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/add_002_001.png\" class=\"\" title=\"[add_002_001]\">\n\n<h5 id=\"2-MainActivity-디컴파일\"><a href=\"#2-MainActivity-디컴파일\" class=\"headerlink\" title=\"2. MainActivity 디컴파일\"></a>2. MainActivity 디컴파일</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Metadata(</span></span><br><span class=\"line\"><span class=\"meta\">   mv = &#123;1, 4, 2&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">   bv = &#123;1, 0, 3&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">   k = 2,</span></span><br><span class=\"line\"><span class=\"meta\">   d1 = &#123;&quot;\\u0000\\u0010\\n\\u0000\\n\\u0002\\u0010\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\u001a\\b\\u0010\\u0000\\u001a\\u00020\\u0001H\\u0007\\u001a\\u0010\\u0010\\u0002\\u001a\\u00020\\u00012\\u0006\\u0010\\u0003\\u001a\\u00020\\u0004H\\u0007¨\\u0006\\u0005&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">   d2 = &#123;&quot;DefaultPreview&quot;, &quot;&quot;, &quot;Greeting&quot;, &quot;name&quot;, &quot;&quot;, &quot;app_debug&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivityKt</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Composable</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">Greeting</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> String name)</span> </span>&#123;</span><br><span class=\"line\">      Intrinsics.checkNotNullParameter(name, <span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">      TextKt.Text-Vh6c2nE$<span class=\"keyword\">default</span>(<span class=\"string\">&quot;Hello &quot;</span> + name + <span class=\"string\">&#x27;!&#x27;</span>, (Modifier)<span class=\"keyword\">null</span>, <span class=\"number\">0L</span>, <span class=\"number\">0L</span>, (FontStyle)<span class=\"keyword\">null</span>, (FontWeight)<span class=\"keyword\">null</span>, (FontFamily)<span class=\"keyword\">null</span>, <span class=\"number\">0L</span>, (TextDecoration)<span class=\"keyword\">null</span>, (TextAlign)<span class=\"keyword\">null</span>, <span class=\"number\">0L</span>, (TextOverflow)<span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"number\">0</span>, (Function1)<span class=\"keyword\">null</span>, (TextStyle)<span class=\"keyword\">null</span>, <span class=\"number\">65534</span>, (Object)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Composable</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">DefaultPreview</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ThemeKt.HelloWorldTheme$<span class=\"keyword\">default</span>(<span class=\"keyword\">false</span>, (Function0)<span class=\"keyword\">null</span>.INSTANCE, <span class=\"number\">1</span>, (Object)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MainActivity.java</span></span><br><span class=\"line\"><span class=\"meta\">@Metadata(</span></span><br><span class=\"line\"><span class=\"meta\">   mv = &#123;1, 4, 2&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">   bv = &#123;1, 0, 3&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">   k = 1,</span></span><br><span class=\"line\"><span class=\"meta\">   d1 = &#123;&quot;\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u0002\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0000\\u0018\\u00002\\u00020\\u0001B\\u0005¢\\u0006\\u0002\\u0010\\u0002J\\u0012\\u0010\\u0003\\u001a\\u00020\\u00042\\b\\u0010\\u0005\\u001a\\u0004\\u0018\\u00010\\u0006H\\u0014¨\\u0006\\u0007&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">   d2 = &#123;&quot;Lcom/example/helloworld/MainActivity;&quot;, &quot;Landroidx/activity/ComponentActivity;&quot;, &quot;()V&quot;, &quot;onCreate&quot;, &quot;&quot;, &quot;savedInstanceState&quot;, &quot;Landroid/os/Bundle;&quot;, &quot;app_debug&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">ComponentActivity</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">      ComponentActivityKt.setContent$<span class=\"keyword\">default</span>(<span class=\"keyword\">this</span>, (CompositionContext)<span class=\"keyword\">null</span>, (Function0)<span class=\"keyword\">null</span>.INSTANCE, <span class=\"number\">1</span>, (Object)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ComponentActivityKt.setContent()</code>의 구현체는 아래와 같다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> ComponentActivity.<span class=\"title\">setContent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    parent: <span class=\"type\">CompositionContext</span>? = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    content: @<span class=\"type\">Composable</span> () -&gt; <span class=\"type\">Unit</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> existingComposeView = window.decorView</span><br><span class=\"line\">        .findViewById&lt;ViewGroup&gt;(android.R.id.content)</span><br><span class=\"line\">        .getChildAt(<span class=\"number\">0</span>) <span class=\"keyword\">as</span>? ComposeView</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existingComposeView != <span class=\"literal\">null</span>) with(existingComposeView) &#123;</span><br><span class=\"line\">        setParentCompositionContext(parent)</span><br><span class=\"line\">        setContent(content)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> ComposeView(<span class=\"keyword\">this</span>).apply &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Set content and parent **before** setContentView</span></span><br><span class=\"line\">        <span class=\"comment\">// to have ComposeView create the composition on attach</span></span><br><span class=\"line\">        setParentCompositionContext(parent)</span><br><span class=\"line\">        setContent(content)</span><br><span class=\"line\">        setContentView(<span class=\"keyword\">this</span>, DefaultActivityContentLayoutParams)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>CompositionContext</code> 파라미터는 null을 그대로 넘겨주었고, <code>(Function0)null.INSTANCE, 1, (Object)null</code>의 값으로 무언가를 넘겨주는데,</p>\n<p>이 값이 <code>@Composable</code> Annotation의 구현체이다.</p>\n<p>위의 코드 흔적을 술어로 표현해보면 <strong><code>@Composable</code> 구현체를 넘겨주면 이를 기반으로 <code>ComposeView</code> 객체를 생성하여 <code>Activity</code>의 <code>setContentView()</code>에 적용한다.</strong> 가 되겠다.</p>\n<h5 id=\"3-Composable-구현체-확인\"><a href=\"#3-Composable-구현체-확인\" class=\"headerlink\" title=\"3. @Composable 구현체 확인\"></a>3. <code>@Composable</code> 구현체 확인</h5><p><code>Composable</code> Annotaion 클래스의 구현체는 아래와 같다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MustBeDocumented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(AnnotationRetention.BINARY)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(</span></span><br><span class=\"line\"><span class=\"meta\">    // function declarations</span></span><br><span class=\"line\"><span class=\"meta\">    // @Composable fun Foo()</span> &#123; ... &#125;</span><br><span class=\"line\">    <span class=\"comment\">// lambda expressions</span></span><br><span class=\"line\">    <span class=\"comment\">// val foo = @Composable &#123; ... &#125;</span></span><br><span class=\"line\">    AnnotationTarget.FUNCTION,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// type declarations</span></span><br><span class=\"line\">    <span class=\"comment\">// var foo: @Composable () -&gt; Unit = &#123; ... &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// parameter types</span></span><br><span class=\"line\">    <span class=\"comment\">// foo: @Composable () -&gt; Unit</span></span><br><span class=\"line\">    AnnotationTarget.TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// composable types inside of type signatures</span></span><br><span class=\"line\">    <span class=\"comment\">// foo: (@Composable () -&gt; Unit) -&gt; Unit</span></span><br><span class=\"line\">    AnnotationTarget.TYPE_PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// composable property getters and setters</span></span><br><span class=\"line\">    <span class=\"comment\">// val foo: Int @Composable get() &#123; ... &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// var bar: Int</span></span><br><span class=\"line\">    <span class=\"comment\">//   @Composable get() &#123; ... &#125;</span></span><br><span class=\"line\">    AnnotationTarget.PROPERTY_GETTER</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">annotation</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Composable</span></span></span><br></pre></td></tr></table></figure>\n\n<p>AnnotationTarget을 통해 메서드나 Lambda 객체를 넘겨서 뷰를 조립하는 방식인데, <code>View</code>와 <code>ViewGroup</code>처럼 내부적으로 트리 구조로 실행지점에 대한 정보를 저장하고 있다.</p>\n<p>파면 팔수록 Flutter의 Widget, React Native의 Component와 유사한 느낌을 준다.</p>\n","site":{"data":{}},"excerpt":"<article class=\"message message-immersive is-primary\">\n    <div class=\"message-body\">\n        <i class=\"fas fa-pen-fancy mr-2\"></i>Writers<br>\n        by 김남훈 @Naver<br>\n        by 배희성 @RocketPunch<br>\n        by 송시영 @SmartStudy<br>\n        by 이기정 @BankSalad\n    </div>\n</article>","more":"<h2 id=\"Android-Studio의-Jetpack-Compose\"><a href=\"#Android-Studio의-Jetpack-Compose\" class=\"headerlink\" title=\"Android Studio의 Jetpack Compose\"></a>Android Studio의 Jetpack Compose</h2><p>Android Studio Preview를 사용해 Compose를 사용하다보면 Preview라 코드레벨에서 활성화되는 것을 알 수 있다.</p>\n<p>좀 더 자세히 살펴보자.</p>\n<h3 id=\"Preview의-기능들\"><a href=\"#Preview의-기능들\" class=\"headerlink\" title=\"Preview의 기능들\"></a>Preview의 기능들</h3><p>Preview 와 Compose 를 사용해서 아래와 같이 구성할 수 있다.</p>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_ybDWG4W2bPYNq79vr1gE8w.png\" class=\"\" title=\"[1_ybDWG4W2bPYNq79vr1gE8w]\">\n\n<p>Split(design/code) 을 선택에 따라 코드 및 디자인의 패널을 변경할 수도 있다.</p>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_XVvr-CB2pn88Te7Gg52GPA.png\" class=\"\" title=\"[1_XVvr-CB2pn88Te7Gg52GPA]\">\n\n<p>미리보기에서 인터렉티브 모드를 설정할 수 있다. </p>\n<p>인터렉티브 모드를 설정하면 실제 디바이스처럼  클릭이나 드래그 등의 상호 작용을 확인해 볼 수 있다.</p>\n<p>다만, 네트워크나 파일에 접근 또는 일부 Context API 는 인터렉티브 모드를 지원하지 않고 있다.</p>\n<blockquote>\n<p>간헐적으로 interactive 모드가 작동하지 않는 경우가 있다.</p>\n</blockquote>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_9IA2k2s5hAS9pSyzpmQ6Pw.png\" class=\"\" title=\"[1_9IA2k2s5hAS9pSyzpmQ6Pw]\">\n\n<p>미리보기에서 직접 디바이스 혹은 에뮬레이터로 배포하여 결과를 확인할 수도 있다.</p>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_5RZOM7sWV0sXctJtTPdshQ.png\" class=\"\" title=\"[1_5RZOM7sWV0sXctJtTPdshQ]\">\n\n\n<h3 id=\"Preview-Annotation-분석\"><a href=\"#Preview-Annotation-분석\" class=\"headerlink\" title=\"@Preview Annotation 분석\"></a><code>@Preview</code> Annotation 분석</h3><p>위에서 언급했다시피 <code>@Preview</code>를 사용하면 디바이스나 에뮬레이터를 실행하지 않고 실시간으로 Compose UI 를 볼 수 있다.</p>\n<p><code>@Preview</code>를는 아래와 같이 구성되어 있으며 설정에 따라서 미리보기를 다양하게 구성할 수 있다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">annotation</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Preview</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: String = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> group: String = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"meta\">@IntRange(from = 1)</span> <span class=\"keyword\">val</span> apiLevel: <span class=\"built_in\">Int</span> = -<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"comment\">// TODO(mount): Make this Dp when they are inline classes</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> widthDp: <span class=\"built_in\">Int</span> = -<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"comment\">// TODO(mount): Make this Dp when they are inline classes</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> heightDp: <span class=\"built_in\">Int</span> = -<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> locale: String = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"meta\">@FloatRange(from = 0.01)</span> <span class=\"keyword\">val</span> fontScale: <span class=\"built_in\">Float</span> = <span class=\"number\">1f</span>,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> showSystemUi: <span class=\"built_in\">Boolean</span> = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> showBackground: <span class=\"built_in\">Boolean</span> = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> backgroundColor: <span class=\"built_in\">Long</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"meta\">@UiMode</span> <span class=\"keyword\">val</span> uiMode: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"meta\">@Device</span> <span class=\"keyword\">val</span> device: String = Devices.DEFAULT</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>name</strong> : Preview 의 이름을 지정하며, 기본 값은 function 이름으로 설정된다.</li>\n<li><strong>group</strong> : Preview 의 그룹을 지정한다, 기본 값은 function 이름으로 설정된다.</li>\n<li><strong>apiLevel</strong> : api level 설정에 따라 Composable 을 렌더링해준다.</li>\n<li><strong>widthDp</strong> : Preview 의 너비를 설정한다. (기본 단위는 dp)</li>\n<li><strong>heightDp</strong> : Preview 의 높이를 설정한다. (기본 단위는 dp)</li>\n<li><strong>locale</strong> : 사용자 locales 에 따라 보여지는 UI 를 테스트 하기 위해 사용한다.</li>\n<li><strong>fontScale</strong> : 기본 density 애 배율을 적용해서 폰트 사이즈를 변경할 수 있다.</li>\n<li><strong>showSystemUi</strong> : true 로 설정하면 status bar 와 action bar 를 노출한다.</li>\n<li><strong>showBackground</strong> : true 로 설정하면 기본 배경색상을 적용해준다.</li>\n<li><strong>backgroundColor</strong> : 미리보기의 배경색을 설정할 수 있으며, showBackground 설정에 따라 노출 유무를 결정한다.</li>\n<li><strong>uiMode</strong> : uiMode 를 설정한다.</li>\n<li><strong>device</strong> : 기존 정의된 디바이스를 프리뷰에 적용한다. Devices object 에 정의된 값을 선택해서 사용할 수 있습니다. (Devices.NEXUS_9)</li>\n</ul>\n<h3 id=\"Compose의-레이아웃-구성\"><a href=\"#Compose의-레이아웃-구성\" class=\"headerlink\" title=\"Compose의 레이아웃 구성\"></a>Compose의 레이아웃 구성</h3><ul>\n<li><strong>Column</strong> : 아이템을 세로로 배치한다.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ComposeColumn</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Column &#123;</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;My First Compose&quot;</span>)</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;My First Compose&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_bSyX8yT7H2HevBNw9fbyYw.png\" class=\"\" title=\"[1_bSyX8yT7H2HevBNw9fbyYw]\">\n\n<ul>\n<li><strong>Row</strong> : 아이템을 가로로 배치한다.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ComposeRow</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Row &#123;</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;My First Compose&quot;</span>)</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;My First Compose&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_T9Pww7JyPMPhCJ_6yU8fyQ.png\" class=\"\" title=\"[1_T9Pww7JyPMPhCJ_6yU8fyQ]\">\n\n<ul>\n<li><strong>Box</strong> : 구성 요소를 다른 구성 요소 위에 배치한다.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ComposeBox</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Box &#123;</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;My First Compose 1&quot;</span>)</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;My First Compose 2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_wFM4jF71V5aJog3lALaRKQ.png\" class=\"\" title=\"[1_wFM4jF71V5aJog3lALaRKQ]\">\n\n<ul>\n<li><strong>Modifier</strong> : 구성 요소의 크기, 마진등을 변경하거나 클릭이나 스크롤 등의 이벤트를 제어할 수 있도록 한다.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ComposeModifier</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Box(modifier = Modifier</span><br><span class=\"line\">        .padding(<span class=\"number\">5.</span>dp)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        Text(text = <span class=\"string\">&quot;Compose Modifier&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_tPAf-Akf2IpDRrrZo1f1dg.png\" class=\"\" title=\"[1_tPAf-Akf2IpDRrrZo1f1dg]\">\n\n<ul>\n<li><strong>LazyColumn / LazyRow</strong> : Recyclerview 유사하게 화면에 보여지는 구성 요소만을 렌더링한다. 큰 데이터셋을 다루기에 용이하다.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ComposeLazyColumn</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> itemsList = (<span class=\"number\">0.</span><span class=\"number\">.100</span>).toList()</span><br><span class=\"line\"></span><br><span class=\"line\">    LazyColumn &#123;</span><br><span class=\"line\">        items(items = itemsList, itemContent = &#123; item -&gt;</span><br><span class=\"line\">            Text(text = <span class=\"string\">&quot;Item : <span class=\"variable\">$item</span>&quot;</span>, style = TextStyle(fontSize = <span class=\"number\">80.</span>sp))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_m7mSalYCza-SoJjmlYeWdA.png\" class=\"\" title=\"[1_m7mSalYCza-SoJjmlYeWdA]\">\n\n<ul>\n<li><strong>ConstraintLayout</strong> : 기존 ContraintLayout 과 같이 여러 제약 참조를 설정해서 사용할 수 있다.<br><code>createRefs</code> / <code>createRefFor</code> 를 통해 참조를 생성하며, constrainAs 를 통해 제약 조건을 설정한다.</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ComposeConstraintLayout</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    ConstraintLayout(modifier = Modifier.size(<span class=\"number\">100.</span>dp, <span class=\"number\">200.</span>dp)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> (text1, image, text3) = createRefs()</span><br><span class=\"line\"></span><br><span class=\"line\">        Text(<span class=\"string\">&quot;Text Item 1&quot;</span>, Modifier.constrainAs(text1) &#123;</span><br><span class=\"line\">            top.linkTo(parent.top)</span><br><span class=\"line\">            start.linkTo(parent.start)</span><br><span class=\"line\">            end.linkTo(parent.end)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        Image(</span><br><span class=\"line\">            painterResource(R.drawable.ic_launcher_foreground),</span><br><span class=\"line\">            contentDescription = <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">            contentScale = ContentScale.Crop,</span><br><span class=\"line\">            modifier = Modifier.fillMaxSize().constrainAs(image) &#123;</span><br><span class=\"line\">                top.linkTo(text1.bottom)</span><br><span class=\"line\">                bottom.linkTo(text3.top)</span><br><span class=\"line\">                start.linkTo(parent.start)</span><br><span class=\"line\">                end.linkTo(parent.end)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        Text(<span class=\"string\">&quot;Text Item 3&quot;</span>, Modifier.constrainAs(text3) &#123;</span><br><span class=\"line\">            bottom.linkTo(parent.bottom)</span><br><span class=\"line\">            start.linkTo(parent.start)</span><br><span class=\"line\">            end.linkTo(parent.end)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Jetpack Compose 의 ConstraintLayout 을 사용하기 위해서는 아래 의존성을 추가해야 한다.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">&quot;androidx.constraintlayout:constraintlayout-compose:1.0.0-alpha05&quot;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/1_UoLVl1dbUjKh9kd4uY0ROA.png\" class=\"\" title=\"[1_UoLVl1dbUjKh9kd4uY0ROA]\">\n\n<h3 id=\"Jetpack-Compose의-동작-원리-파악을-위한-빌드-과정-추적\"><a href=\"#Jetpack-Compose의-동작-원리-파악을-위한-빌드-과정-추적\" class=\"headerlink\" title=\"Jetpack Compose의 동작 원리 파악을 위한 빌드 과정 추적\"></a>Jetpack Compose의 동작 원리 파악을 위한 빌드 과정 추적</h3><h5 id=\"1-프로젝트-생성\"><a href=\"#1-프로젝트-생성\" class=\"headerlink\" title=\"1. 프로젝트 생성\"></a>1. 프로젝트 생성</h5><p>Compose가 내부적으로 어떻게 동작하는 지 알아보기 위해 먼저 프로젝트를 빌드해보자.</p>\n<p>빌드 후 Kotlin &gt; Byte Code &gt; Decompiled Java 순서로 변환하여 살펴볼 것이다.</p>\n<p>Android Studio Preview에서 Empty Compose Activity로 프로젝트를 생성하면 아래와 같은 샘플 코드를 얻을 수 있다.</p>\n<p>프로젝트 생성 후 임의로 Hello World로 파라미터값을 변경하였다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">ComponentActivity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContent &#123;</span><br><span class=\"line\">            HelloWorldTheme &#123;</span><br><span class=\"line\">                <span class=\"comment\">// A surface container using the &#x27;background&#x27; color from the theme</span></span><br><span class=\"line\">                Surface(color = MaterialTheme.colors.background) &#123;</span><br><span class=\"line\">                    Greeting(<span class=\"string\">&quot;World&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Greeting</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    Text(text = <span class=\"string\">&quot;Hello <span class=\"variable\">$name</span>!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Preview(showBackground = true)</span></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">DefaultPreview</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    HelloWorldTheme &#123;</span><br><span class=\"line\">        Greeting(<span class=\"string\">&quot;World&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>부가적으로 <code>src</code> 폴더 내부에 <code>ui.theme</code> 패키지가 생성되고 <code>Color.kt</code>, <code>Shape.kt</code>, <code>Theme.kt</code>, <code>Type.kt</code> 파일도 생성된다.</p>\n<p>이 파일들은 필요한 경우 들여다 보도록 하자.</p>\n<p>생성 후 Preview에 아래와 같이 렌더링 된다.</p>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%202/add_002_001.png\" class=\"\" title=\"[add_002_001]\">\n\n<h5 id=\"2-MainActivity-디컴파일\"><a href=\"#2-MainActivity-디컴파일\" class=\"headerlink\" title=\"2. MainActivity 디컴파일\"></a>2. MainActivity 디컴파일</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Metadata(</span></span><br><span class=\"line\"><span class=\"meta\">   mv = &#123;1, 4, 2&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">   bv = &#123;1, 0, 3&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">   k = 2,</span></span><br><span class=\"line\"><span class=\"meta\">   d1 = &#123;&quot;\\u0000\\u0010\\n\\u0000\\n\\u0002\\u0010\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\u001a\\b\\u0010\\u0000\\u001a\\u00020\\u0001H\\u0007\\u001a\\u0010\\u0010\\u0002\\u001a\\u00020\\u00012\\u0006\\u0010\\u0003\\u001a\\u00020\\u0004H\\u0007¨\\u0006\\u0005&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">   d2 = &#123;&quot;DefaultPreview&quot;, &quot;&quot;, &quot;Greeting&quot;, &quot;name&quot;, &quot;&quot;, &quot;app_debug&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivityKt</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Composable</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">Greeting</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> String name)</span> </span>&#123;</span><br><span class=\"line\">      Intrinsics.checkNotNullParameter(name, <span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">      TextKt.Text-Vh6c2nE$<span class=\"keyword\">default</span>(<span class=\"string\">&quot;Hello &quot;</span> + name + <span class=\"string\">&#x27;!&#x27;</span>, (Modifier)<span class=\"keyword\">null</span>, <span class=\"number\">0L</span>, <span class=\"number\">0L</span>, (FontStyle)<span class=\"keyword\">null</span>, (FontWeight)<span class=\"keyword\">null</span>, (FontFamily)<span class=\"keyword\">null</span>, <span class=\"number\">0L</span>, (TextDecoration)<span class=\"keyword\">null</span>, (TextAlign)<span class=\"keyword\">null</span>, <span class=\"number\">0L</span>, (TextOverflow)<span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"number\">0</span>, (Function1)<span class=\"keyword\">null</span>, (TextStyle)<span class=\"keyword\">null</span>, <span class=\"number\">65534</span>, (Object)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Composable</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">DefaultPreview</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      ThemeKt.HelloWorldTheme$<span class=\"keyword\">default</span>(<span class=\"keyword\">false</span>, (Function0)<span class=\"keyword\">null</span>.INSTANCE, <span class=\"number\">1</span>, (Object)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MainActivity.java</span></span><br><span class=\"line\"><span class=\"meta\">@Metadata(</span></span><br><span class=\"line\"><span class=\"meta\">   mv = &#123;1, 4, 2&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">   bv = &#123;1, 0, 3&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">   k = 1,</span></span><br><span class=\"line\"><span class=\"meta\">   d1 = &#123;&quot;\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u0002\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0000\\u0018\\u00002\\u00020\\u0001B\\u0005¢\\u0006\\u0002\\u0010\\u0002J\\u0012\\u0010\\u0003\\u001a\\u00020\\u00042\\b\\u0010\\u0005\\u001a\\u0004\\u0018\\u00010\\u0006H\\u0014¨\\u0006\\u0007&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">   d2 = &#123;&quot;Lcom/example/helloworld/MainActivity;&quot;, &quot;Landroidx/activity/ComponentActivity;&quot;, &quot;()V&quot;, &quot;onCreate&quot;, &quot;&quot;, &quot;savedInstanceState&quot;, &quot;Landroid/os/Bundle;&quot;, &quot;app_debug&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">ComponentActivity</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">      ComponentActivityKt.setContent$<span class=\"keyword\">default</span>(<span class=\"keyword\">this</span>, (CompositionContext)<span class=\"keyword\">null</span>, (Function0)<span class=\"keyword\">null</span>.INSTANCE, <span class=\"number\">1</span>, (Object)<span class=\"keyword\">null</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ComponentActivityKt.setContent()</code>의 구현체는 아래와 같다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> ComponentActivity.<span class=\"title\">setContent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    parent: <span class=\"type\">CompositionContext</span>? = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    content: @<span class=\"type\">Composable</span> () -&gt; <span class=\"type\">Unit</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> existingComposeView = window.decorView</span><br><span class=\"line\">        .findViewById&lt;ViewGroup&gt;(android.R.id.content)</span><br><span class=\"line\">        .getChildAt(<span class=\"number\">0</span>) <span class=\"keyword\">as</span>? ComposeView</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existingComposeView != <span class=\"literal\">null</span>) with(existingComposeView) &#123;</span><br><span class=\"line\">        setParentCompositionContext(parent)</span><br><span class=\"line\">        setContent(content)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> ComposeView(<span class=\"keyword\">this</span>).apply &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Set content and parent **before** setContentView</span></span><br><span class=\"line\">        <span class=\"comment\">// to have ComposeView create the composition on attach</span></span><br><span class=\"line\">        setParentCompositionContext(parent)</span><br><span class=\"line\">        setContent(content)</span><br><span class=\"line\">        setContentView(<span class=\"keyword\">this</span>, DefaultActivityContentLayoutParams)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>CompositionContext</code> 파라미터는 null을 그대로 넘겨주었고, <code>(Function0)null.INSTANCE, 1, (Object)null</code>의 값으로 무언가를 넘겨주는데,</p>\n<p>이 값이 <code>@Composable</code> Annotation의 구현체이다.</p>\n<p>위의 코드 흔적을 술어로 표현해보면 <strong><code>@Composable</code> 구현체를 넘겨주면 이를 기반으로 <code>ComposeView</code> 객체를 생성하여 <code>Activity</code>의 <code>setContentView()</code>에 적용한다.</strong> 가 되겠다.</p>\n<h5 id=\"3-Composable-구현체-확인\"><a href=\"#3-Composable-구현체-확인\" class=\"headerlink\" title=\"3. @Composable 구현체 확인\"></a>3. <code>@Composable</code> 구현체 확인</h5><p><code>Composable</code> Annotaion 클래스의 구현체는 아래와 같다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MustBeDocumented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(AnnotationRetention.BINARY)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(</span></span><br><span class=\"line\"><span class=\"meta\">    // function declarations</span></span><br><span class=\"line\"><span class=\"meta\">    // @Composable fun Foo()</span> &#123; ... &#125;</span><br><span class=\"line\">    <span class=\"comment\">// lambda expressions</span></span><br><span class=\"line\">    <span class=\"comment\">// val foo = @Composable &#123; ... &#125;</span></span><br><span class=\"line\">    AnnotationTarget.FUNCTION,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// type declarations</span></span><br><span class=\"line\">    <span class=\"comment\">// var foo: @Composable () -&gt; Unit = &#123; ... &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// parameter types</span></span><br><span class=\"line\">    <span class=\"comment\">// foo: @Composable () -&gt; Unit</span></span><br><span class=\"line\">    AnnotationTarget.TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// composable types inside of type signatures</span></span><br><span class=\"line\">    <span class=\"comment\">// foo: (@Composable () -&gt; Unit) -&gt; Unit</span></span><br><span class=\"line\">    AnnotationTarget.TYPE_PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// composable property getters and setters</span></span><br><span class=\"line\">    <span class=\"comment\">// val foo: Int @Composable get() &#123; ... &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// var bar: Int</span></span><br><span class=\"line\">    <span class=\"comment\">//   @Composable get() &#123; ... &#125;</span></span><br><span class=\"line\">    AnnotationTarget.PROPERTY_GETTER</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">annotation</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Composable</span></span></span><br></pre></td></tr></table></figure>\n\n<p>AnnotationTarget을 통해 메서드나 Lambda 객체를 넘겨서 뷰를 조립하는 방식인데, <code>View</code>와 <code>ViewGroup</code>처럼 내부적으로 트리 구조로 실행지점에 대한 정보를 저장하고 있다.</p>\n<p>파면 팔수록 Flutter의 Widget, React Native의 Component와 유사한 느낌을 준다.</p>"},{"title":"Jetpack Compose Part 1 - Compose 소개 및 코드랩 따라하기","date":"2021-04-06T16:00:00.000Z","cover":"https://androiddeepdive.github.io/Team-Blog/images/cover_jepack_compose.png","_content":"\n<article class=\"message message-immersive is-primary\">\n    <div class=\"message-body\">\n        <i class=\"fas fa-pen-fancy mr-2\"></i>Writers<br>\n        by 김남훈 @Naver<br>\n        by 배희성 @RocketPunch<br>\n        by 송시영 @SmartStudy<br>\n        by 이기정 @BankSalad\n    </div>\n</article>\n\n<!-- more -->\n\n## Jetpack Compose란 무엇인가?\n\n{% asset_img compose_animation.gif [compose_animation] %}\n\n> **출처** [Android Developers#Jetpack Compse](https://developer.android.com/jetpack/compose)\n\nCompose는 Native UI를 코드레벨로 구현할 수 있는 최신 툴킷이다. \n\n기존의 뷰를 업데이트하는 방식과 달리 Compose를 사용하면 필요한 영역의 뷰를 다시 그려주는 방식으로 작업할 수 있다.\n\n아래는 아주 간단한 예제이다.\n\n```kotlin\n@Composable\nfun Greeting(name: String) {\n\tText(\"Hello $name\")\n}\n```\n\n위의 예제처럼 UI를 구성하는 것이 아니라 화면을 구성하는 뷰의 State 설명하는 것이므로 아무것도 반환하지 않는다.\n\n아래는 공식 서비스 소개 영상이다.\n\n{% youtube U5BwfqBpiWU %}\n\n### Compose의 4가지 특징\n\n구글에서 설명하는 Compose를 이용시 얻을 수 있는 장점은 아래와 같다.\n\n- `Less Code` - 코드 감소\n  - 적은 수의 코드로 더 많은 작업을 하고 전체 버그 클래스를 방지할 수 있으므로 코드가 간단하며 유지 관리하기 쉽습니다.\n- `Intuitive` - 직관적\n  - UI만 설명하면 나머지는 Compose에서 처리합니다. 앱 상태가 변경되면 UI가 자동으로 업데이트됩니다.\n- `Accelerate Development` - 빠른 개발 과정\n  - 기존의 모든 코드와 호환되므로 언제 어디서든 원하는 대로 사용할 수 있습니다. 실시간 미리보기 및 완전한 Android 스튜디오 지원으로 빠르게 반복할 수 있습니다.\n- `Powerful` - 강력한 성능\n  - Android 플랫폼 API에 직접 액세스하고 머티리얼 디자인, 어두운 테마, 애니메이션 등을 기본적으로 지원하는 멋진 앱을 만들 수 있습니다.\n\n늘 그렇듯 구글에서 말하는 설명만 보면 안 쓸 이유가 없어보이고, 대세가 된다면 Android 개발자에게 또 하나의 러닝커브로 작용할 것이다.\n\n## Codelab - Jetpack Compose basics\n\n### 1. 시작하기전에\n\nCompose는 아직 정식으로 릴리즈되지 않은 기능이므로 Android Studio Canary에서 프로젝트를 구성하며 몇 가지 제한사항이 존재한다.\n\n1. Android Studio Canary \n\nCanary는 아래 링크에서 다운 받을 수 있다.\n\n> [Android Studio Preview](https://developer.android.com/studio/preview)\n\n2. 최신 버전의 Kotlin plugin \n\n```groovy\next.kotlin_version = '1.4.31'\n```\n\n3. buildFeatures 및 composeOption 활성화\n\n```groovy\nandroid {\n    ...\n    buildFeatures {\n        compose true\n    }\n    composeOptions {\n        kotlinCompilerExtensionVersion 1.0.0-beta02\n    }\n}\n\ndependencies {\n    ...\n    implementation \"androidx.compose.ui:ui:1.0.0-beta02\"\n    implementation \"androidx.activity:activity-compose:1.3.0-alpha03\"\n    implementation \"androidx.compose.material:material:1.0.0-beta02\"\n    implementation \"androidx.compose.ui:ui-tooling:1.0.0-beta02\"\n    ...\n}\n```\n\n### 2. Empty Compose 프로젝트 생성\n\n[File] - [New] - [New Project…] 를 눌러 새로운 프로젝트를 선택하고(Preview) Empty Compose Activity 를 선택한다.\n\n{% asset_img 1_5gfrQWfxyEC7Oq6b2xlJ9w.png [1_5gfrQWfxyEC7Oq6b2xlJ9w] %}\n\n선택 이후 Next를 클릭하고, Compose를 구현할 수 있는 최소 API 레벨인 21을 선택해야한다.\n\n프로젝트를 생성하면 아래와 같이 app/build.gradle에 의존성 설정 및 추가가 되어 있는것을 알 수 있다.\n\n```groovy\nandroid {\n    ...\n    kotlinOptions {\n        jvmTarget = '1.8'\n        useIR = true\n    }\n    buildFeatures {\n        compose true\n    }\n    composeOptions {\n        kotlinCompilerExtensionVersion compose_version\n    }\n}\n\ndependencies {\n    ...\n    implementation \"androidx.compose.ui:ui:$compose_version\"\n    implementation \"androidx.activity:activity-compose:1.3.0-alpha03\"\n    implementation \"androidx.compose.material:material:$compose_version\"\n    implementation \"androidx.compose.ui:ui-tooling:$compose_version\"\n    ...\n}\n```\n\n이때 composeOptions 설정에서 kotlinCompilerVersion 에 따라 compose 가 다르게 동작할 수 있음을 유의하자.\n\n프로젝트를 생성하면 아래와 같은 기본 파일들이 생성된다.\n\n**MainActivity.kt**\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyFirstComposeApplicationTheme {\n                // A surface container using the 'background' color from the theme\n                Surface(color = MaterialTheme.colors.background) {\n                    Greeting(\"Android\")\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun Greeting(name: String) {\n    Text(text = \"Hello $name!\")\n}\n\n@Preview(showBackground = true)\n@Composable\nfun DefaultPreview() {\n    MyFirstComposeApplicationTheme {\n        Greeting(\"Android\")\n    }\n}\n```\n\n**ui/theme/Theme.kt**\n```kotlin\nprivate val DarkColorPalette = darkColors(\n    primary = Purple200,\n    primaryVariant = Purple700,\n    secondary = Teal200\n)\n\nprivate val LightColorPalette = lightColors(\n    primary = Purple500,\n    primaryVariant = Purple700,\n    secondary = Teal200*\n\n    /* Other default colors to override\n    background = Color.White,\n    surface = Color.White,\n    onPrimary = Color.White,\n    onSecondary = Color.Black,\n    onBackground = Color.Black,\n    onSurface = Color.Black,\n    */\n)\n\n@Composable\nfun MyFirstComposeApplicationTheme(darkTheme: Boolean = isSystemInDarkTheme(), content: @Composable () -> Unit) {\n    val colors = if (darkTheme) {\n        DarkColorPalette*\n    } else {\n        LightColorPalette*\n    }\n\n    MaterialTheme(\n        colors = colors,\n        typography = Typography,\n        shapes = Shapes,\n        content = content\n    )\n}\n```\n\n기본 생성된 코드를 보았을 때, Compose는 총 3가지의 구성 요소를 가지는 것으로 추측할 수 있다.\n\n1. 위젯을 포함하는 Composable 함수\n2. Preview를 하기 위한 Preview Composable 함수\n3. setContent 람다 표현식으로 실제 화면에 노출하는 코드\n\n일반적으로 우리가 아는 Activity의 라이프사이클 콜백 `onCreate()`에서   `setContentView(Int)` 함수를 호출하던것이 `setContent()` 함수로 바뀐것이 가장 큰 특징으로 보여진다.\n\n### 3. Composable Function\n\nComposable Function은 어노테이션을 이용한 기술이다. 함수위에 `@Composable` 어노테이션을 붙이게 되면 함수 안 다른 함수를 호출할 수 있게된다. 아래 코드를 보자.\n\n```kotlin\n@Composable\nfun Greeting(names: List<String>) {\n    for (name in names) {\n        Text(\"Hello $name\")\n    }\n}\n```\n\n단순하게 내부에는 Text라는 함수가 존재하는데, 이를 통해 UI계층 별 요구하는 컴포넌트를 생성해준다. 기본적으로 보이는 text 파라미터는 내부 속성에서 받는 일부 중 하나이다.\n\n### 4. TextView 만들기\n\n위 코드를 실행시켜보면 당연하게도 Hello로 시작하는 TextView가 화면에 그려질것을 암시한다.\n\n```kotlin\nsetContent {\n  BasicsCodelabTheme {\n    // A surface container using the 'background' color from the theme\n    Surface(color = MaterialTheme.colors.background) {\n      Greeting(\"Android\")\n    }\n  }\n}\n```\n\n{% asset_img aO6Jlsg.png [aO6Jlsg] %}\n\n### 5. `@Preview`\n\n말 그대로 어노테이션을 이용하여 IDE에서 Preview를하기 위한 용도이다. 아래 코드와 같이 @Preview 어노테이션을 추가하면 다음 결과를 볼 수 있다.\n\n```kotlin\n@Preview(\"Greeting Preview\")\n@Composable\nfun GreetingPreview() {\n    BasicsCodelabTheme {\n        Surface(color = MaterialTheme.colors.background) {\n            Greeting(\"Android\")\n        }\n    }\n}\n```\n\n{% asset_img WprDTs1.png [WprDTs1] %}\n\n### 6. setContent / Theme / Surface\n\n```kotlin\nsetContent {\n  BasicsCodelabTheme {\n    // A surface container using the 'background' color from the theme\n    Surface(color = MaterialTheme.colors.background) {\n      Greeting(\"Android\")\n    }\n  }\n}\n```\n\n기존에 onCreate시점에 화면을 그려주기 위한 필수적인 요소를 정리해보자면\n\n- **setContent** : Activity에서 setContentView함수를 사용하는 것과 동일한 동작을 하는 확장함수이다. 다만, setContent의 경우 (@Composable) -> Unit 타입의 컴포즈 UI를 구현해주어야한다.\n\n- **XXXTheme** : Theme정보를 의미한다. 해당 프로젝트에서는 Theme.kt에 여러 테마에 필요한 정보를 정리하고, 컴포즈 UI 구현을 위한 코드를 작성해두었다.\n\n```kotlin\nprivate val DarkColorPalette = darkColors(\n    primary = purple200,\n    primaryVariant = purple700,\n    secondary = teal200\n)\n\nprivate val LightColorPalette = lightColors(\n    primary = purple500,\n    primaryVariant = purple700,\n    secondary = teal200\n\n    /* Other default colors to override\n    background = Color.White,\n    surface = Color.White,\n    onPrimary = Color.White,\n    onSecondary = Color.Black,\n    onBackground = Color.Black,\n    onSurface = Color.Black,\n    */\n)\n\n@Composable\nfun BasicsCodelabTheme(\n    darkTheme: Boolean = isSystemInDarkTheme(),\n    content: @Composable () -> Unit\n) {\n    val colors = if (darkTheme) {\n        DarkColorPalette\n    } else {\n        LightColorPalette\n    }\n\n    MaterialTheme(\n        colors = colors,\n        typography = typography,\n        shapes = shapes,\n        content = content\n    )\n}\n```\n\n- **Surface** : Greeting을 감싸는 뷰에 해당한다. 여기서는 크기를 정하지 않고, background 색상을 정의하고 있다. 역시 람다 표현식이다. 색상에 대한 Paramter로 `color` 라는 값을 사용하여 부여가 가능하다. 내부코드를 보면\n\n```kotlin\n@Composable\nfun Surface(\n    modifier: Modifier = Modifier,\n    shape: Shape = RectangleShape,\n    color: Color = MaterialTheme.colors.surface,\n    contentColor: Color = contentColorFor(color),\n    border: BorderStroke? = null,\n    elevation: Dp = 0.dp,\n    content: @Composable () -> Unit\n) {\n    val elevationPx = with(LocalDensity.current) { elevation.toPx() }\n    val elevationOverlay = LocalElevationOverlay.current\n    val absoluteElevation = LocalAbsoluteElevation.current + elevation\n    val backgroundColor = if (color == MaterialTheme.colors.surface && elevationOverlay != null) {\n        elevationOverlay.apply(color, absoluteElevation)\n    } else {\n        color\n    }\n    CompositionLocalProvider(\n        LocalContentColor provides contentColor,\n        LocalAbsoluteElevation provides absoluteElevation\n    ) {\n        Box(\n            modifier.graphicsLayer(shadowElevation = elevationPx, shape = shape)\n                .then(if (border != null) Modifier.border(border, shape) else Modifier)\n                .background(\n                    color = backgroundColor,\n                    shape = shape\n                )\n                .clip(shape),\n            propagateMinConstraints = true\n        ) {\n            content()\n        }\n    }\n}\n```\n\n### 7. Declarative UI - 선언형 UI\n\n노란색 배경을 입혀 기존 TextView에 추가해보았다. 또한, Greeting에는 Modifier라는 것을 이용하여 Padding을 추가했다. 아래와 같은 결과가 나오게 되었다.\n\n```kotlin\nBasicsCodelabTheme {\n  // A surface container using the 'background' color from the theme\n  Surface(color = Color.Yellow) {\n    Greeting(\"Android\")\n  }\n}\n```\n\n```kotlin\n@Composable\nfun Greeting(name: String) {\n    var isSelected by remember { mutableStateOf(false) }\n    val backgroundColor by animateColorAsState(if (isSelected) Color.Red else Color.Transparent)\n\n    Text(\n        text = \"Hello $name!\",\n        modifier = Modifier\n            .padding(24.dp)\n            .background(color = backgroundColor)\n            .clickable(onClick = { isSelected = !isSelected })\n    )\n}\n```\n\n{% asset_img qgQ6oY4.png [qgQ6oY4] %}\n\n선언형 UI의 장점은 말 그대로 내가 UI를 정의한대로 시각적으로 표현이 가능하다는 장점이 있다. 기존에는 속성을 매번 On/Off와 같은 옵션을 통해 변경하는 것이 다반사였지만, 이제는 매번 속성에 변경이 생길때마다 새로 그려주게 되는것이다.\n\n\n### 8. 재사용\n\nCompose의 장점 중 하나는 재사용성이 뛰어난것인데, XML에서 우리가 include 태그를 통해 여러곳에서 갖다쓸 수 있던것처럼, 함수를 통해 여러곳에서 정의하여 사용이 가능하다.\n\n참고해야할 점은 Compose 컴포넌트 확장 시 `@Composable` 어노테이션을 붙여야 한다.\n\n### 9. Container 작성\n\nMyApp이라는 이름으로 컴포즈 컴포넌트를 구횬하여 여러곳에서 공통으로 사용할 수 있는 Composable을 구현하였다. 내부적으로 Container내 내가 원하는 컴포넌트를 넣어주려면 아래와 같이 인자로 `@Composable () -> Unit` 타입을 넘겨받아 처리해주면 된다.\n\n```kotlin\n@Composable\nfun MyApp(content: @Composable () -> Unit) {\n    BasicsCodelabTheme {\n        Surface(color = Color.Yellow) {\n            content()\n        }\n    }\n}\n```\n\n위 함수를 통해 이제는 어디서든 반복해서 사용할 수 있는 Container를 구현하게 되어 아래와 같이 코드를 활용할 수 있게되었다.\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContent {\n      MyApp {\n        Greeting(\"Android\")\n      }\n    }\n    ...\n  }\n```\n\n### 10. 레이아웃을 활용한 Compose function의 다중 호출\n\n지금까지는 하나의 컴포넌트만을 갖고 사용했지만, 여러개의 컴포넌트를 넣는것도 가능하다.\n\n```kotlin\n@Composable\nfun MyScreenContent() {\n    Column {\n        Greeting(\"Android\")\n        Divider(color = Color.Black)\n        Greeting(\"there\")\n    }\n}\n```\n\n `Column`과 위에서부터 사용하던 `Greeting` 함수를 사용하고, 라인을 그어주기 위한 `Divider`를 추가한 결과물은 다음과 같다.\n\n{% asset_img VLTxB8C.png [VLTxB8C] %}\n\n위 컴포넌트 중 못보던 컴포저블이 있는데, 아래와 같이 설명이 가능하다.\n\n- Column : 항목을 순서대로 배치하기 위해 사용한다.\n- Divider : 선 긋기 가능한 Compose 함수이다.\n\n이를 리스트 형태로도 구현이 가능하다.\n\n```kotlin\n@Composable\nfun MyColumnScreen(names: List<String> = listOf(\"Line One\", \"Line Two\")) {\n    Column {\n        names.forEach {\n            Greeting(name = it)\n            Divider(color = Color.Black)\n        }\n    }\n}\n```\n\n### 11. State in Compose - Compose에서의 상태값 관리\n\n\n컴포넌트에 버튼을 클릭했을 때 클릭한 카운트를 집계하는 간단한 컴포넌트를 만들어보았다.\n\n```kotlin\n@Composable\nfun MyColumnScreen(names: List<String> = listOf(\"Line One\", \"Line Two\")) {\n    val counterState = remember { mutableStateOf(0) } // \n\n    Column {\n        names.forEach {\n            Greeting(name = it)\n            Divider(color = Color.Black)\n        }\n        Counter(\n            count = counterState.value,\n            updateCount = { newCount ->\n                counterState.value = newCount\n            }\n        )\n    }\n}\n```\n\nremember라는 함수를 사용하여 기존에 존재하는 컴포넌트의 상태값을 기억하게 하는 함수가 있다. \n\n`remember` 함수의 내부를 살펴보자.\n\n```kotlin\n/**\n * Remember the value produced by [calculation]. [calculation] will only be evaluated during the composition.\n * Recomposition will always return the value produced by composition.\n */\n@OptIn(ComposeCompilerApi::class)\n@Composable\ninline fun <T> remember(calculation: @DisallowComposableCalls () -> T): T =\n    currentComposer.cache(false, calculation)\n```\n\n매 호출마다 Recomposition(재조합)하게되는 경우 컴포넌트에 값을 다시 제공하는 것을 알 수 있다. @Composable 어노테이션에 들어간 함수는 매번 해당 상태를 구독하고, 상태가 변경될때마다 알림을 받아 기존 화면을 갱신해준다.\n\n그리고, 아래 Counter를 보면 Button을 이용하여 이벤트를 받아 처리하도록 했다.\n\n```kotlin\n@Composable\nfun Counter(count: Int, updateCount: (Int) -> Unit) {\n    Button(\n        onClick = { updateCount(count + 1) },\n        colors = ButtonDefaults.buttonColors(\n            backgroundColor = if (count > 5) Color.Green else Color.White\n        )\n    ) {\n        Text(\"I've been clicked $count times\")\n    }\n}\n```\n\n`updateCount(Int)` 함수릉 통해 매번 값을 업데이트 해주는데, 이를 통해 counterState에 값을 넣어주면서 해당 컴포넌트가 매번 변경이 되는것이다.\n\n따라서 결과를 보면, 다음과 같다. Count가 5가 넘어가면 초록색으로 바뀐다.\n\n{% asset_img Ju6BSg2.gif [Ju6BSg2] %}\n\n그 외에도 여러형태의 모양을 구성할수 있도록 옵션이 제공되어 있다. 자세한 정보는 나중에 [Codelabs](https://developer.android.com/codelabs/jetpack-compose-basics)에 더 나와 있으니 보도록하고, 이번에 setContent에 대한 동작원리를 함께 고민해보자.\n\n### 12. Activity에서의 View 생성 방식과의 비교\n\nCompose를 안드로이드 앱에서 사용하려면 Activity, Fragment와 같은곳에서 contentView로 뿌려줘야한다. 기존에 우리가 사용하던 함수를 보자.\n\n```java\n/**\n* Set the activity content from a layout resource.  The resource will be\n* inflated, adding all top-level views to the activity.\n*\n* @param layoutResID Resource ID to be inflated.\n*\n* @see #setContentView(android.view.View)\n* @see #setContentView(android.view.View, android.view.ViewGroup.LayoutParams)\n*/\npublic void setContentView(@LayoutRes int layoutResID) {\n  getWindow().setContentView(layoutResID);\n  initWindowDecorActionBar();\n}\n```\n\nUI 컴포넌트에서 화면을 붙일 수 있는 Window라는 녀석에서 Layout Resource Id를 통해 기존에 등록되어있던 Layout XML 파일을 로드하여 인플레이터에서 파싱하고, 이를통해 레이아웃 계층에 있는 뷰객체를 생성하여 순차적으로 ViewGroup, View를 만들어 넣어주게 된다.\n\n`PhoneWindow`를 보면 자세하게 알 수 있는데, Window를 구현한 setContentView에서 처음에 생성되는 최상위 레이아웃 그 위에 따로 없다면 `installDecor()` 함수를 통해 mContentParent(레이아웃 리소스가 붙게될 ViewGroup)를 생성하고, 하위에 넣어주게 된다.\n\n그러면 기존 방식은 이정도로 설명을하고, 이번엔 Compose에서 `setContent()` 라는 함수를 어떻게 사용하는지 보자.\n\n```kotlin\n/**\n * Composes the given composable into the given activity. The [content] will become the root view\n * of the given activity.\n *\n * This is roughly equivalent to calling [ComponentActivity.setContentView] with a [ComposeView]\n * i.e.:\n *\n * ```\n * setContentView(\n *   ComposeView(this).apply {\n *     setContent {\n *       MyComposableContent()\n *     }\n *   }\n * )\n * ```\n *\n * @param parent The parent composition reference to coordinate scheduling of composition updates\n * @param content A `@Composable` function declaring the UI contents\n */\npublic fun ComponentActivity.setContent(\n    parent: CompositionContext? = null,\n    content: @Composable () -> Unit\n) {\n    val existingComposeView = window.decorView\n        .findViewById<ViewGroup>(android.R.id.content)\n        .getChildAt(0) as? ComposeView\n\n    if (existingComposeView != null) with(existingComposeView) {\n        setParentCompositionContext(parent)\n        setContent(content)\n    } else ComposeView(this).apply {\n        // Set content and parent **before** setContentView\n        // to have ComposeView create the composition on attach\n        setParentCompositionContext(parent)\n        setContent(content)\n        // Set the view tree owners before setting the content view so that the inflation process\n        // and attach listeners will see them already present\n        setOwners()\n        setContentView(this, DefaultActivityContentLayoutParams)\n    }\n}\n```\n\n이녀석도 마찬가지로 `window.decorView.findViewById<ViewGroup>(android.R.id.content)`  함수를 호출하여 decorView를 가져온다. 만약 compose를 통해 만들어진 최상위 레이아웃이 존재하면, 기존에 inflator에서 ViewGroup, View를 생성해서 넣어주던것 처럼 `setContent()` => window가 Activity/Fragment에 붙으면 `createComposition()`를 호출하여 검증 후 `ensureCompsositionCreated()` 함수를 호출한다. 현재는 내부적으로 `ViewGroup.setContent()` 를 사용하고 있는데, 곧 교체 될 예정이라고 한다. 이코드도 보면 기존에 있는 ViewGroup에 확장함수로 구현한 녀석인데, 쉽게 말해 ViewGroup에 하위 View, ViewGroup에 Composable로 구현된 함수로 컴포넌트를 넣어줄 때 AndroidComposeView라는 객체를 꺼내오거나 없다면 새로 생성하여 넣어준다.\n\n```kotlin\n/**\n * Composes the given composable into the given view.\n *\n * The new composition can be logically \"linked\" to an existing one, by providing a\n * [parent]. This will ensure that invalidations and CompositionLocals will flow through\n * the two compositions as if they were not separate.\n *\n * Note that this [ViewGroup] should have an unique id for the saved instance state mechanism to\n * be able to save and restore the values used within the composition. See [View.setId].\n *\n * @param parent The [Recomposer] or parent composition reference.\n * @param content Composable that will be the content of the view.\n */\ninternal fun ViewGroup.setContent(\n    parent: CompositionContext,\n    content: @Composable () -> Unit\n): Composition {\n    GlobalSnapshotManager.ensureStarted()\n    val composeView =\n        if (childCount > 0) {\n            getChildAt(0) as? AndroidComposeView\n        } else {\n            removeAllViews(); null\n        } ?: AndroidComposeView(context).also { addView(it.view, DefaultLayoutParams) }\n    return doSetContent(composeView, parent, content)\n}\n```\n\n\n\n다시 돌아와서, ComposeView의 `setContent()` 이라는 녀석을 보자.\n\n```kotlin\n/**\n * A [android.view.View] that can host Jetpack Compose UI content.\n * Use [setContent] to supply the content composable function for the view.\n *\n * This [android.view.View] requires that the window it is attached to contains a\n * [ViewTreeLifecycleOwner]. This [androidx.lifecycle.LifecycleOwner] is used to\n * [dispose][androidx.compose.runtime.Composition.dispose] of the underlying composition\n * when the host [Lifecycle] is destroyed, permitting the view to be attached and\n * detached repeatedly while preserving the composition. Call [disposeComposition]\n * to dispose of the underlying composition earlier, or if the view is never initially\n * attached to a window. (The requirement to dispose of the composition explicitly\n * in the event that the view is never (re)attached is temporary.)\n */\nclass ComposeView @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyleAttr: Int = 0\n) : AbstractComposeView(context, attrs, defStyleAttr) {\n\n    private val content = mutableStateOf<(@Composable () -> Unit)?>(null)\n\n    @Suppress(\"RedundantVisibilityModifier\")\n    protected override var shouldCreateCompositionOnAttachedToWindow: Boolean = false\n        private set\n\n    @Composable\n    override fun Content() {\n        content.value?.invoke()\n    }\n\n    /**\n     * Set the Jetpack Compose UI content for this view.\n     * Initial composition will occur when the view becomes attached to a window or when\n     * [createComposition] is called, whichever comes first.\n     */\n    fun setContent(content: @Composable () -> Unit) {\n        shouldCreateCompositionOnAttachedToWindow = true\n        this.content.value = content\n        if (isAttachedToWindow) {\n            createComposition()\n        }\n    }\n}\n```\n\n결론적으로 `AbstractComposeView` 라는 녀석은 ViewGroup을 상속받은 녀석이며, 모든 composable의 상태가 변화 되었을 때 이를 감지하는 중요한 녀석이다.\n\n`setContent()`라는 함수는 위에서 설명했으니 넘어가고, 이번에는 `Content`라는 녀석을 보자. 이녀석은 추상 메소드로, `createComposition()` 이라는 함수가 호출 되었을 때, 가장 먼저 불리는 함수이다. 아까 언급되었던 `ensureCompsositionCreated()` 함수에서 tree계층의 ComposeView가 다 붙었다면, 이후에 즉시 Content함수가 호출이된다.\n\n```kotlin\n@Suppress(\"DEPRECATION\") // Still using ViewGroup.setContent for now\n    private fun ensureCompositionCreated() {\n        if (composition == null) {\n            try {\n                creatingComposition = true\n                composition = setContent(\n                    parentContext ?: findViewTreeCompositionContext() ?: windowRecomposer\n                ) {\n                    Content() // 이곳에서 뷰가 다 window에 붙게되면 콜백을 호출한다.\n                }\n            } finally {\n                creatingComposition = false\n            }\n        }\n    }\n```\n\n그러면 아래 `ComposeView`의 오버라이딩 된 Content가 호출되면서, 기존에 생성된 View에 UI속성과 같은 Content가 붙게된다.\n\n```kotlin\n/**\n* The Jetpack Compose UI content for this view.\n* Subclasses must implement this method to provide content. Initial composition will\n* occur when the view becomes attached to a window or when [createComposition] is called,\n* whichever comes first.\n*/\n@Composable\nabstract fun Content()\n```\n\nContent는 설명에서 보는것과 같이 `createComposition()` 함수 호출 후 View가 Window에 붙은 이후 즉시 호출된다.\n\n최종적으로 `ComponentActivity.setContent(CompositionContext?, @Composable () -> Unit)` 함수에서 구현된 ComposeView 인스턴스를 ContentLayout을 widht/height를 wrapContent크기로 정하여 ContentView를 Set해주게 된다.\n\n```kotlin\n/**\n * Composes the given composable into the given activity. The [content] will become the root view\n * of the given activity.\n *\n * This is roughly equivalent to calling [ComponentActivity.setContentView] with a [ComposeView]\n * i.e.:\n *\n * ```\n * setContentView(\n *   ComposeView(this).apply {\n *     setContent {\n *       MyComposableContent()\n *     }\n *   }\n * )\n * ```\n *\n * @param parent The parent composition reference to coordinate scheduling of composition updates\n * @param content A `@Composable` function declaring the UI contents\n */\npublic fun ComponentActivity.setContent(\n    parent: CompositionContext? = null,\n    content: @Composable () -> Unit\n) {\n  \t...\n\t\telse ComposeView(this).apply {\n        // Set content and parent **before** setContentView\n        // to have ComposeView create the composition on attach\n        setParentCompositionContext(parent)\n        setContent(content)\n        // Set the view tree owners before setting the content view so that the inflation process\n        // and attach listeners will see them already present\n        setOwners()\n        setContentView(this, DefaultActivityContentLayoutParams)\n    }\n}\n```\n\n### 13. ComposeView\n\nandroid.view.View 는 Jetpack Compose UI 콘텐츠를 사용할 수 있도록 해줍니다. setContent 를 사용하면 composable function content 를 뷰에 제공할 수 있다.\n\nCompose 의 계층 구조는 아래와 같으며. ComposeView 를 통해 androidx.compose.materia 에 정의된 다양한 컴포넌트를 조합하여 Composable function 콘텐츠를 구성할 수 있다.\n\n```\nkotlin.Any\n ↳ android.view.View\n   ↳ android.view.ViewGroup\n     ↳ androidx.compose.ui.platform.AbstractComposeView\n       ↳ androidx.compose.ui.platform.ComposeView\n```\n\n### 14. Compose Compiler / Compose Runtime\n\nCompose Compiler 는 `@Composable` 이 설정된 경우 Composable function 으로 코드 변환과 코틀린 컴파일러 플러그인과 함께 최적화를 활성화한다.\n\nCompose Runtime은 Compose의 프로그래밍 모델과 상태 관리, 그리고 Compose 컴파일러를 지정하기 위한 코어 런타임에 대한 기본 설정을 수행한다.\n\n\n```koltin\n@Composable\nfun Greeting(name: String) {\n    var greet by remember { mutableStateOf(\"Hello $name\") }\n    Text(text = greet, color = Color.Red)\n}\n```\n\n위의 코드는 Compose Compiler에 의해 `@Composeable`은 아래와 같이 변경된다.\n\n```kotlin\nfun Greeting(\n  $composer: Composer,\n  $static: Int,\n  name: String\n) {\n  $composer.start(123)\n  var greet by remember { mutableStateOf(\"Hello $name\") }\n  Text(text = greet, color = Color.Red)\n  $composer.end()\n}\n```\n\nCompose 는 `composer.start` 에서 고유의 키를 가지고 있고, 이는 Compose 의 state 가 변경될 때 해당 키를 가진 Compose 만 변경되도록 동작한다.\n\nstatic 은 상태(state)의 변경여부를 알 수 있는데 상태의 변화가 없는 경우, `composer.start` 와 `composer.end` 사이의 UI 의 변경을 하지 않는다.\n\n이때 데이터의 상태가 변경되어 UI 를 다시 구성하는 경우는 Recomposition 이라고 한다.","source":"_posts/2021-04-07 Jetpack Compose Part 1.md","raw":"---\ntitle: Jetpack Compose Part 1 - Compose 소개 및 코드랩 따라하기\ndate: 2021-04-07 01:00\ncover: https://androiddeepdive.github.io/Team-Blog/images/cover_jepack_compose.png\ncategories:\n- Jetpack Compose\ntags:\n- Android\n- Jetpack\n- Compose\n---\n\n<article class=\"message message-immersive is-primary\">\n    <div class=\"message-body\">\n        <i class=\"fas fa-pen-fancy mr-2\"></i>Writers<br>\n        by 김남훈 @Naver<br>\n        by 배희성 @RocketPunch<br>\n        by 송시영 @SmartStudy<br>\n        by 이기정 @BankSalad\n    </div>\n</article>\n\n<!-- more -->\n\n## Jetpack Compose란 무엇인가?\n\n{% asset_img compose_animation.gif [compose_animation] %}\n\n> **출처** [Android Developers#Jetpack Compse](https://developer.android.com/jetpack/compose)\n\nCompose는 Native UI를 코드레벨로 구현할 수 있는 최신 툴킷이다. \n\n기존의 뷰를 업데이트하는 방식과 달리 Compose를 사용하면 필요한 영역의 뷰를 다시 그려주는 방식으로 작업할 수 있다.\n\n아래는 아주 간단한 예제이다.\n\n```kotlin\n@Composable\nfun Greeting(name: String) {\n\tText(\"Hello $name\")\n}\n```\n\n위의 예제처럼 UI를 구성하는 것이 아니라 화면을 구성하는 뷰의 State 설명하는 것이므로 아무것도 반환하지 않는다.\n\n아래는 공식 서비스 소개 영상이다.\n\n{% youtube U5BwfqBpiWU %}\n\n### Compose의 4가지 특징\n\n구글에서 설명하는 Compose를 이용시 얻을 수 있는 장점은 아래와 같다.\n\n- `Less Code` - 코드 감소\n  - 적은 수의 코드로 더 많은 작업을 하고 전체 버그 클래스를 방지할 수 있으므로 코드가 간단하며 유지 관리하기 쉽습니다.\n- `Intuitive` - 직관적\n  - UI만 설명하면 나머지는 Compose에서 처리합니다. 앱 상태가 변경되면 UI가 자동으로 업데이트됩니다.\n- `Accelerate Development` - 빠른 개발 과정\n  - 기존의 모든 코드와 호환되므로 언제 어디서든 원하는 대로 사용할 수 있습니다. 실시간 미리보기 및 완전한 Android 스튜디오 지원으로 빠르게 반복할 수 있습니다.\n- `Powerful` - 강력한 성능\n  - Android 플랫폼 API에 직접 액세스하고 머티리얼 디자인, 어두운 테마, 애니메이션 등을 기본적으로 지원하는 멋진 앱을 만들 수 있습니다.\n\n늘 그렇듯 구글에서 말하는 설명만 보면 안 쓸 이유가 없어보이고, 대세가 된다면 Android 개발자에게 또 하나의 러닝커브로 작용할 것이다.\n\n## Codelab - Jetpack Compose basics\n\n### 1. 시작하기전에\n\nCompose는 아직 정식으로 릴리즈되지 않은 기능이므로 Android Studio Canary에서 프로젝트를 구성하며 몇 가지 제한사항이 존재한다.\n\n1. Android Studio Canary \n\nCanary는 아래 링크에서 다운 받을 수 있다.\n\n> [Android Studio Preview](https://developer.android.com/studio/preview)\n\n2. 최신 버전의 Kotlin plugin \n\n```groovy\next.kotlin_version = '1.4.31'\n```\n\n3. buildFeatures 및 composeOption 활성화\n\n```groovy\nandroid {\n    ...\n    buildFeatures {\n        compose true\n    }\n    composeOptions {\n        kotlinCompilerExtensionVersion 1.0.0-beta02\n    }\n}\n\ndependencies {\n    ...\n    implementation \"androidx.compose.ui:ui:1.0.0-beta02\"\n    implementation \"androidx.activity:activity-compose:1.3.0-alpha03\"\n    implementation \"androidx.compose.material:material:1.0.0-beta02\"\n    implementation \"androidx.compose.ui:ui-tooling:1.0.0-beta02\"\n    ...\n}\n```\n\n### 2. Empty Compose 프로젝트 생성\n\n[File] - [New] - [New Project…] 를 눌러 새로운 프로젝트를 선택하고(Preview) Empty Compose Activity 를 선택한다.\n\n{% asset_img 1_5gfrQWfxyEC7Oq6b2xlJ9w.png [1_5gfrQWfxyEC7Oq6b2xlJ9w] %}\n\n선택 이후 Next를 클릭하고, Compose를 구현할 수 있는 최소 API 레벨인 21을 선택해야한다.\n\n프로젝트를 생성하면 아래와 같이 app/build.gradle에 의존성 설정 및 추가가 되어 있는것을 알 수 있다.\n\n```groovy\nandroid {\n    ...\n    kotlinOptions {\n        jvmTarget = '1.8'\n        useIR = true\n    }\n    buildFeatures {\n        compose true\n    }\n    composeOptions {\n        kotlinCompilerExtensionVersion compose_version\n    }\n}\n\ndependencies {\n    ...\n    implementation \"androidx.compose.ui:ui:$compose_version\"\n    implementation \"androidx.activity:activity-compose:1.3.0-alpha03\"\n    implementation \"androidx.compose.material:material:$compose_version\"\n    implementation \"androidx.compose.ui:ui-tooling:$compose_version\"\n    ...\n}\n```\n\n이때 composeOptions 설정에서 kotlinCompilerVersion 에 따라 compose 가 다르게 동작할 수 있음을 유의하자.\n\n프로젝트를 생성하면 아래와 같은 기본 파일들이 생성된다.\n\n**MainActivity.kt**\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyFirstComposeApplicationTheme {\n                // A surface container using the 'background' color from the theme\n                Surface(color = MaterialTheme.colors.background) {\n                    Greeting(\"Android\")\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun Greeting(name: String) {\n    Text(text = \"Hello $name!\")\n}\n\n@Preview(showBackground = true)\n@Composable\nfun DefaultPreview() {\n    MyFirstComposeApplicationTheme {\n        Greeting(\"Android\")\n    }\n}\n```\n\n**ui/theme/Theme.kt**\n```kotlin\nprivate val DarkColorPalette = darkColors(\n    primary = Purple200,\n    primaryVariant = Purple700,\n    secondary = Teal200\n)\n\nprivate val LightColorPalette = lightColors(\n    primary = Purple500,\n    primaryVariant = Purple700,\n    secondary = Teal200*\n\n    /* Other default colors to override\n    background = Color.White,\n    surface = Color.White,\n    onPrimary = Color.White,\n    onSecondary = Color.Black,\n    onBackground = Color.Black,\n    onSurface = Color.Black,\n    */\n)\n\n@Composable\nfun MyFirstComposeApplicationTheme(darkTheme: Boolean = isSystemInDarkTheme(), content: @Composable () -> Unit) {\n    val colors = if (darkTheme) {\n        DarkColorPalette*\n    } else {\n        LightColorPalette*\n    }\n\n    MaterialTheme(\n        colors = colors,\n        typography = Typography,\n        shapes = Shapes,\n        content = content\n    )\n}\n```\n\n기본 생성된 코드를 보았을 때, Compose는 총 3가지의 구성 요소를 가지는 것으로 추측할 수 있다.\n\n1. 위젯을 포함하는 Composable 함수\n2. Preview를 하기 위한 Preview Composable 함수\n3. setContent 람다 표현식으로 실제 화면에 노출하는 코드\n\n일반적으로 우리가 아는 Activity의 라이프사이클 콜백 `onCreate()`에서   `setContentView(Int)` 함수를 호출하던것이 `setContent()` 함수로 바뀐것이 가장 큰 특징으로 보여진다.\n\n### 3. Composable Function\n\nComposable Function은 어노테이션을 이용한 기술이다. 함수위에 `@Composable` 어노테이션을 붙이게 되면 함수 안 다른 함수를 호출할 수 있게된다. 아래 코드를 보자.\n\n```kotlin\n@Composable\nfun Greeting(names: List<String>) {\n    for (name in names) {\n        Text(\"Hello $name\")\n    }\n}\n```\n\n단순하게 내부에는 Text라는 함수가 존재하는데, 이를 통해 UI계층 별 요구하는 컴포넌트를 생성해준다. 기본적으로 보이는 text 파라미터는 내부 속성에서 받는 일부 중 하나이다.\n\n### 4. TextView 만들기\n\n위 코드를 실행시켜보면 당연하게도 Hello로 시작하는 TextView가 화면에 그려질것을 암시한다.\n\n```kotlin\nsetContent {\n  BasicsCodelabTheme {\n    // A surface container using the 'background' color from the theme\n    Surface(color = MaterialTheme.colors.background) {\n      Greeting(\"Android\")\n    }\n  }\n}\n```\n\n{% asset_img aO6Jlsg.png [aO6Jlsg] %}\n\n### 5. `@Preview`\n\n말 그대로 어노테이션을 이용하여 IDE에서 Preview를하기 위한 용도이다. 아래 코드와 같이 @Preview 어노테이션을 추가하면 다음 결과를 볼 수 있다.\n\n```kotlin\n@Preview(\"Greeting Preview\")\n@Composable\nfun GreetingPreview() {\n    BasicsCodelabTheme {\n        Surface(color = MaterialTheme.colors.background) {\n            Greeting(\"Android\")\n        }\n    }\n}\n```\n\n{% asset_img WprDTs1.png [WprDTs1] %}\n\n### 6. setContent / Theme / Surface\n\n```kotlin\nsetContent {\n  BasicsCodelabTheme {\n    // A surface container using the 'background' color from the theme\n    Surface(color = MaterialTheme.colors.background) {\n      Greeting(\"Android\")\n    }\n  }\n}\n```\n\n기존에 onCreate시점에 화면을 그려주기 위한 필수적인 요소를 정리해보자면\n\n- **setContent** : Activity에서 setContentView함수를 사용하는 것과 동일한 동작을 하는 확장함수이다. 다만, setContent의 경우 (@Composable) -> Unit 타입의 컴포즈 UI를 구현해주어야한다.\n\n- **XXXTheme** : Theme정보를 의미한다. 해당 프로젝트에서는 Theme.kt에 여러 테마에 필요한 정보를 정리하고, 컴포즈 UI 구현을 위한 코드를 작성해두었다.\n\n```kotlin\nprivate val DarkColorPalette = darkColors(\n    primary = purple200,\n    primaryVariant = purple700,\n    secondary = teal200\n)\n\nprivate val LightColorPalette = lightColors(\n    primary = purple500,\n    primaryVariant = purple700,\n    secondary = teal200\n\n    /* Other default colors to override\n    background = Color.White,\n    surface = Color.White,\n    onPrimary = Color.White,\n    onSecondary = Color.Black,\n    onBackground = Color.Black,\n    onSurface = Color.Black,\n    */\n)\n\n@Composable\nfun BasicsCodelabTheme(\n    darkTheme: Boolean = isSystemInDarkTheme(),\n    content: @Composable () -> Unit\n) {\n    val colors = if (darkTheme) {\n        DarkColorPalette\n    } else {\n        LightColorPalette\n    }\n\n    MaterialTheme(\n        colors = colors,\n        typography = typography,\n        shapes = shapes,\n        content = content\n    )\n}\n```\n\n- **Surface** : Greeting을 감싸는 뷰에 해당한다. 여기서는 크기를 정하지 않고, background 색상을 정의하고 있다. 역시 람다 표현식이다. 색상에 대한 Paramter로 `color` 라는 값을 사용하여 부여가 가능하다. 내부코드를 보면\n\n```kotlin\n@Composable\nfun Surface(\n    modifier: Modifier = Modifier,\n    shape: Shape = RectangleShape,\n    color: Color = MaterialTheme.colors.surface,\n    contentColor: Color = contentColorFor(color),\n    border: BorderStroke? = null,\n    elevation: Dp = 0.dp,\n    content: @Composable () -> Unit\n) {\n    val elevationPx = with(LocalDensity.current) { elevation.toPx() }\n    val elevationOverlay = LocalElevationOverlay.current\n    val absoluteElevation = LocalAbsoluteElevation.current + elevation\n    val backgroundColor = if (color == MaterialTheme.colors.surface && elevationOverlay != null) {\n        elevationOverlay.apply(color, absoluteElevation)\n    } else {\n        color\n    }\n    CompositionLocalProvider(\n        LocalContentColor provides contentColor,\n        LocalAbsoluteElevation provides absoluteElevation\n    ) {\n        Box(\n            modifier.graphicsLayer(shadowElevation = elevationPx, shape = shape)\n                .then(if (border != null) Modifier.border(border, shape) else Modifier)\n                .background(\n                    color = backgroundColor,\n                    shape = shape\n                )\n                .clip(shape),\n            propagateMinConstraints = true\n        ) {\n            content()\n        }\n    }\n}\n```\n\n### 7. Declarative UI - 선언형 UI\n\n노란색 배경을 입혀 기존 TextView에 추가해보았다. 또한, Greeting에는 Modifier라는 것을 이용하여 Padding을 추가했다. 아래와 같은 결과가 나오게 되었다.\n\n```kotlin\nBasicsCodelabTheme {\n  // A surface container using the 'background' color from the theme\n  Surface(color = Color.Yellow) {\n    Greeting(\"Android\")\n  }\n}\n```\n\n```kotlin\n@Composable\nfun Greeting(name: String) {\n    var isSelected by remember { mutableStateOf(false) }\n    val backgroundColor by animateColorAsState(if (isSelected) Color.Red else Color.Transparent)\n\n    Text(\n        text = \"Hello $name!\",\n        modifier = Modifier\n            .padding(24.dp)\n            .background(color = backgroundColor)\n            .clickable(onClick = { isSelected = !isSelected })\n    )\n}\n```\n\n{% asset_img qgQ6oY4.png [qgQ6oY4] %}\n\n선언형 UI의 장점은 말 그대로 내가 UI를 정의한대로 시각적으로 표현이 가능하다는 장점이 있다. 기존에는 속성을 매번 On/Off와 같은 옵션을 통해 변경하는 것이 다반사였지만, 이제는 매번 속성에 변경이 생길때마다 새로 그려주게 되는것이다.\n\n\n### 8. 재사용\n\nCompose의 장점 중 하나는 재사용성이 뛰어난것인데, XML에서 우리가 include 태그를 통해 여러곳에서 갖다쓸 수 있던것처럼, 함수를 통해 여러곳에서 정의하여 사용이 가능하다.\n\n참고해야할 점은 Compose 컴포넌트 확장 시 `@Composable` 어노테이션을 붙여야 한다.\n\n### 9. Container 작성\n\nMyApp이라는 이름으로 컴포즈 컴포넌트를 구횬하여 여러곳에서 공통으로 사용할 수 있는 Composable을 구현하였다. 내부적으로 Container내 내가 원하는 컴포넌트를 넣어주려면 아래와 같이 인자로 `@Composable () -> Unit` 타입을 넘겨받아 처리해주면 된다.\n\n```kotlin\n@Composable\nfun MyApp(content: @Composable () -> Unit) {\n    BasicsCodelabTheme {\n        Surface(color = Color.Yellow) {\n            content()\n        }\n    }\n}\n```\n\n위 함수를 통해 이제는 어디서든 반복해서 사용할 수 있는 Container를 구현하게 되어 아래와 같이 코드를 활용할 수 있게되었다.\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContent {\n      MyApp {\n        Greeting(\"Android\")\n      }\n    }\n    ...\n  }\n```\n\n### 10. 레이아웃을 활용한 Compose function의 다중 호출\n\n지금까지는 하나의 컴포넌트만을 갖고 사용했지만, 여러개의 컴포넌트를 넣는것도 가능하다.\n\n```kotlin\n@Composable\nfun MyScreenContent() {\n    Column {\n        Greeting(\"Android\")\n        Divider(color = Color.Black)\n        Greeting(\"there\")\n    }\n}\n```\n\n `Column`과 위에서부터 사용하던 `Greeting` 함수를 사용하고, 라인을 그어주기 위한 `Divider`를 추가한 결과물은 다음과 같다.\n\n{% asset_img VLTxB8C.png [VLTxB8C] %}\n\n위 컴포넌트 중 못보던 컴포저블이 있는데, 아래와 같이 설명이 가능하다.\n\n- Column : 항목을 순서대로 배치하기 위해 사용한다.\n- Divider : 선 긋기 가능한 Compose 함수이다.\n\n이를 리스트 형태로도 구현이 가능하다.\n\n```kotlin\n@Composable\nfun MyColumnScreen(names: List<String> = listOf(\"Line One\", \"Line Two\")) {\n    Column {\n        names.forEach {\n            Greeting(name = it)\n            Divider(color = Color.Black)\n        }\n    }\n}\n```\n\n### 11. State in Compose - Compose에서의 상태값 관리\n\n\n컴포넌트에 버튼을 클릭했을 때 클릭한 카운트를 집계하는 간단한 컴포넌트를 만들어보았다.\n\n```kotlin\n@Composable\nfun MyColumnScreen(names: List<String> = listOf(\"Line One\", \"Line Two\")) {\n    val counterState = remember { mutableStateOf(0) } // \n\n    Column {\n        names.forEach {\n            Greeting(name = it)\n            Divider(color = Color.Black)\n        }\n        Counter(\n            count = counterState.value,\n            updateCount = { newCount ->\n                counterState.value = newCount\n            }\n        )\n    }\n}\n```\n\nremember라는 함수를 사용하여 기존에 존재하는 컴포넌트의 상태값을 기억하게 하는 함수가 있다. \n\n`remember` 함수의 내부를 살펴보자.\n\n```kotlin\n/**\n * Remember the value produced by [calculation]. [calculation] will only be evaluated during the composition.\n * Recomposition will always return the value produced by composition.\n */\n@OptIn(ComposeCompilerApi::class)\n@Composable\ninline fun <T> remember(calculation: @DisallowComposableCalls () -> T): T =\n    currentComposer.cache(false, calculation)\n```\n\n매 호출마다 Recomposition(재조합)하게되는 경우 컴포넌트에 값을 다시 제공하는 것을 알 수 있다. @Composable 어노테이션에 들어간 함수는 매번 해당 상태를 구독하고, 상태가 변경될때마다 알림을 받아 기존 화면을 갱신해준다.\n\n그리고, 아래 Counter를 보면 Button을 이용하여 이벤트를 받아 처리하도록 했다.\n\n```kotlin\n@Composable\nfun Counter(count: Int, updateCount: (Int) -> Unit) {\n    Button(\n        onClick = { updateCount(count + 1) },\n        colors = ButtonDefaults.buttonColors(\n            backgroundColor = if (count > 5) Color.Green else Color.White\n        )\n    ) {\n        Text(\"I've been clicked $count times\")\n    }\n}\n```\n\n`updateCount(Int)` 함수릉 통해 매번 값을 업데이트 해주는데, 이를 통해 counterState에 값을 넣어주면서 해당 컴포넌트가 매번 변경이 되는것이다.\n\n따라서 결과를 보면, 다음과 같다. Count가 5가 넘어가면 초록색으로 바뀐다.\n\n{% asset_img Ju6BSg2.gif [Ju6BSg2] %}\n\n그 외에도 여러형태의 모양을 구성할수 있도록 옵션이 제공되어 있다. 자세한 정보는 나중에 [Codelabs](https://developer.android.com/codelabs/jetpack-compose-basics)에 더 나와 있으니 보도록하고, 이번에 setContent에 대한 동작원리를 함께 고민해보자.\n\n### 12. Activity에서의 View 생성 방식과의 비교\n\nCompose를 안드로이드 앱에서 사용하려면 Activity, Fragment와 같은곳에서 contentView로 뿌려줘야한다. 기존에 우리가 사용하던 함수를 보자.\n\n```java\n/**\n* Set the activity content from a layout resource.  The resource will be\n* inflated, adding all top-level views to the activity.\n*\n* @param layoutResID Resource ID to be inflated.\n*\n* @see #setContentView(android.view.View)\n* @see #setContentView(android.view.View, android.view.ViewGroup.LayoutParams)\n*/\npublic void setContentView(@LayoutRes int layoutResID) {\n  getWindow().setContentView(layoutResID);\n  initWindowDecorActionBar();\n}\n```\n\nUI 컴포넌트에서 화면을 붙일 수 있는 Window라는 녀석에서 Layout Resource Id를 통해 기존에 등록되어있던 Layout XML 파일을 로드하여 인플레이터에서 파싱하고, 이를통해 레이아웃 계층에 있는 뷰객체를 생성하여 순차적으로 ViewGroup, View를 만들어 넣어주게 된다.\n\n`PhoneWindow`를 보면 자세하게 알 수 있는데, Window를 구현한 setContentView에서 처음에 생성되는 최상위 레이아웃 그 위에 따로 없다면 `installDecor()` 함수를 통해 mContentParent(레이아웃 리소스가 붙게될 ViewGroup)를 생성하고, 하위에 넣어주게 된다.\n\n그러면 기존 방식은 이정도로 설명을하고, 이번엔 Compose에서 `setContent()` 라는 함수를 어떻게 사용하는지 보자.\n\n```kotlin\n/**\n * Composes the given composable into the given activity. The [content] will become the root view\n * of the given activity.\n *\n * This is roughly equivalent to calling [ComponentActivity.setContentView] with a [ComposeView]\n * i.e.:\n *\n * ```\n * setContentView(\n *   ComposeView(this).apply {\n *     setContent {\n *       MyComposableContent()\n *     }\n *   }\n * )\n * ```\n *\n * @param parent The parent composition reference to coordinate scheduling of composition updates\n * @param content A `@Composable` function declaring the UI contents\n */\npublic fun ComponentActivity.setContent(\n    parent: CompositionContext? = null,\n    content: @Composable () -> Unit\n) {\n    val existingComposeView = window.decorView\n        .findViewById<ViewGroup>(android.R.id.content)\n        .getChildAt(0) as? ComposeView\n\n    if (existingComposeView != null) with(existingComposeView) {\n        setParentCompositionContext(parent)\n        setContent(content)\n    } else ComposeView(this).apply {\n        // Set content and parent **before** setContentView\n        // to have ComposeView create the composition on attach\n        setParentCompositionContext(parent)\n        setContent(content)\n        // Set the view tree owners before setting the content view so that the inflation process\n        // and attach listeners will see them already present\n        setOwners()\n        setContentView(this, DefaultActivityContentLayoutParams)\n    }\n}\n```\n\n이녀석도 마찬가지로 `window.decorView.findViewById<ViewGroup>(android.R.id.content)`  함수를 호출하여 decorView를 가져온다. 만약 compose를 통해 만들어진 최상위 레이아웃이 존재하면, 기존에 inflator에서 ViewGroup, View를 생성해서 넣어주던것 처럼 `setContent()` => window가 Activity/Fragment에 붙으면 `createComposition()`를 호출하여 검증 후 `ensureCompsositionCreated()` 함수를 호출한다. 현재는 내부적으로 `ViewGroup.setContent()` 를 사용하고 있는데, 곧 교체 될 예정이라고 한다. 이코드도 보면 기존에 있는 ViewGroup에 확장함수로 구현한 녀석인데, 쉽게 말해 ViewGroup에 하위 View, ViewGroup에 Composable로 구현된 함수로 컴포넌트를 넣어줄 때 AndroidComposeView라는 객체를 꺼내오거나 없다면 새로 생성하여 넣어준다.\n\n```kotlin\n/**\n * Composes the given composable into the given view.\n *\n * The new composition can be logically \"linked\" to an existing one, by providing a\n * [parent]. This will ensure that invalidations and CompositionLocals will flow through\n * the two compositions as if they were not separate.\n *\n * Note that this [ViewGroup] should have an unique id for the saved instance state mechanism to\n * be able to save and restore the values used within the composition. See [View.setId].\n *\n * @param parent The [Recomposer] or parent composition reference.\n * @param content Composable that will be the content of the view.\n */\ninternal fun ViewGroup.setContent(\n    parent: CompositionContext,\n    content: @Composable () -> Unit\n): Composition {\n    GlobalSnapshotManager.ensureStarted()\n    val composeView =\n        if (childCount > 0) {\n            getChildAt(0) as? AndroidComposeView\n        } else {\n            removeAllViews(); null\n        } ?: AndroidComposeView(context).also { addView(it.view, DefaultLayoutParams) }\n    return doSetContent(composeView, parent, content)\n}\n```\n\n\n\n다시 돌아와서, ComposeView의 `setContent()` 이라는 녀석을 보자.\n\n```kotlin\n/**\n * A [android.view.View] that can host Jetpack Compose UI content.\n * Use [setContent] to supply the content composable function for the view.\n *\n * This [android.view.View] requires that the window it is attached to contains a\n * [ViewTreeLifecycleOwner]. This [androidx.lifecycle.LifecycleOwner] is used to\n * [dispose][androidx.compose.runtime.Composition.dispose] of the underlying composition\n * when the host [Lifecycle] is destroyed, permitting the view to be attached and\n * detached repeatedly while preserving the composition. Call [disposeComposition]\n * to dispose of the underlying composition earlier, or if the view is never initially\n * attached to a window. (The requirement to dispose of the composition explicitly\n * in the event that the view is never (re)attached is temporary.)\n */\nclass ComposeView @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyleAttr: Int = 0\n) : AbstractComposeView(context, attrs, defStyleAttr) {\n\n    private val content = mutableStateOf<(@Composable () -> Unit)?>(null)\n\n    @Suppress(\"RedundantVisibilityModifier\")\n    protected override var shouldCreateCompositionOnAttachedToWindow: Boolean = false\n        private set\n\n    @Composable\n    override fun Content() {\n        content.value?.invoke()\n    }\n\n    /**\n     * Set the Jetpack Compose UI content for this view.\n     * Initial composition will occur when the view becomes attached to a window or when\n     * [createComposition] is called, whichever comes first.\n     */\n    fun setContent(content: @Composable () -> Unit) {\n        shouldCreateCompositionOnAttachedToWindow = true\n        this.content.value = content\n        if (isAttachedToWindow) {\n            createComposition()\n        }\n    }\n}\n```\n\n결론적으로 `AbstractComposeView` 라는 녀석은 ViewGroup을 상속받은 녀석이며, 모든 composable의 상태가 변화 되었을 때 이를 감지하는 중요한 녀석이다.\n\n`setContent()`라는 함수는 위에서 설명했으니 넘어가고, 이번에는 `Content`라는 녀석을 보자. 이녀석은 추상 메소드로, `createComposition()` 이라는 함수가 호출 되었을 때, 가장 먼저 불리는 함수이다. 아까 언급되었던 `ensureCompsositionCreated()` 함수에서 tree계층의 ComposeView가 다 붙었다면, 이후에 즉시 Content함수가 호출이된다.\n\n```kotlin\n@Suppress(\"DEPRECATION\") // Still using ViewGroup.setContent for now\n    private fun ensureCompositionCreated() {\n        if (composition == null) {\n            try {\n                creatingComposition = true\n                composition = setContent(\n                    parentContext ?: findViewTreeCompositionContext() ?: windowRecomposer\n                ) {\n                    Content() // 이곳에서 뷰가 다 window에 붙게되면 콜백을 호출한다.\n                }\n            } finally {\n                creatingComposition = false\n            }\n        }\n    }\n```\n\n그러면 아래 `ComposeView`의 오버라이딩 된 Content가 호출되면서, 기존에 생성된 View에 UI속성과 같은 Content가 붙게된다.\n\n```kotlin\n/**\n* The Jetpack Compose UI content for this view.\n* Subclasses must implement this method to provide content. Initial composition will\n* occur when the view becomes attached to a window or when [createComposition] is called,\n* whichever comes first.\n*/\n@Composable\nabstract fun Content()\n```\n\nContent는 설명에서 보는것과 같이 `createComposition()` 함수 호출 후 View가 Window에 붙은 이후 즉시 호출된다.\n\n최종적으로 `ComponentActivity.setContent(CompositionContext?, @Composable () -> Unit)` 함수에서 구현된 ComposeView 인스턴스를 ContentLayout을 widht/height를 wrapContent크기로 정하여 ContentView를 Set해주게 된다.\n\n```kotlin\n/**\n * Composes the given composable into the given activity. The [content] will become the root view\n * of the given activity.\n *\n * This is roughly equivalent to calling [ComponentActivity.setContentView] with a [ComposeView]\n * i.e.:\n *\n * ```\n * setContentView(\n *   ComposeView(this).apply {\n *     setContent {\n *       MyComposableContent()\n *     }\n *   }\n * )\n * ```\n *\n * @param parent The parent composition reference to coordinate scheduling of composition updates\n * @param content A `@Composable` function declaring the UI contents\n */\npublic fun ComponentActivity.setContent(\n    parent: CompositionContext? = null,\n    content: @Composable () -> Unit\n) {\n  \t...\n\t\telse ComposeView(this).apply {\n        // Set content and parent **before** setContentView\n        // to have ComposeView create the composition on attach\n        setParentCompositionContext(parent)\n        setContent(content)\n        // Set the view tree owners before setting the content view so that the inflation process\n        // and attach listeners will see them already present\n        setOwners()\n        setContentView(this, DefaultActivityContentLayoutParams)\n    }\n}\n```\n\n### 13. ComposeView\n\nandroid.view.View 는 Jetpack Compose UI 콘텐츠를 사용할 수 있도록 해줍니다. setContent 를 사용하면 composable function content 를 뷰에 제공할 수 있다.\n\nCompose 의 계층 구조는 아래와 같으며. ComposeView 를 통해 androidx.compose.materia 에 정의된 다양한 컴포넌트를 조합하여 Composable function 콘텐츠를 구성할 수 있다.\n\n```\nkotlin.Any\n ↳ android.view.View\n   ↳ android.view.ViewGroup\n     ↳ androidx.compose.ui.platform.AbstractComposeView\n       ↳ androidx.compose.ui.platform.ComposeView\n```\n\n### 14. Compose Compiler / Compose Runtime\n\nCompose Compiler 는 `@Composable` 이 설정된 경우 Composable function 으로 코드 변환과 코틀린 컴파일러 플러그인과 함께 최적화를 활성화한다.\n\nCompose Runtime은 Compose의 프로그래밍 모델과 상태 관리, 그리고 Compose 컴파일러를 지정하기 위한 코어 런타임에 대한 기본 설정을 수행한다.\n\n\n```koltin\n@Composable\nfun Greeting(name: String) {\n    var greet by remember { mutableStateOf(\"Hello $name\") }\n    Text(text = greet, color = Color.Red)\n}\n```\n\n위의 코드는 Compose Compiler에 의해 `@Composeable`은 아래와 같이 변경된다.\n\n```kotlin\nfun Greeting(\n  $composer: Composer,\n  $static: Int,\n  name: String\n) {\n  $composer.start(123)\n  var greet by remember { mutableStateOf(\"Hello $name\") }\n  Text(text = greet, color = Color.Red)\n  $composer.end()\n}\n```\n\nCompose 는 `composer.start` 에서 고유의 키를 가지고 있고, 이는 Compose 의 state 가 변경될 때 해당 키를 가진 Compose 만 변경되도록 동작한다.\n\nstatic 은 상태(state)의 변경여부를 알 수 있는데 상태의 변화가 없는 경우, `composer.start` 와 `composer.end` 사이의 UI 의 변경을 하지 않는다.\n\n이때 데이터의 상태가 변경되어 UI 를 다시 구성하는 경우는 Recomposition 이라고 한다.","slug":"2021-04-07 Jetpack Compose Part 1","published":1,"updated":"2021-07-25T06:48:23.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckriv3n650009z6reb20fabh4","content":"<article class=\"message message-immersive is-primary\">\n    <div class=\"message-body\">\n        <i class=\"fas fa-pen-fancy mr-2\"></i>Writers<br>\n        by 김남훈 @Naver<br>\n        by 배희성 @RocketPunch<br>\n        by 송시영 @SmartStudy<br>\n        by 이기정 @BankSalad\n    </div>\n</article>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Jetpack-Compose란-무엇인가\"><a href=\"#Jetpack-Compose란-무엇인가\" class=\"headerlink\" title=\"Jetpack Compose란 무엇인가?\"></a>Jetpack Compose란 무엇인가?</h2><img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%201/compose_animation.gif\" class=\"\" title=\"[compose_animation]\">\n\n<blockquote>\n<p><strong>출처</strong> <a href=\"https://developer.android.com/jetpack/compose\">Android Developers#Jetpack Compse</a></p>\n</blockquote>\n<p>Compose는 Native UI를 코드레벨로 구현할 수 있는 최신 툴킷이다. </p>\n<p>기존의 뷰를 업데이트하는 방식과 달리 Compose를 사용하면 필요한 영역의 뷰를 다시 그려주는 방식으로 작업할 수 있다.</p>\n<p>아래는 아주 간단한 예제이다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Greeting</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">\tText(<span class=\"string\">&quot;Hello <span class=\"variable\">$name</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>위의 예제처럼 UI를 구성하는 것이 아니라 화면을 구성하는 뷰의 State 설명하는 것이므로 아무것도 반환하지 않는다.</p>\n<p>아래는 공식 서비스 소개 영상이다.</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/U5BwfqBpiWU\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n\n<h3 id=\"Compose의-4가지-특징\"><a href=\"#Compose의-4가지-특징\" class=\"headerlink\" title=\"Compose의 4가지 특징\"></a>Compose의 4가지 특징</h3><p>구글에서 설명하는 Compose를 이용시 얻을 수 있는 장점은 아래와 같다.</p>\n<ul>\n<li><code>Less Code</code> - 코드 감소<ul>\n<li>적은 수의 코드로 더 많은 작업을 하고 전체 버그 클래스를 방지할 수 있으므로 코드가 간단하며 유지 관리하기 쉽습니다.</li>\n</ul>\n</li>\n<li><code>Intuitive</code> - 직관적<ul>\n<li>UI만 설명하면 나머지는 Compose에서 처리합니다. 앱 상태가 변경되면 UI가 자동으로 업데이트됩니다.</li>\n</ul>\n</li>\n<li><code>Accelerate Development</code> - 빠른 개발 과정<ul>\n<li>기존의 모든 코드와 호환되므로 언제 어디서든 원하는 대로 사용할 수 있습니다. 실시간 미리보기 및 완전한 Android 스튜디오 지원으로 빠르게 반복할 수 있습니다.</li>\n</ul>\n</li>\n<li><code>Powerful</code> - 강력한 성능<ul>\n<li>Android 플랫폼 API에 직접 액세스하고 머티리얼 디자인, 어두운 테마, 애니메이션 등을 기본적으로 지원하는 멋진 앱을 만들 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<p>늘 그렇듯 구글에서 말하는 설명만 보면 안 쓸 이유가 없어보이고, 대세가 된다면 Android 개발자에게 또 하나의 러닝커브로 작용할 것이다.</p>\n<h2 id=\"Codelab-Jetpack-Compose-basics\"><a href=\"#Codelab-Jetpack-Compose-basics\" class=\"headerlink\" title=\"Codelab - Jetpack Compose basics\"></a>Codelab - Jetpack Compose basics</h2><h3 id=\"1-시작하기전에\"><a href=\"#1-시작하기전에\" class=\"headerlink\" title=\"1. 시작하기전에\"></a>1. 시작하기전에</h3><p>Compose는 아직 정식으로 릴리즈되지 않은 기능이므로 Android Studio Canary에서 프로젝트를 구성하며 몇 가지 제한사항이 존재한다.</p>\n<ol>\n<li>Android Studio Canary </li>\n</ol>\n<p>Canary는 아래 링크에서 다운 받을 수 있다.</p>\n<blockquote>\n<p><a href=\"https://developer.android.com/studio/preview\">Android Studio Preview</a></p>\n</blockquote>\n<ol start=\"2\">\n<li>최신 버전의 Kotlin plugin </li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ext.kotlin_version = <span class=\"string\">&#x27;1.4.31&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>buildFeatures 및 composeOption 활성화</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    buildFeatures &#123;</span><br><span class=\"line\">        compose <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    composeOptions &#123;</span><br><span class=\"line\">        kotlinCompilerExtensionVersion <span class=\"number\">1.0</span><span class=\"number\">.0</span>-beta02</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.compose.ui:ui:1.0.0-beta02&quot;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.activity:activity-compose:1.3.0-alpha03&quot;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.compose.material:material:1.0.0-beta02&quot;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.compose.ui:ui-tooling:1.0.0-beta02&quot;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Empty-Compose-프로젝트-생성\"><a href=\"#2-Empty-Compose-프로젝트-생성\" class=\"headerlink\" title=\"2. Empty Compose 프로젝트 생성\"></a>2. Empty Compose 프로젝트 생성</h3><p>[File] - [New] - [New Project…] 를 눌러 새로운 프로젝트를 선택하고(Preview) Empty Compose Activity 를 선택한다.</p>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%201/1_5gfrQWfxyEC7Oq6b2xlJ9w.png\" class=\"\" title=\"[1_5gfrQWfxyEC7Oq6b2xlJ9w]\">\n\n<p>선택 이후 Next를 클릭하고, Compose를 구현할 수 있는 최소 API 레벨인 21을 선택해야한다.</p>\n<p>프로젝트를 생성하면 아래와 같이 app/build.gradle에 의존성 설정 및 추가가 되어 있는것을 알 수 있다.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    kotlinOptions &#123;</span><br><span class=\"line\">        jvmTarget = <span class=\"string\">&#x27;1.8&#x27;</span></span><br><span class=\"line\">        useIR = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildFeatures &#123;</span><br><span class=\"line\">        compose <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    composeOptions &#123;</span><br><span class=\"line\">        kotlinCompilerExtensionVersion compose_version</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.compose.ui:ui:$compose_version&quot;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.activity:activity-compose:1.3.0-alpha03&quot;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.compose.material:material:$compose_version&quot;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.compose.ui:ui-tooling:$compose_version&quot;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>이때 composeOptions 설정에서 kotlinCompilerVersion 에 따라 compose 가 다르게 동작할 수 있음을 유의하자.</p>\n<p>프로젝트를 생성하면 아래와 같은 기본 파일들이 생성된다.</p>\n<p><strong>MainActivity.kt</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContent &#123;</span><br><span class=\"line\">            MyFirstComposeApplicationTheme &#123;</span><br><span class=\"line\">                <span class=\"comment\">// A surface container using the &#x27;background&#x27; color from the theme</span></span><br><span class=\"line\">                Surface(color = MaterialTheme.colors.background) &#123;</span><br><span class=\"line\">                    Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Greeting</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    Text(text = <span class=\"string\">&quot;Hello <span class=\"variable\">$name</span>!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Preview(showBackground = true)</span></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">DefaultPreview</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    MyFirstComposeApplicationTheme &#123;</span><br><span class=\"line\">        Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>ui/theme/Theme.kt</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> DarkColorPalette = darkColors(</span><br><span class=\"line\">    primary = Purple200,</span><br><span class=\"line\">    primaryVariant = Purple700,</span><br><span class=\"line\">    secondary = Teal200</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> LightColorPalette = lightColors(</span><br><span class=\"line\">    primary = Purple500,</span><br><span class=\"line\">    primaryVariant = Purple700,</span><br><span class=\"line\">    secondary = Teal200*</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Other default colors to override</span></span><br><span class=\"line\"><span class=\"comment\">    background = Color.White,</span></span><br><span class=\"line\"><span class=\"comment\">    surface = Color.White,</span></span><br><span class=\"line\"><span class=\"comment\">    onPrimary = Color.White,</span></span><br><span class=\"line\"><span class=\"comment\">    onSecondary = Color.Black,</span></span><br><span class=\"line\"><span class=\"comment\">    onBackground = Color.Black,</span></span><br><span class=\"line\"><span class=\"comment\">    onSurface = Color.Black,</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">MyFirstComposeApplicationTheme</span><span class=\"params\">(darkTheme: <span class=\"type\">Boolean</span> = isSystemInDarkTheme()</span></span>, content: <span class=\"meta\">@Composable</span> () -&gt; <span class=\"built_in\">Unit</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> colors = <span class=\"keyword\">if</span> (darkTheme) &#123;</span><br><span class=\"line\">        DarkColorPalette*</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        LightColorPalette*</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    MaterialTheme(</span><br><span class=\"line\">        colors = colors,</span><br><span class=\"line\">        typography = Typography,</span><br><span class=\"line\">        shapes = Shapes,</span><br><span class=\"line\">        content = content</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>기본 생성된 코드를 보았을 때, Compose는 총 3가지의 구성 요소를 가지는 것으로 추측할 수 있다.</p>\n<ol>\n<li>위젯을 포함하는 Composable 함수</li>\n<li>Preview를 하기 위한 Preview Composable 함수</li>\n<li>setContent 람다 표현식으로 실제 화면에 노출하는 코드</li>\n</ol>\n<p>일반적으로 우리가 아는 Activity의 라이프사이클 콜백 <code>onCreate()</code>에서   <code>setContentView(Int)</code> 함수를 호출하던것이 <code>setContent()</code> 함수로 바뀐것이 가장 큰 특징으로 보여진다.</p>\n<h3 id=\"3-Composable-Function\"><a href=\"#3-Composable-Function\" class=\"headerlink\" title=\"3. Composable Function\"></a>3. Composable Function</h3><p>Composable Function은 어노테이션을 이용한 기술이다. 함수위에 <code>@Composable</code> 어노테이션을 붙이게 되면 함수 안 다른 함수를 호출할 수 있게된다. 아래 코드를 보자.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Greeting</span><span class=\"params\">(names: <span class=\"type\">List</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> names) &#123;</span><br><span class=\"line\">        Text(<span class=\"string\">&quot;Hello <span class=\"variable\">$name</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>단순하게 내부에는 Text라는 함수가 존재하는데, 이를 통해 UI계층 별 요구하는 컴포넌트를 생성해준다. 기본적으로 보이는 text 파라미터는 내부 속성에서 받는 일부 중 하나이다.</p>\n<h3 id=\"4-TextView-만들기\"><a href=\"#4-TextView-만들기\" class=\"headerlink\" title=\"4. TextView 만들기\"></a>4. TextView 만들기</h3><p>위 코드를 실행시켜보면 당연하게도 Hello로 시작하는 TextView가 화면에 그려질것을 암시한다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setContent &#123;</span><br><span class=\"line\">  BasicsCodelabTheme &#123;</span><br><span class=\"line\">    <span class=\"comment\">// A surface container using the &#x27;background&#x27; color from the theme</span></span><br><span class=\"line\">    Surface(color = MaterialTheme.colors.background) &#123;</span><br><span class=\"line\">      Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%201/aO6Jlsg.png\" class=\"\" title=\"[aO6Jlsg]\">\n\n<h3 id=\"5-Preview\"><a href=\"#5-Preview\" class=\"headerlink\" title=\"5. @Preview\"></a>5. <code>@Preview</code></h3><p>말 그대로 어노테이션을 이용하여 IDE에서 Preview를하기 위한 용도이다. 아래 코드와 같이 @Preview 어노테이션을 추가하면 다음 결과를 볼 수 있다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Preview(<span class=\"meta-string\">&quot;Greeting Preview&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">GreetingPreview</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    BasicsCodelabTheme &#123;</span><br><span class=\"line\">        Surface(color = MaterialTheme.colors.background) &#123;</span><br><span class=\"line\">            Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%201/WprDTs1.png\" class=\"\" title=\"[WprDTs1]\">\n\n<h3 id=\"6-setContent-Theme-Surface\"><a href=\"#6-setContent-Theme-Surface\" class=\"headerlink\" title=\"6. setContent / Theme / Surface\"></a>6. setContent / Theme / Surface</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setContent &#123;</span><br><span class=\"line\">  BasicsCodelabTheme &#123;</span><br><span class=\"line\">    <span class=\"comment\">// A surface container using the &#x27;background&#x27; color from the theme</span></span><br><span class=\"line\">    Surface(color = MaterialTheme.colors.background) &#123;</span><br><span class=\"line\">      Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>기존에 onCreate시점에 화면을 그려주기 위한 필수적인 요소를 정리해보자면</p>\n<ul>\n<li><p><strong>setContent</strong> : Activity에서 setContentView함수를 사용하는 것과 동일한 동작을 하는 확장함수이다. 다만, setContent의 경우 (@Composable) -&gt; Unit 타입의 컴포즈 UI를 구현해주어야한다.</p>\n</li>\n<li><p><strong>XXXTheme</strong> : Theme정보를 의미한다. 해당 프로젝트에서는 Theme.kt에 여러 테마에 필요한 정보를 정리하고, 컴포즈 UI 구현을 위한 코드를 작성해두었다.</p>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> DarkColorPalette = darkColors(</span><br><span class=\"line\">    primary = purple200,</span><br><span class=\"line\">    primaryVariant = purple700,</span><br><span class=\"line\">    secondary = teal200</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> LightColorPalette = lightColors(</span><br><span class=\"line\">    primary = purple500,</span><br><span class=\"line\">    primaryVariant = purple700,</span><br><span class=\"line\">    secondary = teal200</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Other default colors to override</span></span><br><span class=\"line\"><span class=\"comment\">    background = Color.White,</span></span><br><span class=\"line\"><span class=\"comment\">    surface = Color.White,</span></span><br><span class=\"line\"><span class=\"comment\">    onPrimary = Color.White,</span></span><br><span class=\"line\"><span class=\"comment\">    onSecondary = Color.Black,</span></span><br><span class=\"line\"><span class=\"comment\">    onBackground = Color.Black,</span></span><br><span class=\"line\"><span class=\"comment\">    onSurface = Color.Black,</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">BasicsCodelabTheme</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    darkTheme: <span class=\"type\">Boolean</span> = isSystemInDarkTheme()</span></span>,</span><br><span class=\"line\">    content: <span class=\"meta\">@Composable</span> () -&gt; <span class=\"built_in\">Unit</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> colors = <span class=\"keyword\">if</span> (darkTheme) &#123;</span><br><span class=\"line\">        DarkColorPalette</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        LightColorPalette</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    MaterialTheme(</span><br><span class=\"line\">        colors = colors,</span><br><span class=\"line\">        typography = typography,</span><br><span class=\"line\">        shapes = shapes,</span><br><span class=\"line\">        content = content</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Surface</strong> : Greeting을 감싸는 뷰에 해당한다. 여기서는 크기를 정하지 않고, background 색상을 정의하고 있다. 역시 람다 표현식이다. 색상에 대한 Paramter로 <code>color</code> 라는 값을 사용하여 부여가 가능하다. 내부코드를 보면</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Surface</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    modifier: <span class=\"type\">Modifier</span> = Modifier,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    shape: <span class=\"type\">Shape</span> = RectangleShape,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    color: <span class=\"type\">Color</span> = MaterialTheme.colors.surface,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    contentColor: <span class=\"type\">Color</span> = contentColorFor(color)</span></span>,</span><br><span class=\"line\">    border: BorderStroke? = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    elevation: Dp = <span class=\"number\">0.</span>dp,</span><br><span class=\"line\">    content: <span class=\"meta\">@Composable</span> () -&gt; <span class=\"built_in\">Unit</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> elevationPx = with(LocalDensity.current) &#123; elevation.toPx() &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> elevationOverlay = LocalElevationOverlay.current</span><br><span class=\"line\">    <span class=\"keyword\">val</span> absoluteElevation = LocalAbsoluteElevation.current + elevation</span><br><span class=\"line\">    <span class=\"keyword\">val</span> backgroundColor = <span class=\"keyword\">if</span> (color == MaterialTheme.colors.surface &amp;&amp; elevationOverlay != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        elevationOverlay.apply(color, absoluteElevation)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        color</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    CompositionLocalProvider(</span><br><span class=\"line\">        LocalContentColor provides contentColor,</span><br><span class=\"line\">        LocalAbsoluteElevation provides absoluteElevation</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        Box(</span><br><span class=\"line\">            modifier.graphicsLayer(shadowElevation = elevationPx, shape = shape)</span><br><span class=\"line\">                .then(<span class=\"keyword\">if</span> (border != <span class=\"literal\">null</span>) Modifier.border(border, shape) <span class=\"keyword\">else</span> Modifier)</span><br><span class=\"line\">                .background(</span><br><span class=\"line\">                    color = backgroundColor,</span><br><span class=\"line\">                    shape = shape</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .clip(shape),</span><br><span class=\"line\">            propagateMinConstraints = <span class=\"literal\">true</span></span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            content()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-Declarative-UI-선언형-UI\"><a href=\"#7-Declarative-UI-선언형-UI\" class=\"headerlink\" title=\"7. Declarative UI - 선언형 UI\"></a>7. Declarative UI - 선언형 UI</h3><p>노란색 배경을 입혀 기존 TextView에 추가해보았다. 또한, Greeting에는 Modifier라는 것을 이용하여 Padding을 추가했다. 아래와 같은 결과가 나오게 되었다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BasicsCodelabTheme &#123;</span><br><span class=\"line\">  <span class=\"comment\">// A surface container using the &#x27;background&#x27; color from the theme</span></span><br><span class=\"line\">  Surface(color = Color.Yellow) &#123;</span><br><span class=\"line\">    Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Greeting</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isSelected <span class=\"keyword\">by</span> remember &#123; mutableStateOf(<span class=\"literal\">false</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> backgroundColor <span class=\"keyword\">by</span> animateColorAsState(<span class=\"keyword\">if</span> (isSelected) Color.Red <span class=\"keyword\">else</span> Color.Transparent)</span><br><span class=\"line\"></span><br><span class=\"line\">    Text(</span><br><span class=\"line\">        text = <span class=\"string\">&quot;Hello <span class=\"variable\">$name</span>!&quot;</span>,</span><br><span class=\"line\">        modifier = Modifier</span><br><span class=\"line\">            .padding(<span class=\"number\">24.</span>dp)</span><br><span class=\"line\">            .background(color = backgroundColor)</span><br><span class=\"line\">            .clickable(onClick = &#123; isSelected = !isSelected &#125;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%201/qgQ6oY4.png\" class=\"\" title=\"[qgQ6oY4]\">\n\n<p>선언형 UI의 장점은 말 그대로 내가 UI를 정의한대로 시각적으로 표현이 가능하다는 장점이 있다. 기존에는 속성을 매번 On/Off와 같은 옵션을 통해 변경하는 것이 다반사였지만, 이제는 매번 속성에 변경이 생길때마다 새로 그려주게 되는것이다.</p>\n<h3 id=\"8-재사용\"><a href=\"#8-재사용\" class=\"headerlink\" title=\"8. 재사용\"></a>8. 재사용</h3><p>Compose의 장점 중 하나는 재사용성이 뛰어난것인데, XML에서 우리가 include 태그를 통해 여러곳에서 갖다쓸 수 있던것처럼, 함수를 통해 여러곳에서 정의하여 사용이 가능하다.</p>\n<p>참고해야할 점은 Compose 컴포넌트 확장 시 <code>@Composable</code> 어노테이션을 붙여야 한다.</p>\n<h3 id=\"9-Container-작성\"><a href=\"#9-Container-작성\" class=\"headerlink\" title=\"9. Container 작성\"></a>9. Container 작성</h3><p>MyApp이라는 이름으로 컴포즈 컴포넌트를 구횬하여 여러곳에서 공통으로 사용할 수 있는 Composable을 구현하였다. 내부적으로 Container내 내가 원하는 컴포넌트를 넣어주려면 아래와 같이 인자로 <code>@Composable () -&gt; Unit</code> 타입을 넘겨받아 처리해주면 된다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">MyApp</span><span class=\"params\">(content: @<span class=\"type\">Composable</span> () -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    BasicsCodelabTheme &#123;</span><br><span class=\"line\">        Surface(color = Color.Yellow) &#123;</span><br><span class=\"line\">            content()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>위 함수를 통해 이제는 어디서든 반복해서 사용할 수 있는 Container를 구현하게 되어 아래와 같이 코드를 활용할 수 있게되었다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContent &#123;</span><br><span class=\"line\">      MyApp &#123;</span><br><span class=\"line\">        Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-레이아웃을-활용한-Compose-function의-다중-호출\"><a href=\"#10-레이아웃을-활용한-Compose-function의-다중-호출\" class=\"headerlink\" title=\"10. 레이아웃을 활용한 Compose function의 다중 호출\"></a>10. 레이아웃을 활용한 Compose function의 다중 호출</h3><p>지금까지는 하나의 컴포넌트만을 갖고 사용했지만, 여러개의 컴포넌트를 넣는것도 가능하다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">MyScreenContent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Column &#123;</span><br><span class=\"line\">        Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">        Divider(color = Color.Black)</span><br><span class=\"line\">        Greeting(<span class=\"string\">&quot;there&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <code>Column</code>과 위에서부터 사용하던 <code>Greeting</code> 함수를 사용하고, 라인을 그어주기 위한 <code>Divider</code>를 추가한 결과물은 다음과 같다.</p>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%201/VLTxB8C.png\" class=\"\" title=\"[VLTxB8C]\">\n\n<p>위 컴포넌트 중 못보던 컴포저블이 있는데, 아래와 같이 설명이 가능하다.</p>\n<ul>\n<li>Column : 항목을 순서대로 배치하기 위해 사용한다.</li>\n<li>Divider : 선 긋기 가능한 Compose 함수이다.</li>\n</ul>\n<p>이를 리스트 형태로도 구현이 가능하다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">MyColumnScreen</span><span class=\"params\">(names: <span class=\"type\">List</span>&lt;<span class=\"type\">String</span>&gt; = listOf(<span class=\"string\">&quot;Line One&quot;</span>, <span class=\"string\">&quot;Line Two&quot;</span>)</span></span>) &#123;</span><br><span class=\"line\">    Column &#123;</span><br><span class=\"line\">        names.forEach &#123;</span><br><span class=\"line\">            Greeting(name = it)</span><br><span class=\"line\">            Divider(color = Color.Black)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-State-in-Compose-Compose에서의-상태값-관리\"><a href=\"#11-State-in-Compose-Compose에서의-상태값-관리\" class=\"headerlink\" title=\"11. State in Compose - Compose에서의 상태값 관리\"></a>11. State in Compose - Compose에서의 상태값 관리</h3><p>컴포넌트에 버튼을 클릭했을 때 클릭한 카운트를 집계하는 간단한 컴포넌트를 만들어보았다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">MyColumnScreen</span><span class=\"params\">(names: <span class=\"type\">List</span>&lt;<span class=\"type\">String</span>&gt; = listOf(<span class=\"string\">&quot;Line One&quot;</span>, <span class=\"string\">&quot;Line Two&quot;</span>)</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> counterState = remember &#123; mutableStateOf(<span class=\"number\">0</span>) &#125; <span class=\"comment\">// </span></span><br><span class=\"line\"></span><br><span class=\"line\">    Column &#123;</span><br><span class=\"line\">        names.forEach &#123;</span><br><span class=\"line\">            Greeting(name = it)</span><br><span class=\"line\">            Divider(color = Color.Black)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Counter(</span><br><span class=\"line\">            count = counterState.value,</span><br><span class=\"line\">            updateCount = &#123; newCount -&gt;</span><br><span class=\"line\">                counterState.value = newCount</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>remember라는 함수를 사용하여 기존에 존재하는 컴포넌트의 상태값을 기억하게 하는 함수가 있다. </p>\n<p><code>remember</code> 함수의 내부를 살펴보자.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Remember the value produced by [calculation]. [calculation] will only be evaluated during the composition.</span></span><br><span class=\"line\"><span class=\"comment\"> * Recomposition will always return the value produced by composition.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@OptIn(ComposeCompilerApi::class)</span></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">remember</span><span class=\"params\">(calculation: @<span class=\"type\">DisallowComposableCalls</span> () -&gt; <span class=\"type\">T</span>)</span></span>: T =</span><br><span class=\"line\">    currentComposer.cache(<span class=\"literal\">false</span>, calculation)</span><br></pre></td></tr></table></figure>\n\n<p>매 호출마다 Recomposition(재조합)하게되는 경우 컴포넌트에 값을 다시 제공하는 것을 알 수 있다. @Composable 어노테이션에 들어간 함수는 매번 해당 상태를 구독하고, 상태가 변경될때마다 알림을 받아 기존 화면을 갱신해준다.</p>\n<p>그리고, 아래 Counter를 보면 Button을 이용하여 이벤트를 받아 처리하도록 했다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Counter</span><span class=\"params\">(count: <span class=\"type\">Int</span>, updateCount: (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    Button(</span><br><span class=\"line\">        onClick = &#123; updateCount(count + <span class=\"number\">1</span>) &#125;,</span><br><span class=\"line\">        colors = ButtonDefaults.buttonColors(</span><br><span class=\"line\">            backgroundColor = <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">5</span>) Color.Green <span class=\"keyword\">else</span> Color.White</span><br><span class=\"line\">        )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        Text(<span class=\"string\">&quot;I&#x27;ve been clicked <span class=\"variable\">$count</span> times&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>updateCount(Int)</code> 함수릉 통해 매번 값을 업데이트 해주는데, 이를 통해 counterState에 값을 넣어주면서 해당 컴포넌트가 매번 변경이 되는것이다.</p>\n<p>따라서 결과를 보면, 다음과 같다. Count가 5가 넘어가면 초록색으로 바뀐다.</p>\n\n\n<p>그 외에도 여러형태의 모양을 구성할수 있도록 옵션이 제공되어 있다. 자세한 정보는 나중에 <a href=\"https://developer.android.com/codelabs/jetpack-compose-basics\">Codelabs</a>에 더 나와 있으니 보도록하고, 이번에 setContent에 대한 동작원리를 함께 고민해보자.</p>\n<h3 id=\"12-Activity에서의-View-생성-방식과의-비교\"><a href=\"#12-Activity에서의-View-생성-방식과의-비교\" class=\"headerlink\" title=\"12. Activity에서의 View 생성 방식과의 비교\"></a>12. Activity에서의 View 생성 방식과의 비교</h3><p>Compose를 안드로이드 앱에서 사용하려면 Activity, Fragment와 같은곳에서 contentView로 뿌려줘야한다. 기존에 우리가 사용하던 함수를 보자.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Set the activity content from a layout resource.  The resource will be</span></span><br><span class=\"line\"><span class=\"comment\">* inflated, adding all top-level views to the activity.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> layoutResID Resource ID to be inflated.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@see</span> #setContentView(android.view.View)</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@see</span> #setContentView(android.view.View, android.view.ViewGroup.LayoutParams)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"meta\">@LayoutRes</span> <span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</span><br><span class=\"line\">  getWindow().setContentView(layoutResID);</span><br><span class=\"line\">  initWindowDecorActionBar();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UI 컴포넌트에서 화면을 붙일 수 있는 Window라는 녀석에서 Layout Resource Id를 통해 기존에 등록되어있던 Layout XML 파일을 로드하여 인플레이터에서 파싱하고, 이를통해 레이아웃 계층에 있는 뷰객체를 생성하여 순차적으로 ViewGroup, View를 만들어 넣어주게 된다.</p>\n<p><code>PhoneWindow</code>를 보면 자세하게 알 수 있는데, Window를 구현한 setContentView에서 처음에 생성되는 최상위 레이아웃 그 위에 따로 없다면 <code>installDecor()</code> 함수를 통해 mContentParent(레이아웃 리소스가 붙게될 ViewGroup)를 생성하고, 하위에 넣어주게 된다.</p>\n<p>그러면 기존 방식은 이정도로 설명을하고, 이번엔 Compose에서 <code>setContent()</code> 라는 함수를 어떻게 사용하는지 보자.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Composes the given composable into the given activity. The [content] will become the root view</span></span><br><span class=\"line\"><span class=\"comment\"> * of the given activity.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This is roughly equivalent to calling [ComponentActivity.setContentView] with a [ComposeView]</span></span><br><span class=\"line\"><span class=\"comment\"> * i.e.:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * ```</span></span><br><span class=\"line\"><span class=\"comment\"> * setContentView(</span></span><br><span class=\"line\"><span class=\"comment\"> *   ComposeView(this).apply &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     setContent &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       MyComposableContent()</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * )</span></span><br><span class=\"line\"><span class=\"comment\"> * ```</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> parent The parent composition reference to coordinate scheduling of composition updates</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> content A `<span class=\"doctag\">@Composable</span>` function declaring the UI contents</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> ComponentActivity.<span class=\"title\">setContent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    parent: <span class=\"type\">CompositionContext</span>? = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    content: @<span class=\"type\">Composable</span> () -&gt; <span class=\"type\">Unit</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> existingComposeView = window.decorView</span><br><span class=\"line\">        .findViewById&lt;ViewGroup&gt;(android.R.id.content)</span><br><span class=\"line\">        .getChildAt(<span class=\"number\">0</span>) <span class=\"keyword\">as</span>? ComposeView</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existingComposeView != <span class=\"literal\">null</span>) with(existingComposeView) &#123;</span><br><span class=\"line\">        setParentCompositionContext(parent)</span><br><span class=\"line\">        setContent(content)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> ComposeView(<span class=\"keyword\">this</span>).apply &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Set content and parent **before** setContentView</span></span><br><span class=\"line\">        <span class=\"comment\">// to have ComposeView create the composition on attach</span></span><br><span class=\"line\">        setParentCompositionContext(parent)</span><br><span class=\"line\">        setContent(content)</span><br><span class=\"line\">        <span class=\"comment\">// Set the view tree owners before setting the content view so that the inflation process</span></span><br><span class=\"line\">        <span class=\"comment\">// and attach listeners will see them already present</span></span><br><span class=\"line\">        setOwners()</span><br><span class=\"line\">        setContentView(<span class=\"keyword\">this</span>, DefaultActivityContentLayoutParams)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>이녀석도 마찬가지로 <code>window.decorView.findViewById&lt;ViewGroup&gt;(android.R.id.content)</code>  함수를 호출하여 decorView를 가져온다. 만약 compose를 통해 만들어진 최상위 레이아웃이 존재하면, 기존에 inflator에서 ViewGroup, View를 생성해서 넣어주던것 처럼 <code>setContent()</code> =&gt; window가 Activity/Fragment에 붙으면 <code>createComposition()</code>를 호출하여 검증 후 <code>ensureCompsositionCreated()</code> 함수를 호출한다. 현재는 내부적으로 <code>ViewGroup.setContent()</code> 를 사용하고 있는데, 곧 교체 될 예정이라고 한다. 이코드도 보면 기존에 있는 ViewGroup에 확장함수로 구현한 녀석인데, 쉽게 말해 ViewGroup에 하위 View, ViewGroup에 Composable로 구현된 함수로 컴포넌트를 넣어줄 때 AndroidComposeView라는 객체를 꺼내오거나 없다면 새로 생성하여 넣어준다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Composes the given composable into the given view.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The new composition can be logically &quot;linked&quot; to an existing one, by providing a</span></span><br><span class=\"line\"><span class=\"comment\"> * [parent]. This will ensure that invalidations and CompositionLocals will flow through</span></span><br><span class=\"line\"><span class=\"comment\"> * the two compositions as if they were not separate.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Note that this [ViewGroup] should have an unique id for the saved instance state mechanism to</span></span><br><span class=\"line\"><span class=\"comment\"> * be able to save and restore the values used within the composition. See [View.setId].</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> parent The [Recomposer] or parent composition reference.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> content Composable that will be the content of the view.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">fun</span> ViewGroup.<span class=\"title\">setContent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    parent: <span class=\"type\">CompositionContext</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    content: @<span class=\"type\">Composable</span> () -&gt; <span class=\"type\">Unit</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>: Composition &#123;</span><br><span class=\"line\">    GlobalSnapshotManager.ensureStarted()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> composeView =</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childCount &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            getChildAt(<span class=\"number\">0</span>) <span class=\"keyword\">as</span>? AndroidComposeView</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            removeAllViews(); <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125; ?: AndroidComposeView(context).also &#123; addView(it.view, DefaultLayoutParams) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doSetContent(composeView, parent, content)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>다시 돌아와서, ComposeView의 <code>setContent()</code> 이라는 녀석을 보자.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A [android.view.View] that can host Jetpack Compose UI content.</span></span><br><span class=\"line\"><span class=\"comment\"> * Use [setContent] to supply the content composable function for the view.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This [android.view.View] requires that the window it is attached to contains a</span></span><br><span class=\"line\"><span class=\"comment\"> * [ViewTreeLifecycleOwner]. This [androidx.lifecycle.LifecycleOwner] is used to</span></span><br><span class=\"line\"><span class=\"comment\"> * [dispose][androidx.compose.runtime.Composition.dispose] of the underlying composition</span></span><br><span class=\"line\"><span class=\"comment\"> * when the host [Lifecycle] is destroyed, permitting the view to be attached and</span></span><br><span class=\"line\"><span class=\"comment\"> * detached repeatedly while preserving the composition. Call [disposeComposition]</span></span><br><span class=\"line\"><span class=\"comment\"> * to dispose of the underlying composition earlier, or if the view is never initially</span></span><br><span class=\"line\"><span class=\"comment\"> * attached to a window. (The requirement to dispose of the composition explicitly</span></span><br><span class=\"line\"><span class=\"comment\"> * in the event that the view is never (re)attached is temporary.)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposeView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span></span>(</span><br><span class=\"line\">    context: Context,</span><br><span class=\"line\">    attrs: AttributeSet? = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    defStyleAttr: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">) : AbstractComposeView(context, attrs, defStyleAttr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> content = mutableStateOf&lt;(<span class=\"meta\">@Composable</span> () -&gt; <span class=\"built_in\">Unit</span>)?&gt;(<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Suppress(<span class=\"meta-string\">&quot;RedundantVisibilityModifier&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> shouldCreateCompositionOnAttachedToWindow: <span class=\"built_in\">Boolean</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">set</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Composable</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Content</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        content.value?.invoke()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Set the Jetpack Compose UI content for this view.</span></span><br><span class=\"line\"><span class=\"comment\">     * Initial composition will occur when the view becomes attached to a window or when</span></span><br><span class=\"line\"><span class=\"comment\">     * [createComposition] is called, whichever comes first.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setContent</span><span class=\"params\">(content: @<span class=\"type\">Composable</span> () -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">        shouldCreateCompositionOnAttachedToWindow = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content.value = content</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAttachedToWindow) &#123;</span><br><span class=\"line\">            createComposition()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>결론적으로 <code>AbstractComposeView</code> 라는 녀석은 ViewGroup을 상속받은 녀석이며, 모든 composable의 상태가 변화 되었을 때 이를 감지하는 중요한 녀석이다.</p>\n<p><code>setContent()</code>라는 함수는 위에서 설명했으니 넘어가고, 이번에는 <code>Content</code>라는 녀석을 보자. 이녀석은 추상 메소드로, <code>createComposition()</code> 이라는 함수가 호출 되었을 때, 가장 먼저 불리는 함수이다. 아까 언급되었던 <code>ensureCompsositionCreated()</code> 함수에서 tree계층의 ComposeView가 다 붙었다면, 이후에 즉시 Content함수가 호출이된다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Suppress(<span class=\"meta-string\">&quot;DEPRECATION&quot;</span>)</span> <span class=\"comment\">// Still using ViewGroup.setContent for now</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ensureCompositionCreated</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (composition == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                creatingComposition = <span class=\"literal\">true</span></span><br><span class=\"line\">                composition = setContent(</span><br><span class=\"line\">                    parentContext ?: findViewTreeCompositionContext() ?: windowRecomposer</span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">                    Content() <span class=\"comment\">// 이곳에서 뷰가 다 window에 붙게되면 콜백을 호출한다.</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                creatingComposition = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>그러면 아래 <code>ComposeView</code>의 오버라이딩 된 Content가 호출되면서, 기존에 생성된 View에 UI속성과 같은 Content가 붙게된다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* The Jetpack Compose UI content for this view.</span></span><br><span class=\"line\"><span class=\"comment\">* Subclasses must implement this method to provide content. Initial composition will</span></span><br><span class=\"line\"><span class=\"comment\">* occur when the view becomes attached to a window or when [createComposition] is called,</span></span><br><span class=\"line\"><span class=\"comment\">* whichever comes first.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Content</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n\n<p>Content는 설명에서 보는것과 같이 <code>createComposition()</code> 함수 호출 후 View가 Window에 붙은 이후 즉시 호출된다.</p>\n<p>최종적으로 <code>ComponentActivity.setContent(CompositionContext?, @Composable () -&gt; Unit)</code> 함수에서 구현된 ComposeView 인스턴스를 ContentLayout을 widht/height를 wrapContent크기로 정하여 ContentView를 Set해주게 된다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Composes the given composable into the given activity. The [content] will become the root view</span></span><br><span class=\"line\"><span class=\"comment\"> * of the given activity.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This is roughly equivalent to calling [ComponentActivity.setContentView] with a [ComposeView]</span></span><br><span class=\"line\"><span class=\"comment\"> * i.e.:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * ```</span></span><br><span class=\"line\"><span class=\"comment\"> * setContentView(</span></span><br><span class=\"line\"><span class=\"comment\"> *   ComposeView(this).apply &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     setContent &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       MyComposableContent()</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * )</span></span><br><span class=\"line\"><span class=\"comment\"> * ```</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> parent The parent composition reference to coordinate scheduling of composition updates</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> content A `<span class=\"doctag\">@Composable</span>` function declaring the UI contents</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> ComponentActivity.<span class=\"title\">setContent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    parent: <span class=\"type\">CompositionContext</span>? = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    content: @<span class=\"type\">Composable</span> () -&gt; <span class=\"type\">Unit</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span> &#123;</span><br><span class=\"line\">  \t...</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> ComposeView(<span class=\"keyword\">this</span>).apply &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Set content and parent **before** setContentView</span></span><br><span class=\"line\">        <span class=\"comment\">// to have ComposeView create the composition on attach</span></span><br><span class=\"line\">        setParentCompositionContext(parent)</span><br><span class=\"line\">        setContent(content)</span><br><span class=\"line\">        <span class=\"comment\">// Set the view tree owners before setting the content view so that the inflation process</span></span><br><span class=\"line\">        <span class=\"comment\">// and attach listeners will see them already present</span></span><br><span class=\"line\">        setOwners()</span><br><span class=\"line\">        setContentView(<span class=\"keyword\">this</span>, DefaultActivityContentLayoutParams)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-ComposeView\"><a href=\"#13-ComposeView\" class=\"headerlink\" title=\"13. ComposeView\"></a>13. ComposeView</h3><p>android.view.View 는 Jetpack Compose UI 콘텐츠를 사용할 수 있도록 해줍니다. setContent 를 사용하면 composable function content 를 뷰에 제공할 수 있다.</p>\n<p>Compose 의 계층 구조는 아래와 같으며. ComposeView 를 통해 androidx.compose.materia 에 정의된 다양한 컴포넌트를 조합하여 Composable function 콘텐츠를 구성할 수 있다.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kotlin.Any</span><br><span class=\"line\"> ↳ android.view.View</span><br><span class=\"line\">   ↳ android.view.ViewGroup</span><br><span class=\"line\">     ↳ androidx.compose.ui.platform.AbstractComposeView</span><br><span class=\"line\">       ↳ androidx.compose.ui.platform.ComposeView</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-Compose-Compiler-Compose-Runtime\"><a href=\"#14-Compose-Compiler-Compose-Runtime\" class=\"headerlink\" title=\"14. Compose Compiler / Compose Runtime\"></a>14. Compose Compiler / Compose Runtime</h3><p>Compose Compiler 는 <code>@Composable</code> 이 설정된 경우 Composable function 으로 코드 변환과 코틀린 컴파일러 플러그인과 함께 최적화를 활성화한다.</p>\n<p>Compose Runtime은 Compose의 프로그래밍 모델과 상태 관리, 그리고 Compose 컴파일러를 지정하기 위한 코어 런타임에 대한 기본 설정을 수행한다.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Composable</span><br><span class=\"line\">fun Greeting(name: String) &#123;</span><br><span class=\"line\">    var greet by remember &#123; mutableStateOf(&quot;Hello $name&quot;) &#125;</span><br><span class=\"line\">    Text(text = greet, color = Color.Red)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>위의 코드는 Compose Compiler에 의해 <code>@Composeable</code>은 아래와 같이 변경된다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Greeting</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  $composer: <span class=\"type\">Composer</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  $static: <span class=\"type\">Int</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  name: <span class=\"type\">String</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span> &#123;</span><br><span class=\"line\">  $composer.start(<span class=\"number\">123</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> greet <span class=\"keyword\">by</span> remember &#123; mutableStateOf(<span class=\"string\">&quot;Hello <span class=\"variable\">$name</span>&quot;</span>) &#125;</span><br><span class=\"line\">  Text(text = greet, color = Color.Red)</span><br><span class=\"line\">  $composer.end()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Compose 는 <code>composer.start</code> 에서 고유의 키를 가지고 있고, 이는 Compose 의 state 가 변경될 때 해당 키를 가진 Compose 만 변경되도록 동작한다.</p>\n<p>static 은 상태(state)의 변경여부를 알 수 있는데 상태의 변화가 없는 경우, <code>composer.start</code> 와 <code>composer.end</code> 사이의 UI 의 변경을 하지 않는다.</p>\n<p>이때 데이터의 상태가 변경되어 UI 를 다시 구성하는 경우는 Recomposition 이라고 한다.</p>\n","site":{"data":{}},"excerpt":"<article class=\"message message-immersive is-primary\">\n    <div class=\"message-body\">\n        <i class=\"fas fa-pen-fancy mr-2\"></i>Writers<br>\n        by 김남훈 @Naver<br>\n        by 배희성 @RocketPunch<br>\n        by 송시영 @SmartStudy<br>\n        by 이기정 @BankSalad\n    </div>\n</article>","more":"<h2 id=\"Jetpack-Compose란-무엇인가\"><a href=\"#Jetpack-Compose란-무엇인가\" class=\"headerlink\" title=\"Jetpack Compose란 무엇인가?\"></a>Jetpack Compose란 무엇인가?</h2><img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%201/compose_animation.gif\" class=\"\" title=\"[compose_animation]\">\n\n<blockquote>\n<p><strong>출처</strong> <a href=\"https://developer.android.com/jetpack/compose\">Android Developers#Jetpack Compse</a></p>\n</blockquote>\n<p>Compose는 Native UI를 코드레벨로 구현할 수 있는 최신 툴킷이다. </p>\n<p>기존의 뷰를 업데이트하는 방식과 달리 Compose를 사용하면 필요한 영역의 뷰를 다시 그려주는 방식으로 작업할 수 있다.</p>\n<p>아래는 아주 간단한 예제이다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Greeting</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">\tText(<span class=\"string\">&quot;Hello <span class=\"variable\">$name</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>위의 예제처럼 UI를 구성하는 것이 아니라 화면을 구성하는 뷰의 State 설명하는 것이므로 아무것도 반환하지 않는다.</p>\n<p>아래는 공식 서비스 소개 영상이다.</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/U5BwfqBpiWU\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n\n<h3 id=\"Compose의-4가지-특징\"><a href=\"#Compose의-4가지-특징\" class=\"headerlink\" title=\"Compose의 4가지 특징\"></a>Compose의 4가지 특징</h3><p>구글에서 설명하는 Compose를 이용시 얻을 수 있는 장점은 아래와 같다.</p>\n<ul>\n<li><code>Less Code</code> - 코드 감소<ul>\n<li>적은 수의 코드로 더 많은 작업을 하고 전체 버그 클래스를 방지할 수 있으므로 코드가 간단하며 유지 관리하기 쉽습니다.</li>\n</ul>\n</li>\n<li><code>Intuitive</code> - 직관적<ul>\n<li>UI만 설명하면 나머지는 Compose에서 처리합니다. 앱 상태가 변경되면 UI가 자동으로 업데이트됩니다.</li>\n</ul>\n</li>\n<li><code>Accelerate Development</code> - 빠른 개발 과정<ul>\n<li>기존의 모든 코드와 호환되므로 언제 어디서든 원하는 대로 사용할 수 있습니다. 실시간 미리보기 및 완전한 Android 스튜디오 지원으로 빠르게 반복할 수 있습니다.</li>\n</ul>\n</li>\n<li><code>Powerful</code> - 강력한 성능<ul>\n<li>Android 플랫폼 API에 직접 액세스하고 머티리얼 디자인, 어두운 테마, 애니메이션 등을 기본적으로 지원하는 멋진 앱을 만들 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<p>늘 그렇듯 구글에서 말하는 설명만 보면 안 쓸 이유가 없어보이고, 대세가 된다면 Android 개발자에게 또 하나의 러닝커브로 작용할 것이다.</p>\n<h2 id=\"Codelab-Jetpack-Compose-basics\"><a href=\"#Codelab-Jetpack-Compose-basics\" class=\"headerlink\" title=\"Codelab - Jetpack Compose basics\"></a>Codelab - Jetpack Compose basics</h2><h3 id=\"1-시작하기전에\"><a href=\"#1-시작하기전에\" class=\"headerlink\" title=\"1. 시작하기전에\"></a>1. 시작하기전에</h3><p>Compose는 아직 정식으로 릴리즈되지 않은 기능이므로 Android Studio Canary에서 프로젝트를 구성하며 몇 가지 제한사항이 존재한다.</p>\n<ol>\n<li>Android Studio Canary </li>\n</ol>\n<p>Canary는 아래 링크에서 다운 받을 수 있다.</p>\n<blockquote>\n<p><a href=\"https://developer.android.com/studio/preview\">Android Studio Preview</a></p>\n</blockquote>\n<ol start=\"2\">\n<li>최신 버전의 Kotlin plugin </li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ext.kotlin_version = <span class=\"string\">&#x27;1.4.31&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>buildFeatures 및 composeOption 활성화</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    buildFeatures &#123;</span><br><span class=\"line\">        compose <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    composeOptions &#123;</span><br><span class=\"line\">        kotlinCompilerExtensionVersion <span class=\"number\">1.0</span><span class=\"number\">.0</span>-beta02</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.compose.ui:ui:1.0.0-beta02&quot;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.activity:activity-compose:1.3.0-alpha03&quot;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.compose.material:material:1.0.0-beta02&quot;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.compose.ui:ui-tooling:1.0.0-beta02&quot;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Empty-Compose-프로젝트-생성\"><a href=\"#2-Empty-Compose-프로젝트-생성\" class=\"headerlink\" title=\"2. Empty Compose 프로젝트 생성\"></a>2. Empty Compose 프로젝트 생성</h3><p>[File] - [New] - [New Project…] 를 눌러 새로운 프로젝트를 선택하고(Preview) Empty Compose Activity 를 선택한다.</p>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%201/1_5gfrQWfxyEC7Oq6b2xlJ9w.png\" class=\"\" title=\"[1_5gfrQWfxyEC7Oq6b2xlJ9w]\">\n\n<p>선택 이후 Next를 클릭하고, Compose를 구현할 수 있는 최소 API 레벨인 21을 선택해야한다.</p>\n<p>프로젝트를 생성하면 아래와 같이 app/build.gradle에 의존성 설정 및 추가가 되어 있는것을 알 수 있다.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    kotlinOptions &#123;</span><br><span class=\"line\">        jvmTarget = <span class=\"string\">&#x27;1.8&#x27;</span></span><br><span class=\"line\">        useIR = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildFeatures &#123;</span><br><span class=\"line\">        compose <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    composeOptions &#123;</span><br><span class=\"line\">        kotlinCompilerExtensionVersion compose_version</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.compose.ui:ui:$compose_version&quot;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.activity:activity-compose:1.3.0-alpha03&quot;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.compose.material:material:$compose_version&quot;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.compose.ui:ui-tooling:$compose_version&quot;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>이때 composeOptions 설정에서 kotlinCompilerVersion 에 따라 compose 가 다르게 동작할 수 있음을 유의하자.</p>\n<p>프로젝트를 생성하면 아래와 같은 기본 파일들이 생성된다.</p>\n<p><strong>MainActivity.kt</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContent &#123;</span><br><span class=\"line\">            MyFirstComposeApplicationTheme &#123;</span><br><span class=\"line\">                <span class=\"comment\">// A surface container using the &#x27;background&#x27; color from the theme</span></span><br><span class=\"line\">                Surface(color = MaterialTheme.colors.background) &#123;</span><br><span class=\"line\">                    Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Greeting</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    Text(text = <span class=\"string\">&quot;Hello <span class=\"variable\">$name</span>!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Preview(showBackground = true)</span></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">DefaultPreview</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    MyFirstComposeApplicationTheme &#123;</span><br><span class=\"line\">        Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>ui/theme/Theme.kt</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> DarkColorPalette = darkColors(</span><br><span class=\"line\">    primary = Purple200,</span><br><span class=\"line\">    primaryVariant = Purple700,</span><br><span class=\"line\">    secondary = Teal200</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> LightColorPalette = lightColors(</span><br><span class=\"line\">    primary = Purple500,</span><br><span class=\"line\">    primaryVariant = Purple700,</span><br><span class=\"line\">    secondary = Teal200*</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Other default colors to override</span></span><br><span class=\"line\"><span class=\"comment\">    background = Color.White,</span></span><br><span class=\"line\"><span class=\"comment\">    surface = Color.White,</span></span><br><span class=\"line\"><span class=\"comment\">    onPrimary = Color.White,</span></span><br><span class=\"line\"><span class=\"comment\">    onSecondary = Color.Black,</span></span><br><span class=\"line\"><span class=\"comment\">    onBackground = Color.Black,</span></span><br><span class=\"line\"><span class=\"comment\">    onSurface = Color.Black,</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">MyFirstComposeApplicationTheme</span><span class=\"params\">(darkTheme: <span class=\"type\">Boolean</span> = isSystemInDarkTheme()</span></span>, content: <span class=\"meta\">@Composable</span> () -&gt; <span class=\"built_in\">Unit</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> colors = <span class=\"keyword\">if</span> (darkTheme) &#123;</span><br><span class=\"line\">        DarkColorPalette*</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        LightColorPalette*</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    MaterialTheme(</span><br><span class=\"line\">        colors = colors,</span><br><span class=\"line\">        typography = Typography,</span><br><span class=\"line\">        shapes = Shapes,</span><br><span class=\"line\">        content = content</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>기본 생성된 코드를 보았을 때, Compose는 총 3가지의 구성 요소를 가지는 것으로 추측할 수 있다.</p>\n<ol>\n<li>위젯을 포함하는 Composable 함수</li>\n<li>Preview를 하기 위한 Preview Composable 함수</li>\n<li>setContent 람다 표현식으로 실제 화면에 노출하는 코드</li>\n</ol>\n<p>일반적으로 우리가 아는 Activity의 라이프사이클 콜백 <code>onCreate()</code>에서   <code>setContentView(Int)</code> 함수를 호출하던것이 <code>setContent()</code> 함수로 바뀐것이 가장 큰 특징으로 보여진다.</p>\n<h3 id=\"3-Composable-Function\"><a href=\"#3-Composable-Function\" class=\"headerlink\" title=\"3. Composable Function\"></a>3. Composable Function</h3><p>Composable Function은 어노테이션을 이용한 기술이다. 함수위에 <code>@Composable</code> 어노테이션을 붙이게 되면 함수 안 다른 함수를 호출할 수 있게된다. 아래 코드를 보자.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Greeting</span><span class=\"params\">(names: <span class=\"type\">List</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> names) &#123;</span><br><span class=\"line\">        Text(<span class=\"string\">&quot;Hello <span class=\"variable\">$name</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>단순하게 내부에는 Text라는 함수가 존재하는데, 이를 통해 UI계층 별 요구하는 컴포넌트를 생성해준다. 기본적으로 보이는 text 파라미터는 내부 속성에서 받는 일부 중 하나이다.</p>\n<h3 id=\"4-TextView-만들기\"><a href=\"#4-TextView-만들기\" class=\"headerlink\" title=\"4. TextView 만들기\"></a>4. TextView 만들기</h3><p>위 코드를 실행시켜보면 당연하게도 Hello로 시작하는 TextView가 화면에 그려질것을 암시한다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setContent &#123;</span><br><span class=\"line\">  BasicsCodelabTheme &#123;</span><br><span class=\"line\">    <span class=\"comment\">// A surface container using the &#x27;background&#x27; color from the theme</span></span><br><span class=\"line\">    Surface(color = MaterialTheme.colors.background) &#123;</span><br><span class=\"line\">      Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%201/aO6Jlsg.png\" class=\"\" title=\"[aO6Jlsg]\">\n\n<h3 id=\"5-Preview\"><a href=\"#5-Preview\" class=\"headerlink\" title=\"5. @Preview\"></a>5. <code>@Preview</code></h3><p>말 그대로 어노테이션을 이용하여 IDE에서 Preview를하기 위한 용도이다. 아래 코드와 같이 @Preview 어노테이션을 추가하면 다음 결과를 볼 수 있다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Preview(<span class=\"meta-string\">&quot;Greeting Preview&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">GreetingPreview</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    BasicsCodelabTheme &#123;</span><br><span class=\"line\">        Surface(color = MaterialTheme.colors.background) &#123;</span><br><span class=\"line\">            Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%201/WprDTs1.png\" class=\"\" title=\"[WprDTs1]\">\n\n<h3 id=\"6-setContent-Theme-Surface\"><a href=\"#6-setContent-Theme-Surface\" class=\"headerlink\" title=\"6. setContent / Theme / Surface\"></a>6. setContent / Theme / Surface</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setContent &#123;</span><br><span class=\"line\">  BasicsCodelabTheme &#123;</span><br><span class=\"line\">    <span class=\"comment\">// A surface container using the &#x27;background&#x27; color from the theme</span></span><br><span class=\"line\">    Surface(color = MaterialTheme.colors.background) &#123;</span><br><span class=\"line\">      Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>기존에 onCreate시점에 화면을 그려주기 위한 필수적인 요소를 정리해보자면</p>\n<ul>\n<li><p><strong>setContent</strong> : Activity에서 setContentView함수를 사용하는 것과 동일한 동작을 하는 확장함수이다. 다만, setContent의 경우 (@Composable) -&gt; Unit 타입의 컴포즈 UI를 구현해주어야한다.</p>\n</li>\n<li><p><strong>XXXTheme</strong> : Theme정보를 의미한다. 해당 프로젝트에서는 Theme.kt에 여러 테마에 필요한 정보를 정리하고, 컴포즈 UI 구현을 위한 코드를 작성해두었다.</p>\n</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> DarkColorPalette = darkColors(</span><br><span class=\"line\">    primary = purple200,</span><br><span class=\"line\">    primaryVariant = purple700,</span><br><span class=\"line\">    secondary = teal200</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> LightColorPalette = lightColors(</span><br><span class=\"line\">    primary = purple500,</span><br><span class=\"line\">    primaryVariant = purple700,</span><br><span class=\"line\">    secondary = teal200</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Other default colors to override</span></span><br><span class=\"line\"><span class=\"comment\">    background = Color.White,</span></span><br><span class=\"line\"><span class=\"comment\">    surface = Color.White,</span></span><br><span class=\"line\"><span class=\"comment\">    onPrimary = Color.White,</span></span><br><span class=\"line\"><span class=\"comment\">    onSecondary = Color.Black,</span></span><br><span class=\"line\"><span class=\"comment\">    onBackground = Color.Black,</span></span><br><span class=\"line\"><span class=\"comment\">    onSurface = Color.Black,</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">BasicsCodelabTheme</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    darkTheme: <span class=\"type\">Boolean</span> = isSystemInDarkTheme()</span></span>,</span><br><span class=\"line\">    content: <span class=\"meta\">@Composable</span> () -&gt; <span class=\"built_in\">Unit</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> colors = <span class=\"keyword\">if</span> (darkTheme) &#123;</span><br><span class=\"line\">        DarkColorPalette</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        LightColorPalette</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    MaterialTheme(</span><br><span class=\"line\">        colors = colors,</span><br><span class=\"line\">        typography = typography,</span><br><span class=\"line\">        shapes = shapes,</span><br><span class=\"line\">        content = content</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Surface</strong> : Greeting을 감싸는 뷰에 해당한다. 여기서는 크기를 정하지 않고, background 색상을 정의하고 있다. 역시 람다 표현식이다. 색상에 대한 Paramter로 <code>color</code> 라는 값을 사용하여 부여가 가능하다. 내부코드를 보면</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Surface</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    modifier: <span class=\"type\">Modifier</span> = Modifier,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    shape: <span class=\"type\">Shape</span> = RectangleShape,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    color: <span class=\"type\">Color</span> = MaterialTheme.colors.surface,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    contentColor: <span class=\"type\">Color</span> = contentColorFor(color)</span></span>,</span><br><span class=\"line\">    border: BorderStroke? = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    elevation: Dp = <span class=\"number\">0.</span>dp,</span><br><span class=\"line\">    content: <span class=\"meta\">@Composable</span> () -&gt; <span class=\"built_in\">Unit</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> elevationPx = with(LocalDensity.current) &#123; elevation.toPx() &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> elevationOverlay = LocalElevationOverlay.current</span><br><span class=\"line\">    <span class=\"keyword\">val</span> absoluteElevation = LocalAbsoluteElevation.current + elevation</span><br><span class=\"line\">    <span class=\"keyword\">val</span> backgroundColor = <span class=\"keyword\">if</span> (color == MaterialTheme.colors.surface &amp;&amp; elevationOverlay != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        elevationOverlay.apply(color, absoluteElevation)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        color</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    CompositionLocalProvider(</span><br><span class=\"line\">        LocalContentColor provides contentColor,</span><br><span class=\"line\">        LocalAbsoluteElevation provides absoluteElevation</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        Box(</span><br><span class=\"line\">            modifier.graphicsLayer(shadowElevation = elevationPx, shape = shape)</span><br><span class=\"line\">                .then(<span class=\"keyword\">if</span> (border != <span class=\"literal\">null</span>) Modifier.border(border, shape) <span class=\"keyword\">else</span> Modifier)</span><br><span class=\"line\">                .background(</span><br><span class=\"line\">                    color = backgroundColor,</span><br><span class=\"line\">                    shape = shape</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .clip(shape),</span><br><span class=\"line\">            propagateMinConstraints = <span class=\"literal\">true</span></span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            content()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-Declarative-UI-선언형-UI\"><a href=\"#7-Declarative-UI-선언형-UI\" class=\"headerlink\" title=\"7. Declarative UI - 선언형 UI\"></a>7. Declarative UI - 선언형 UI</h3><p>노란색 배경을 입혀 기존 TextView에 추가해보았다. 또한, Greeting에는 Modifier라는 것을 이용하여 Padding을 추가했다. 아래와 같은 결과가 나오게 되었다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BasicsCodelabTheme &#123;</span><br><span class=\"line\">  <span class=\"comment\">// A surface container using the &#x27;background&#x27; color from the theme</span></span><br><span class=\"line\">  Surface(color = Color.Yellow) &#123;</span><br><span class=\"line\">    Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Greeting</span><span class=\"params\">(name: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isSelected <span class=\"keyword\">by</span> remember &#123; mutableStateOf(<span class=\"literal\">false</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> backgroundColor <span class=\"keyword\">by</span> animateColorAsState(<span class=\"keyword\">if</span> (isSelected) Color.Red <span class=\"keyword\">else</span> Color.Transparent)</span><br><span class=\"line\"></span><br><span class=\"line\">    Text(</span><br><span class=\"line\">        text = <span class=\"string\">&quot;Hello <span class=\"variable\">$name</span>!&quot;</span>,</span><br><span class=\"line\">        modifier = Modifier</span><br><span class=\"line\">            .padding(<span class=\"number\">24.</span>dp)</span><br><span class=\"line\">            .background(color = backgroundColor)</span><br><span class=\"line\">            .clickable(onClick = &#123; isSelected = !isSelected &#125;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%201/qgQ6oY4.png\" class=\"\" title=\"[qgQ6oY4]\">\n\n<p>선언형 UI의 장점은 말 그대로 내가 UI를 정의한대로 시각적으로 표현이 가능하다는 장점이 있다. 기존에는 속성을 매번 On/Off와 같은 옵션을 통해 변경하는 것이 다반사였지만, 이제는 매번 속성에 변경이 생길때마다 새로 그려주게 되는것이다.</p>\n<h3 id=\"8-재사용\"><a href=\"#8-재사용\" class=\"headerlink\" title=\"8. 재사용\"></a>8. 재사용</h3><p>Compose의 장점 중 하나는 재사용성이 뛰어난것인데, XML에서 우리가 include 태그를 통해 여러곳에서 갖다쓸 수 있던것처럼, 함수를 통해 여러곳에서 정의하여 사용이 가능하다.</p>\n<p>참고해야할 점은 Compose 컴포넌트 확장 시 <code>@Composable</code> 어노테이션을 붙여야 한다.</p>\n<h3 id=\"9-Container-작성\"><a href=\"#9-Container-작성\" class=\"headerlink\" title=\"9. Container 작성\"></a>9. Container 작성</h3><p>MyApp이라는 이름으로 컴포즈 컴포넌트를 구횬하여 여러곳에서 공통으로 사용할 수 있는 Composable을 구현하였다. 내부적으로 Container내 내가 원하는 컴포넌트를 넣어주려면 아래와 같이 인자로 <code>@Composable () -&gt; Unit</code> 타입을 넘겨받아 처리해주면 된다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">MyApp</span><span class=\"params\">(content: @<span class=\"type\">Composable</span> () -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    BasicsCodelabTheme &#123;</span><br><span class=\"line\">        Surface(color = Color.Yellow) &#123;</span><br><span class=\"line\">            content()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>위 함수를 통해 이제는 어디서든 반복해서 사용할 수 있는 Container를 구현하게 되어 아래와 같이 코드를 활용할 수 있게되었다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContent &#123;</span><br><span class=\"line\">      MyApp &#123;</span><br><span class=\"line\">        Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-레이아웃을-활용한-Compose-function의-다중-호출\"><a href=\"#10-레이아웃을-활용한-Compose-function의-다중-호출\" class=\"headerlink\" title=\"10. 레이아웃을 활용한 Compose function의 다중 호출\"></a>10. 레이아웃을 활용한 Compose function의 다중 호출</h3><p>지금까지는 하나의 컴포넌트만을 갖고 사용했지만, 여러개의 컴포넌트를 넣는것도 가능하다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">MyScreenContent</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Column &#123;</span><br><span class=\"line\">        Greeting(<span class=\"string\">&quot;Android&quot;</span>)</span><br><span class=\"line\">        Divider(color = Color.Black)</span><br><span class=\"line\">        Greeting(<span class=\"string\">&quot;there&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <code>Column</code>과 위에서부터 사용하던 <code>Greeting</code> 함수를 사용하고, 라인을 그어주기 위한 <code>Divider</code>를 추가한 결과물은 다음과 같다.</p>\n<img src=\"/Team-Blog/2021/04/07/2021-04-07%20Jetpack%20Compose%20Part%201/VLTxB8C.png\" class=\"\" title=\"[VLTxB8C]\">\n\n<p>위 컴포넌트 중 못보던 컴포저블이 있는데, 아래와 같이 설명이 가능하다.</p>\n<ul>\n<li>Column : 항목을 순서대로 배치하기 위해 사용한다.</li>\n<li>Divider : 선 긋기 가능한 Compose 함수이다.</li>\n</ul>\n<p>이를 리스트 형태로도 구현이 가능하다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">MyColumnScreen</span><span class=\"params\">(names: <span class=\"type\">List</span>&lt;<span class=\"type\">String</span>&gt; = listOf(<span class=\"string\">&quot;Line One&quot;</span>, <span class=\"string\">&quot;Line Two&quot;</span>)</span></span>) &#123;</span><br><span class=\"line\">    Column &#123;</span><br><span class=\"line\">        names.forEach &#123;</span><br><span class=\"line\">            Greeting(name = it)</span><br><span class=\"line\">            Divider(color = Color.Black)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-State-in-Compose-Compose에서의-상태값-관리\"><a href=\"#11-State-in-Compose-Compose에서의-상태값-관리\" class=\"headerlink\" title=\"11. State in Compose - Compose에서의 상태값 관리\"></a>11. State in Compose - Compose에서의 상태값 관리</h3><p>컴포넌트에 버튼을 클릭했을 때 클릭한 카운트를 집계하는 간단한 컴포넌트를 만들어보았다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">MyColumnScreen</span><span class=\"params\">(names: <span class=\"type\">List</span>&lt;<span class=\"type\">String</span>&gt; = listOf(<span class=\"string\">&quot;Line One&quot;</span>, <span class=\"string\">&quot;Line Two&quot;</span>)</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> counterState = remember &#123; mutableStateOf(<span class=\"number\">0</span>) &#125; <span class=\"comment\">// </span></span><br><span class=\"line\"></span><br><span class=\"line\">    Column &#123;</span><br><span class=\"line\">        names.forEach &#123;</span><br><span class=\"line\">            Greeting(name = it)</span><br><span class=\"line\">            Divider(color = Color.Black)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Counter(</span><br><span class=\"line\">            count = counterState.value,</span><br><span class=\"line\">            updateCount = &#123; newCount -&gt;</span><br><span class=\"line\">                counterState.value = newCount</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>remember라는 함수를 사용하여 기존에 존재하는 컴포넌트의 상태값을 기억하게 하는 함수가 있다. </p>\n<p><code>remember</code> 함수의 내부를 살펴보자.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Remember the value produced by [calculation]. [calculation] will only be evaluated during the composition.</span></span><br><span class=\"line\"><span class=\"comment\"> * Recomposition will always return the value produced by composition.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@OptIn(ComposeCompilerApi::class)</span></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">remember</span><span class=\"params\">(calculation: @<span class=\"type\">DisallowComposableCalls</span> () -&gt; <span class=\"type\">T</span>)</span></span>: T =</span><br><span class=\"line\">    currentComposer.cache(<span class=\"literal\">false</span>, calculation)</span><br></pre></td></tr></table></figure>\n\n<p>매 호출마다 Recomposition(재조합)하게되는 경우 컴포넌트에 값을 다시 제공하는 것을 알 수 있다. @Composable 어노테이션에 들어간 함수는 매번 해당 상태를 구독하고, 상태가 변경될때마다 알림을 받아 기존 화면을 갱신해준다.</p>\n<p>그리고, 아래 Counter를 보면 Button을 이용하여 이벤트를 받아 처리하도록 했다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Counter</span><span class=\"params\">(count: <span class=\"type\">Int</span>, updateCount: (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">    Button(</span><br><span class=\"line\">        onClick = &#123; updateCount(count + <span class=\"number\">1</span>) &#125;,</span><br><span class=\"line\">        colors = ButtonDefaults.buttonColors(</span><br><span class=\"line\">            backgroundColor = <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">5</span>) Color.Green <span class=\"keyword\">else</span> Color.White</span><br><span class=\"line\">        )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        Text(<span class=\"string\">&quot;I&#x27;ve been clicked <span class=\"variable\">$count</span> times&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>updateCount(Int)</code> 함수릉 통해 매번 값을 업데이트 해주는데, 이를 통해 counterState에 값을 넣어주면서 해당 컴포넌트가 매번 변경이 되는것이다.</p>\n<p>따라서 결과를 보면, 다음과 같다. Count가 5가 넘어가면 초록색으로 바뀐다.</p>\n\n\n<p>그 외에도 여러형태의 모양을 구성할수 있도록 옵션이 제공되어 있다. 자세한 정보는 나중에 <a href=\"https://developer.android.com/codelabs/jetpack-compose-basics\">Codelabs</a>에 더 나와 있으니 보도록하고, 이번에 setContent에 대한 동작원리를 함께 고민해보자.</p>\n<h3 id=\"12-Activity에서의-View-생성-방식과의-비교\"><a href=\"#12-Activity에서의-View-생성-방식과의-비교\" class=\"headerlink\" title=\"12. Activity에서의 View 생성 방식과의 비교\"></a>12. Activity에서의 View 생성 방식과의 비교</h3><p>Compose를 안드로이드 앱에서 사용하려면 Activity, Fragment와 같은곳에서 contentView로 뿌려줘야한다. 기존에 우리가 사용하던 함수를 보자.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Set the activity content from a layout resource.  The resource will be</span></span><br><span class=\"line\"><span class=\"comment\">* inflated, adding all top-level views to the activity.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> layoutResID Resource ID to be inflated.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@see</span> #setContentView(android.view.View)</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@see</span> #setContentView(android.view.View, android.view.ViewGroup.LayoutParams)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"meta\">@LayoutRes</span> <span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</span><br><span class=\"line\">  getWindow().setContentView(layoutResID);</span><br><span class=\"line\">  initWindowDecorActionBar();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UI 컴포넌트에서 화면을 붙일 수 있는 Window라는 녀석에서 Layout Resource Id를 통해 기존에 등록되어있던 Layout XML 파일을 로드하여 인플레이터에서 파싱하고, 이를통해 레이아웃 계층에 있는 뷰객체를 생성하여 순차적으로 ViewGroup, View를 만들어 넣어주게 된다.</p>\n<p><code>PhoneWindow</code>를 보면 자세하게 알 수 있는데, Window를 구현한 setContentView에서 처음에 생성되는 최상위 레이아웃 그 위에 따로 없다면 <code>installDecor()</code> 함수를 통해 mContentParent(레이아웃 리소스가 붙게될 ViewGroup)를 생성하고, 하위에 넣어주게 된다.</p>\n<p>그러면 기존 방식은 이정도로 설명을하고, 이번엔 Compose에서 <code>setContent()</code> 라는 함수를 어떻게 사용하는지 보자.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Composes the given composable into the given activity. The [content] will become the root view</span></span><br><span class=\"line\"><span class=\"comment\"> * of the given activity.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This is roughly equivalent to calling [ComponentActivity.setContentView] with a [ComposeView]</span></span><br><span class=\"line\"><span class=\"comment\"> * i.e.:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * ```</span></span><br><span class=\"line\"><span class=\"comment\"> * setContentView(</span></span><br><span class=\"line\"><span class=\"comment\"> *   ComposeView(this).apply &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     setContent &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       MyComposableContent()</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * )</span></span><br><span class=\"line\"><span class=\"comment\"> * ```</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> parent The parent composition reference to coordinate scheduling of composition updates</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> content A `<span class=\"doctag\">@Composable</span>` function declaring the UI contents</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> ComponentActivity.<span class=\"title\">setContent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    parent: <span class=\"type\">CompositionContext</span>? = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    content: @<span class=\"type\">Composable</span> () -&gt; <span class=\"type\">Unit</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> existingComposeView = window.decorView</span><br><span class=\"line\">        .findViewById&lt;ViewGroup&gt;(android.R.id.content)</span><br><span class=\"line\">        .getChildAt(<span class=\"number\">0</span>) <span class=\"keyword\">as</span>? ComposeView</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existingComposeView != <span class=\"literal\">null</span>) with(existingComposeView) &#123;</span><br><span class=\"line\">        setParentCompositionContext(parent)</span><br><span class=\"line\">        setContent(content)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> ComposeView(<span class=\"keyword\">this</span>).apply &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Set content and parent **before** setContentView</span></span><br><span class=\"line\">        <span class=\"comment\">// to have ComposeView create the composition on attach</span></span><br><span class=\"line\">        setParentCompositionContext(parent)</span><br><span class=\"line\">        setContent(content)</span><br><span class=\"line\">        <span class=\"comment\">// Set the view tree owners before setting the content view so that the inflation process</span></span><br><span class=\"line\">        <span class=\"comment\">// and attach listeners will see them already present</span></span><br><span class=\"line\">        setOwners()</span><br><span class=\"line\">        setContentView(<span class=\"keyword\">this</span>, DefaultActivityContentLayoutParams)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>이녀석도 마찬가지로 <code>window.decorView.findViewById&lt;ViewGroup&gt;(android.R.id.content)</code>  함수를 호출하여 decorView를 가져온다. 만약 compose를 통해 만들어진 최상위 레이아웃이 존재하면, 기존에 inflator에서 ViewGroup, View를 생성해서 넣어주던것 처럼 <code>setContent()</code> =&gt; window가 Activity/Fragment에 붙으면 <code>createComposition()</code>를 호출하여 검증 후 <code>ensureCompsositionCreated()</code> 함수를 호출한다. 현재는 내부적으로 <code>ViewGroup.setContent()</code> 를 사용하고 있는데, 곧 교체 될 예정이라고 한다. 이코드도 보면 기존에 있는 ViewGroup에 확장함수로 구현한 녀석인데, 쉽게 말해 ViewGroup에 하위 View, ViewGroup에 Composable로 구현된 함수로 컴포넌트를 넣어줄 때 AndroidComposeView라는 객체를 꺼내오거나 없다면 새로 생성하여 넣어준다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Composes the given composable into the given view.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The new composition can be logically &quot;linked&quot; to an existing one, by providing a</span></span><br><span class=\"line\"><span class=\"comment\"> * [parent]. This will ensure that invalidations and CompositionLocals will flow through</span></span><br><span class=\"line\"><span class=\"comment\"> * the two compositions as if they were not separate.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Note that this [ViewGroup] should have an unique id for the saved instance state mechanism to</span></span><br><span class=\"line\"><span class=\"comment\"> * be able to save and restore the values used within the composition. See [View.setId].</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> parent The [Recomposer] or parent composition reference.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> content Composable that will be the content of the view.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">fun</span> ViewGroup.<span class=\"title\">setContent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    parent: <span class=\"type\">CompositionContext</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    content: @<span class=\"type\">Composable</span> () -&gt; <span class=\"type\">Unit</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>: Composition &#123;</span><br><span class=\"line\">    GlobalSnapshotManager.ensureStarted()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> composeView =</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childCount &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            getChildAt(<span class=\"number\">0</span>) <span class=\"keyword\">as</span>? AndroidComposeView</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            removeAllViews(); <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125; ?: AndroidComposeView(context).also &#123; addView(it.view, DefaultLayoutParams) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doSetContent(composeView, parent, content)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>다시 돌아와서, ComposeView의 <code>setContent()</code> 이라는 녀석을 보자.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A [android.view.View] that can host Jetpack Compose UI content.</span></span><br><span class=\"line\"><span class=\"comment\"> * Use [setContent] to supply the content composable function for the view.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This [android.view.View] requires that the window it is attached to contains a</span></span><br><span class=\"line\"><span class=\"comment\"> * [ViewTreeLifecycleOwner]. This [androidx.lifecycle.LifecycleOwner] is used to</span></span><br><span class=\"line\"><span class=\"comment\"> * [dispose][androidx.compose.runtime.Composition.dispose] of the underlying composition</span></span><br><span class=\"line\"><span class=\"comment\"> * when the host [Lifecycle] is destroyed, permitting the view to be attached and</span></span><br><span class=\"line\"><span class=\"comment\"> * detached repeatedly while preserving the composition. Call [disposeComposition]</span></span><br><span class=\"line\"><span class=\"comment\"> * to dispose of the underlying composition earlier, or if the view is never initially</span></span><br><span class=\"line\"><span class=\"comment\"> * attached to a window. (The requirement to dispose of the composition explicitly</span></span><br><span class=\"line\"><span class=\"comment\"> * in the event that the view is never (re)attached is temporary.)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComposeView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span></span>(</span><br><span class=\"line\">    context: Context,</span><br><span class=\"line\">    attrs: AttributeSet? = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    defStyleAttr: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">) : AbstractComposeView(context, attrs, defStyleAttr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> content = mutableStateOf&lt;(<span class=\"meta\">@Composable</span> () -&gt; <span class=\"built_in\">Unit</span>)?&gt;(<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Suppress(<span class=\"meta-string\">&quot;RedundantVisibilityModifier&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> shouldCreateCompositionOnAttachedToWindow: <span class=\"built_in\">Boolean</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">set</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Composable</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Content</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        content.value?.invoke()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Set the Jetpack Compose UI content for this view.</span></span><br><span class=\"line\"><span class=\"comment\">     * Initial composition will occur when the view becomes attached to a window or when</span></span><br><span class=\"line\"><span class=\"comment\">     * [createComposition] is called, whichever comes first.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setContent</span><span class=\"params\">(content: @<span class=\"type\">Composable</span> () -&gt; <span class=\"type\">Unit</span>)</span></span> &#123;</span><br><span class=\"line\">        shouldCreateCompositionOnAttachedToWindow = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content.value = content</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAttachedToWindow) &#123;</span><br><span class=\"line\">            createComposition()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>결론적으로 <code>AbstractComposeView</code> 라는 녀석은 ViewGroup을 상속받은 녀석이며, 모든 composable의 상태가 변화 되었을 때 이를 감지하는 중요한 녀석이다.</p>\n<p><code>setContent()</code>라는 함수는 위에서 설명했으니 넘어가고, 이번에는 <code>Content</code>라는 녀석을 보자. 이녀석은 추상 메소드로, <code>createComposition()</code> 이라는 함수가 호출 되었을 때, 가장 먼저 불리는 함수이다. 아까 언급되었던 <code>ensureCompsositionCreated()</code> 함수에서 tree계층의 ComposeView가 다 붙었다면, 이후에 즉시 Content함수가 호출이된다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Suppress(<span class=\"meta-string\">&quot;DEPRECATION&quot;</span>)</span> <span class=\"comment\">// Still using ViewGroup.setContent for now</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ensureCompositionCreated</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (composition == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                creatingComposition = <span class=\"literal\">true</span></span><br><span class=\"line\">                composition = setContent(</span><br><span class=\"line\">                    parentContext ?: findViewTreeCompositionContext() ?: windowRecomposer</span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">                    Content() <span class=\"comment\">// 이곳에서 뷰가 다 window에 붙게되면 콜백을 호출한다.</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                creatingComposition = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>그러면 아래 <code>ComposeView</code>의 오버라이딩 된 Content가 호출되면서, 기존에 생성된 View에 UI속성과 같은 Content가 붙게된다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* The Jetpack Compose UI content for this view.</span></span><br><span class=\"line\"><span class=\"comment\">* Subclasses must implement this method to provide content. Initial composition will</span></span><br><span class=\"line\"><span class=\"comment\">* occur when the view becomes attached to a window or when [createComposition] is called,</span></span><br><span class=\"line\"><span class=\"comment\">* whichever comes first.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Composable</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Content</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n\n<p>Content는 설명에서 보는것과 같이 <code>createComposition()</code> 함수 호출 후 View가 Window에 붙은 이후 즉시 호출된다.</p>\n<p>최종적으로 <code>ComponentActivity.setContent(CompositionContext?, @Composable () -&gt; Unit)</code> 함수에서 구현된 ComposeView 인스턴스를 ContentLayout을 widht/height를 wrapContent크기로 정하여 ContentView를 Set해주게 된다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Composes the given composable into the given activity. The [content] will become the root view</span></span><br><span class=\"line\"><span class=\"comment\"> * of the given activity.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This is roughly equivalent to calling [ComponentActivity.setContentView] with a [ComposeView]</span></span><br><span class=\"line\"><span class=\"comment\"> * i.e.:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * ```</span></span><br><span class=\"line\"><span class=\"comment\"> * setContentView(</span></span><br><span class=\"line\"><span class=\"comment\"> *   ComposeView(this).apply &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     setContent &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *       MyComposableContent()</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * )</span></span><br><span class=\"line\"><span class=\"comment\"> * ```</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> parent The parent composition reference to coordinate scheduling of composition updates</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> content A `<span class=\"doctag\">@Composable</span>` function declaring the UI contents</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> ComponentActivity.<span class=\"title\">setContent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    parent: <span class=\"type\">CompositionContext</span>? = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    content: @<span class=\"type\">Composable</span> () -&gt; <span class=\"type\">Unit</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span> &#123;</span><br><span class=\"line\">  \t...</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> ComposeView(<span class=\"keyword\">this</span>).apply &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Set content and parent **before** setContentView</span></span><br><span class=\"line\">        <span class=\"comment\">// to have ComposeView create the composition on attach</span></span><br><span class=\"line\">        setParentCompositionContext(parent)</span><br><span class=\"line\">        setContent(content)</span><br><span class=\"line\">        <span class=\"comment\">// Set the view tree owners before setting the content view so that the inflation process</span></span><br><span class=\"line\">        <span class=\"comment\">// and attach listeners will see them already present</span></span><br><span class=\"line\">        setOwners()</span><br><span class=\"line\">        setContentView(<span class=\"keyword\">this</span>, DefaultActivityContentLayoutParams)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-ComposeView\"><a href=\"#13-ComposeView\" class=\"headerlink\" title=\"13. ComposeView\"></a>13. ComposeView</h3><p>android.view.View 는 Jetpack Compose UI 콘텐츠를 사용할 수 있도록 해줍니다. setContent 를 사용하면 composable function content 를 뷰에 제공할 수 있다.</p>\n<p>Compose 의 계층 구조는 아래와 같으며. ComposeView 를 통해 androidx.compose.materia 에 정의된 다양한 컴포넌트를 조합하여 Composable function 콘텐츠를 구성할 수 있다.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kotlin.Any</span><br><span class=\"line\"> ↳ android.view.View</span><br><span class=\"line\">   ↳ android.view.ViewGroup</span><br><span class=\"line\">     ↳ androidx.compose.ui.platform.AbstractComposeView</span><br><span class=\"line\">       ↳ androidx.compose.ui.platform.ComposeView</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-Compose-Compiler-Compose-Runtime\"><a href=\"#14-Compose-Compiler-Compose-Runtime\" class=\"headerlink\" title=\"14. Compose Compiler / Compose Runtime\"></a>14. Compose Compiler / Compose Runtime</h3><p>Compose Compiler 는 <code>@Composable</code> 이 설정된 경우 Composable function 으로 코드 변환과 코틀린 컴파일러 플러그인과 함께 최적화를 활성화한다.</p>\n<p>Compose Runtime은 Compose의 프로그래밍 모델과 상태 관리, 그리고 Compose 컴파일러를 지정하기 위한 코어 런타임에 대한 기본 설정을 수행한다.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Composable</span><br><span class=\"line\">fun Greeting(name: String) &#123;</span><br><span class=\"line\">    var greet by remember &#123; mutableStateOf(&quot;Hello $name&quot;) &#125;</span><br><span class=\"line\">    Text(text = greet, color = Color.Red)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>위의 코드는 Compose Compiler에 의해 <code>@Composeable</code>은 아래와 같이 변경된다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">Greeting</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  $composer: <span class=\"type\">Composer</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  $static: <span class=\"type\">Int</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  name: <span class=\"type\">String</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span> &#123;</span><br><span class=\"line\">  $composer.start(<span class=\"number\">123</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> greet <span class=\"keyword\">by</span> remember &#123; mutableStateOf(<span class=\"string\">&quot;Hello <span class=\"variable\">$name</span>&quot;</span>) &#125;</span><br><span class=\"line\">  Text(text = greet, color = Color.Red)</span><br><span class=\"line\">  $composer.end()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Compose 는 <code>composer.start</code> 에서 고유의 키를 가지고 있고, 이는 Compose 의 state 가 변경될 때 해당 키를 가진 Compose 만 변경되도록 동작한다.</p>\n<p>static 은 상태(state)의 변경여부를 알 수 있는데 상태의 변화가 없는 경우, <code>composer.start</code> 와 <code>composer.end</code> 사이의 UI 의 변경을 하지 않는다.</p>\n<p>이때 데이터의 상태가 변경되어 UI 를 다시 구성하는 경우는 Recomposition 이라고 한다.</p>"}],"PostAsset":[{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_5RZOM7sWV0sXctJtTPdshQ.png","post":"ckriv3n5s0000z6re3gwf1x4s","slug":"1_5RZOM7sWV0sXctJtTPdshQ.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_9IA2k2s5hAS9pSyzpmQ6Pw.png","post":"ckriv3n5s0000z6re3gwf1x4s","slug":"1_9IA2k2s5hAS9pSyzpmQ6Pw.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_T9Pww7JyPMPhCJ_6yU8fyQ.png","post":"ckriv3n5s0000z6re3gwf1x4s","slug":"1_T9Pww7JyPMPhCJ_6yU8fyQ.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_UoLVl1dbUjKh9kd4uY0ROA.png","post":"ckriv3n5s0000z6re3gwf1x4s","slug":"1_UoLVl1dbUjKh9kd4uY0ROA.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_XVvr-CB2pn88Te7Gg52GPA.png","post":"ckriv3n5s0000z6re3gwf1x4s","slug":"1_XVvr-CB2pn88Te7Gg52GPA.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_bSyX8yT7H2HevBNw9fbyYw.png","post":"ckriv3n5s0000z6re3gwf1x4s","slug":"1_bSyX8yT7H2HevBNw9fbyYw.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_m7mSalYCza-SoJjmlYeWdA.png","post":"ckriv3n5s0000z6re3gwf1x4s","slug":"1_m7mSalYCza-SoJjmlYeWdA.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_tPAf-Akf2IpDRrrZo1f1dg.png","post":"ckriv3n5s0000z6re3gwf1x4s","slug":"1_tPAf-Akf2IpDRrrZo1f1dg.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_wFM4jF71V5aJog3lALaRKQ.png","post":"ckriv3n5s0000z6re3gwf1x4s","slug":"1_wFM4jF71V5aJog3lALaRKQ.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/1_ybDWG4W2bPYNq79vr1gE8w.png","post":"ckriv3n5s0000z6re3gwf1x4s","slug":"1_ybDWG4W2bPYNq79vr1gE8w.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 2/add_002_001.png","post":"ckriv3n5s0000z6re3gwf1x4s","slug":"add_002_001.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 1/1_5gfrQWfxyEC7Oq6b2xlJ9w.png","post":"ckriv3n650009z6reb20fabh4","slug":"1_5gfrQWfxyEC7Oq6b2xlJ9w.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 1/VLTxB8C.png","post":"ckriv3n650009z6reb20fabh4","slug":"VLTxB8C.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 1/WprDTs1.png","post":"ckriv3n650009z6reb20fabh4","slug":"WprDTs1.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 1/aO6Jlsg.png","post":"ckriv3n650009z6reb20fabh4","slug":"aO6Jlsg.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 1/compose_animation.gif","post":"ckriv3n650009z6reb20fabh4","slug":"compose_animation.gif","modified":1,"renderable":1},{"_id":"source/_posts/2021-04-07 Jetpack Compose Part 1/qgQ6oY4.png","post":"ckriv3n650009z6reb20fabh4","slug":"qgQ6oY4.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckriv3n5s0000z6re3gwf1x4s","category_id":"ckriv3n5y0001z6re1d17dxi2","_id":"ckriv3n620004z6re609wgyvc"},{"post_id":"ckriv3n650009z6reb20fabh4","category_id":"ckriv3n5y0001z6re1d17dxi2","_id":"ckriv3n67000cz6reejh29208"}],"PostTag":[{"post_id":"ckriv3n5s0000z6re3gwf1x4s","tag_id":"ckriv3n600002z6re8iykcz8s","_id":"ckriv3n640006z6re3nvh5v8r"},{"post_id":"ckriv3n5s0000z6re3gwf1x4s","tag_id":"ckriv3n620003z6regdft2322","_id":"ckriv3n650007z6reb7n60l3i"},{"post_id":"ckriv3n5s0000z6re3gwf1x4s","tag_id":"ckriv3n620005z6re6ifs7zqh","_id":"ckriv3n650008z6rea7d7dx8d"},{"post_id":"ckriv3n650009z6reb20fabh4","tag_id":"ckriv3n600002z6re8iykcz8s","_id":"ckriv3n67000az6re5ywtgpfx"},{"post_id":"ckriv3n650009z6reb20fabh4","tag_id":"ckriv3n620003z6regdft2322","_id":"ckriv3n67000bz6re4oy5dls8"},{"post_id":"ckriv3n650009z6reb20fabh4","tag_id":"ckriv3n620005z6re6ifs7zqh","_id":"ckriv3n67000dz6red67jbdhb"}],"Tag":[{"name":"Android","_id":"ckriv3n600002z6re8iykcz8s"},{"name":"Jetpack","_id":"ckriv3n620003z6regdft2322"},{"name":"Compose","_id":"ckriv3n620005z6re6ifs7zqh"}]}}